
AEAT6600ConfigAndReadData.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050b8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  0800524c  0800524c  0001524c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005360  08005360  00020540  2**0
                  CONTENTS
  4 .ARM          00000000  08005360  08005360  00020540  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005360  08005360  00020540  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005360  08005360  00015360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005364  08005364  00015364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000540  20000000  08005368  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020540  2**0
                  CONTENTS
 10 .bss          000005e0  20000540  20000540  00020540  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b20  20000b20  00020540  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020540  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001138d  00000000  00000000  00020570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021cd  00000000  00000000  000318fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d68  00000000  00000000  00033ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ca0  00000000  00000000  00034838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000202c1  00000000  00000000  000354d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010f5b  00000000  00000000  00055799  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6d2e  00000000  00000000  000666f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012d422  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000037f4  00000000  00000000  0012d474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000540 	.word	0x20000540
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08005234 	.word	0x08005234

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000544 	.word	0x20000544
 80001d0:	08005234 	.word	0x08005234

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
//	GPIO_InitTypeDef GPIO_InitStruct = {0};

//	uint8_t fSetPin2InputMode = 0u;
	oldTick = 0u;
 80001d8:	4b2f      	ldr	r3, [pc, #188]	; (8000298 <main+0xc4>)
 80001da:	2200      	movs	r2, #0
 80001dc:	601a      	str	r2, [r3, #0]
	oldBtn = 10000u;
 80001de:	4b2f      	ldr	r3, [pc, #188]	; (800029c <main+0xc8>)
 80001e0:	f242 7210 	movw	r2, #10000	; 0x2710
 80001e4:	601a      	str	r2, [r3, #0]
	csPinState = GPIO_PIN_SET;
 80001e6:	4b2e      	ldr	r3, [pc, #184]	; (80002a0 <main+0xcc>)
 80001e8:	2201      	movs	r2, #1
 80001ea:	701a      	strb	r2, [r3, #0]
	dataPinState = GPIO_PIN_SET;
 80001ec:	4b2d      	ldr	r3, [pc, #180]	; (80002a4 <main+0xd0>)
 80001ee:	2201      	movs	r2, #1
 80001f0:	701a      	strb	r2, [r3, #0]
	clkPinState = GPIO_PIN_SET;
 80001f2:	4b2d      	ldr	r3, [pc, #180]	; (80002a8 <main+0xd4>)
 80001f4:	2201      	movs	r2, #1
 80001f6:	701a      	strb	r2, [r3, #0]
	cntClkRisingEdge = 0u;
 80001f8:	4b2c      	ldr	r3, [pc, #176]	; (80002ac <main+0xd8>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	601a      	str	r2, [r3, #0]
	btnPressed = 0u;
 80001fe:	4b2c      	ldr	r3, [pc, #176]	; (80002b0 <main+0xdc>)
 8000200:	2200      	movs	r2, #0
 8000202:	701a      	strb	r2, [r3, #0]
	doInputMode = 0u;
 8000204:	4b2b      	ldr	r3, [pc, #172]	; (80002b4 <main+0xe0>)
 8000206:	2200      	movs	r2, #0
 8000208:	701a      	strb	r2, [r3, #0]
	evTim1Tick = 0u;
 800020a:	4b2b      	ldr	r3, [pc, #172]	; (80002b8 <main+0xe4>)
 800020c:	2200      	movs	r2, #0
 800020e:	701a      	strb	r2, [r3, #0]

	pState = 0u;
 8000210:	4b2a      	ldr	r3, [pc, #168]	; (80002bc <main+0xe8>)
 8000212:	2200      	movs	r2, #0
 8000214:	701a      	strb	r2, [r3, #0]
	oldpState = 0u;
 8000216:	4b2a      	ldr	r3, [pc, #168]	; (80002c0 <main+0xec>)
 8000218:	2200      	movs	r2, #0
 800021a:	701a      	strb	r2, [r3, #0]

	cPStateBuf = 0u;
 800021c:	4b29      	ldr	r3, [pc, #164]	; (80002c4 <main+0xf0>)
 800021e:	2200      	movs	r2, #0
 8000220:	701a      	strb	r2, [r3, #0]

	mData[0]=0u;
 8000222:	4b29      	ldr	r3, [pc, #164]	; (80002c8 <main+0xf4>)
 8000224:	2200      	movs	r2, #0
 8000226:	701a      	strb	r2, [r3, #0]
	mData[1]=0u;
 8000228:	4b27      	ldr	r3, [pc, #156]	; (80002c8 <main+0xf4>)
 800022a:	2200      	movs	r2, #0
 800022c:	705a      	strb	r2, [r3, #1]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800022e:	f000 fbcb 	bl	80009c8 <HAL_Init>

  /* USER CODE BEGIN Init */
  uInit();
 8000232:	f004 fea7 	bl	8004f84 <uInit>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000236:	f000 f84d 	bl	80002d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800023a:	f000 f955 	bl	80004e8 <MX_GPIO_Init>
  MX_DMA_Init();
 800023e:	f000 f92d 	bl	800049c <MX_DMA_Init>
  MX_TIM1_Init();
 8000242:	f000 f8a9 	bl	8000398 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000246:	f000 f8f9 	bl	800043c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, ssiNCS_Pin|ssiClk_Pin|ssiDO_Pin, GPIO_PIN_SET);
 800024a:	2201      	movs	r2, #1
 800024c:	21e0      	movs	r1, #224	; 0xe0
 800024e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000252:	f001 f901 	bl	8001458 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  uint8_t nBtn = GPIO_PIN_RESET;
//	  nBtn = HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin);
	  mSysTick = HAL_GetTick();
 8000256:	f000 fc11 	bl	8000a7c <HAL_GetTick>
 800025a:	4603      	mov	r3, r0
 800025c:	4a1b      	ldr	r2, [pc, #108]	; (80002cc <main+0xf8>)
 800025e:	6013      	str	r3, [r2, #0]
	  if ( (oldTick!=mSysTick) && (0u == (mSysTick%25)) )
 8000260:	4b0d      	ldr	r3, [pc, #52]	; (8000298 <main+0xc4>)
 8000262:	681a      	ldr	r2, [r3, #0]
 8000264:	4b19      	ldr	r3, [pc, #100]	; (80002cc <main+0xf8>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	429a      	cmp	r2, r3
 800026a:	d0f4      	beq.n	8000256 <main+0x82>
 800026c:	4b17      	ldr	r3, [pc, #92]	; (80002cc <main+0xf8>)
 800026e:	6819      	ldr	r1, [r3, #0]
 8000270:	4b17      	ldr	r3, [pc, #92]	; (80002d0 <main+0xfc>)
 8000272:	fba3 2301 	umull	r2, r3, r3, r1
 8000276:	08da      	lsrs	r2, r3, #3
 8000278:	4613      	mov	r3, r2
 800027a:	009b      	lsls	r3, r3, #2
 800027c:	4413      	add	r3, r2
 800027e:	009a      	lsls	r2, r3, #2
 8000280:	4413      	add	r3, r2
 8000282:	1aca      	subs	r2, r1, r3
 8000284:	2a00      	cmp	r2, #0
 8000286:	d1e6      	bne.n	8000256 <main+0x82>
	  {
//		  mData16 = ((((uint16_t)mData[1]&0x3F)<<8) + mData[0])>>4;
//		  HAL_GPIO_TogglePin(GPIOA, ssiNCS_Pin);
		  uTask();
 8000288:	f004 feb4 	bl	8004ff4 <uTask>
		  oldTick = mSysTick;
 800028c:	4b0f      	ldr	r3, [pc, #60]	; (80002cc <main+0xf8>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a01      	ldr	r2, [pc, #4]	; (8000298 <main+0xc4>)
 8000292:	6013      	str	r3, [r2, #0]
	  mSysTick = HAL_GetTick();
 8000294:	e7df      	b.n	8000256 <main+0x82>
 8000296:	bf00      	nop
 8000298:	200006c4 	.word	0x200006c4
 800029c:	200006c8 	.word	0x200006c8
 80002a0:	200006cc 	.word	0x200006cc
 80002a4:	200006cd 	.word	0x200006cd
 80002a8:	200006ce 	.word	0x200006ce
 80002ac:	200006b8 	.word	0x200006b8
 80002b0:	200006d4 	.word	0x200006d4
 80002b4:	200006d1 	.word	0x200006d1
 80002b8:	200006d2 	.word	0x200006d2
 80002bc:	200006cf 	.word	0x200006cf
 80002c0:	200006d0 	.word	0x200006d0
 80002c4:	200006d3 	.word	0x200006d3
 80002c8:	200006bc 	.word	0x200006bc
 80002cc:	200006c0 	.word	0x200006c0
 80002d0:	51eb851f 	.word	0x51eb851f

080002d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b0a6      	sub	sp, #152	; 0x98
 80002d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002da:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002de:	2228      	movs	r2, #40	; 0x28
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f004 ff9e 	bl	8005224 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002ec:	2200      	movs	r2, #0
 80002ee:	601a      	str	r2, [r3, #0]
 80002f0:	605a      	str	r2, [r3, #4]
 80002f2:	609a      	str	r2, [r3, #8]
 80002f4:	60da      	str	r2, [r3, #12]
 80002f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002f8:	1d3b      	adds	r3, r7, #4
 80002fa:	2258      	movs	r2, #88	; 0x58
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f004 ff90 	bl	8005224 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000304:	2302      	movs	r3, #2
 8000306:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000308:	2301      	movs	r3, #1
 800030a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800030c:	2310      	movs	r3, #16
 800030e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000312:	2302      	movs	r3, #2
 8000314:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000318:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800031c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000320:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000324:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000328:	2300      	movs	r3, #0
 800032a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000332:	4618      	mov	r0, r3
 8000334:	f001 f8c2 	bl	80014bc <HAL_RCC_OscConfig>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800033e:	f000 f9c5 	bl	80006cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000342:	230f      	movs	r3, #15
 8000344:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000346:	2302      	movs	r3, #2
 8000348:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800034a:	2300      	movs	r3, #0
 800034c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800034e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000352:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000354:	2300      	movs	r3, #0
 8000356:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000358:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800035c:	2102      	movs	r1, #2
 800035e:	4618      	mov	r0, r3
 8000360:	f002 f900 	bl	8002564 <HAL_RCC_ClockConfig>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800036a:	f000 f9af 	bl	80006cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_TIM1;
 800036e:	f241 0304 	movw	r3, #4100	; 0x1004
 8000372:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000374:	2300      	movs	r3, #0
 8000376:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000378:	2300      	movs	r3, #0
 800037a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800037c:	1d3b      	adds	r3, r7, #4
 800037e:	4618      	mov	r0, r3
 8000380:	f002 fb10 	bl	80029a4 <HAL_RCCEx_PeriphCLKConfig>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800038a:	f000 f99f 	bl	80006cc <Error_Handler>
  }
}
 800038e:	bf00      	nop
 8000390:	3798      	adds	r7, #152	; 0x98
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
	...

08000398 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b088      	sub	sp, #32
 800039c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800039e:	f107 0310 	add.w	r3, r7, #16
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	605a      	str	r2, [r3, #4]
 80003a8:	609a      	str	r2, [r3, #8]
 80003aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003ac:	1d3b      	adds	r3, r7, #4
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
 80003b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003b6:	4b1f      	ldr	r3, [pc, #124]	; (8000434 <MX_TIM1_Init+0x9c>)
 80003b8:	4a1f      	ldr	r2, [pc, #124]	; (8000438 <MX_TIM1_Init+0xa0>)
 80003ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80003bc:	4b1d      	ldr	r3, [pc, #116]	; (8000434 <MX_TIM1_Init+0x9c>)
 80003be:	2247      	movs	r2, #71	; 0x47
 80003c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003c2:	4b1c      	ldr	r3, [pc, #112]	; (8000434 <MX_TIM1_Init+0x9c>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5;
 80003c8:	4b1a      	ldr	r3, [pc, #104]	; (8000434 <MX_TIM1_Init+0x9c>)
 80003ca:	2205      	movs	r2, #5
 80003cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ce:	4b19      	ldr	r3, [pc, #100]	; (8000434 <MX_TIM1_Init+0x9c>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003d4:	4b17      	ldr	r3, [pc, #92]	; (8000434 <MX_TIM1_Init+0x9c>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003da:	4b16      	ldr	r3, [pc, #88]	; (8000434 <MX_TIM1_Init+0x9c>)
 80003dc:	2280      	movs	r2, #128	; 0x80
 80003de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003e0:	4814      	ldr	r0, [pc, #80]	; (8000434 <MX_TIM1_Init+0x9c>)
 80003e2:	f002 fcfd 	bl	8002de0 <HAL_TIM_Base_Init>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80003ec:	f000 f96e 	bl	80006cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003f6:	f107 0310 	add.w	r3, r7, #16
 80003fa:	4619      	mov	r1, r3
 80003fc:	480d      	ldr	r0, [pc, #52]	; (8000434 <MX_TIM1_Init+0x9c>)
 80003fe:	f002 fee8 	bl	80031d2 <HAL_TIM_ConfigClockSource>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000408:	f000 f960 	bl	80006cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800040c:	2300      	movs	r3, #0
 800040e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000410:	2300      	movs	r3, #0
 8000412:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000414:	2300      	movs	r3, #0
 8000416:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000418:	1d3b      	adds	r3, r7, #4
 800041a:	4619      	mov	r1, r3
 800041c:	4805      	ldr	r0, [pc, #20]	; (8000434 <MX_TIM1_Init+0x9c>)
 800041e:	f003 f90d 	bl	800363c <HAL_TIMEx_MasterConfigSynchronization>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000428:	f000 f950 	bl	80006cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800042c:	bf00      	nop
 800042e:	3720      	adds	r7, #32
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	2000055c 	.word	0x2000055c
 8000438:	40012c00 	.word	0x40012c00

0800043c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000440:	4b14      	ldr	r3, [pc, #80]	; (8000494 <MX_USART3_UART_Init+0x58>)
 8000442:	4a15      	ldr	r2, [pc, #84]	; (8000498 <MX_USART3_UART_Init+0x5c>)
 8000444:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000446:	4b13      	ldr	r3, [pc, #76]	; (8000494 <MX_USART3_UART_Init+0x58>)
 8000448:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800044c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800044e:	4b11      	ldr	r3, [pc, #68]	; (8000494 <MX_USART3_UART_Init+0x58>)
 8000450:	2200      	movs	r2, #0
 8000452:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000454:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <MX_USART3_UART_Init+0x58>)
 8000456:	2200      	movs	r2, #0
 8000458:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800045a:	4b0e      	ldr	r3, [pc, #56]	; (8000494 <MX_USART3_UART_Init+0x58>)
 800045c:	2200      	movs	r2, #0
 800045e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000460:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <MX_USART3_UART_Init+0x58>)
 8000462:	220c      	movs	r2, #12
 8000464:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000466:	4b0b      	ldr	r3, [pc, #44]	; (8000494 <MX_USART3_UART_Init+0x58>)
 8000468:	2200      	movs	r2, #0
 800046a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800046c:	4b09      	ldr	r3, [pc, #36]	; (8000494 <MX_USART3_UART_Init+0x58>)
 800046e:	2200      	movs	r2, #0
 8000470:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000472:	4b08      	ldr	r3, [pc, #32]	; (8000494 <MX_USART3_UART_Init+0x58>)
 8000474:	2200      	movs	r2, #0
 8000476:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000478:	4b06      	ldr	r3, [pc, #24]	; (8000494 <MX_USART3_UART_Init+0x58>)
 800047a:	2200      	movs	r2, #0
 800047c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800047e:	4805      	ldr	r0, [pc, #20]	; (8000494 <MX_USART3_UART_Init+0x58>)
 8000480:	f003 f986 	bl	8003790 <HAL_UART_Init>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800048a:	f000 f91f 	bl	80006cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800048e:	bf00      	nop
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	200005a8 	.word	0x200005a8
 8000498:	40004800 	.word	0x40004800

0800049c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004a2:	4b10      	ldr	r3, [pc, #64]	; (80004e4 <MX_DMA_Init+0x48>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	4a0f      	ldr	r2, [pc, #60]	; (80004e4 <MX_DMA_Init+0x48>)
 80004a8:	f043 0301 	orr.w	r3, r3, #1
 80004ac:	6153      	str	r3, [r2, #20]
 80004ae:	4b0d      	ldr	r3, [pc, #52]	; (80004e4 <MX_DMA_Init+0x48>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	f003 0301 	and.w	r3, r3, #1
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80004ba:	2200      	movs	r2, #0
 80004bc:	2100      	movs	r1, #0
 80004be:	200c      	movs	r0, #12
 80004c0:	f000 fbc3 	bl	8000c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80004c4:	200c      	movs	r0, #12
 80004c6:	f000 fbdc 	bl	8000c82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80004ca:	2200      	movs	r2, #0
 80004cc:	2100      	movs	r1, #0
 80004ce:	200d      	movs	r0, #13
 80004d0:	f000 fbbb 	bl	8000c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80004d4:	200d      	movs	r0, #13
 80004d6:	f000 fbd4 	bl	8000c82 <HAL_NVIC_EnableIRQ>

}
 80004da:	bf00      	nop
 80004dc:	3708      	adds	r7, #8
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40021000 	.word	0x40021000

080004e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b08c      	sub	sp, #48	; 0x30
 80004ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ee:	f107 031c 	add.w	r3, r7, #28
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	609a      	str	r2, [r3, #8]
 80004fa:	60da      	str	r2, [r3, #12]
 80004fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fe:	4b6f      	ldr	r3, [pc, #444]	; (80006bc <MX_GPIO_Init+0x1d4>)
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	4a6e      	ldr	r2, [pc, #440]	; (80006bc <MX_GPIO_Init+0x1d4>)
 8000504:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000508:	6153      	str	r3, [r2, #20]
 800050a:	4b6c      	ldr	r3, [pc, #432]	; (80006bc <MX_GPIO_Init+0x1d4>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000512:	61bb      	str	r3, [r7, #24]
 8000514:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000516:	4b69      	ldr	r3, [pc, #420]	; (80006bc <MX_GPIO_Init+0x1d4>)
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	4a68      	ldr	r2, [pc, #416]	; (80006bc <MX_GPIO_Init+0x1d4>)
 800051c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000520:	6153      	str	r3, [r2, #20]
 8000522:	4b66      	ldr	r3, [pc, #408]	; (80006bc <MX_GPIO_Init+0x1d4>)
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800052a:	617b      	str	r3, [r7, #20]
 800052c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052e:	4b63      	ldr	r3, [pc, #396]	; (80006bc <MX_GPIO_Init+0x1d4>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	4a62      	ldr	r2, [pc, #392]	; (80006bc <MX_GPIO_Init+0x1d4>)
 8000534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000538:	6153      	str	r3, [r2, #20]
 800053a:	4b60      	ldr	r3, [pc, #384]	; (80006bc <MX_GPIO_Init+0x1d4>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000542:	613b      	str	r3, [r7, #16]
 8000544:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000546:	4b5d      	ldr	r3, [pc, #372]	; (80006bc <MX_GPIO_Init+0x1d4>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	4a5c      	ldr	r2, [pc, #368]	; (80006bc <MX_GPIO_Init+0x1d4>)
 800054c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000550:	6153      	str	r3, [r2, #20]
 8000552:	4b5a      	ldr	r3, [pc, #360]	; (80006bc <MX_GPIO_Init+0x1d4>)
 8000554:	695b      	ldr	r3, [r3, #20]
 8000556:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800055e:	4b57      	ldr	r3, [pc, #348]	; (80006bc <MX_GPIO_Init+0x1d4>)
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	4a56      	ldr	r2, [pc, #344]	; (80006bc <MX_GPIO_Init+0x1d4>)
 8000564:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000568:	6153      	str	r3, [r2, #20]
 800056a:	4b54      	ldr	r3, [pc, #336]	; (80006bc <MX_GPIO_Init+0x1d4>)
 800056c:	695b      	ldr	r3, [r3, #20]
 800056e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000576:	4b51      	ldr	r3, [pc, #324]	; (80006bc <MX_GPIO_Init+0x1d4>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	4a50      	ldr	r2, [pc, #320]	; (80006bc <MX_GPIO_Init+0x1d4>)
 800057c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000580:	6153      	str	r3, [r2, #20]
 8000582:	4b4e      	ldr	r3, [pc, #312]	; (80006bc <MX_GPIO_Init+0x1d4>)
 8000584:	695b      	ldr	r3, [r3, #20]
 8000586:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ssiNCS_Pin|ssiClk_Pin|ssiDO_Pin, GPIO_PIN_RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	21e0      	movs	r1, #224	; 0xe0
 8000592:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000596:	f000 ff5f 	bl	8001458 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|testPin_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	f245 0181 	movw	r1, #20609	; 0x5081
 80005a0:	4847      	ldr	r0, [pc, #284]	; (80006c0 <MX_GPIO_Init+0x1d8>)
 80005a2:	f000 ff59 	bl	8001458 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2140      	movs	r1, #64	; 0x40
 80005aa:	4846      	ldr	r0, [pc, #280]	; (80006c4 <MX_GPIO_Init+0x1dc>)
 80005ac:	f000 ff54 	bl	8001458 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80005b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005b6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	2300      	movs	r3, #0
 80005be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80005c0:	f107 031c 	add.w	r3, r7, #28
 80005c4:	4619      	mov	r1, r3
 80005c6:	4840      	ldr	r0, [pc, #256]	; (80006c8 <MX_GPIO_Init+0x1e0>)
 80005c8:	f000 fda4 	bl	8001114 <HAL_GPIO_Init>

  /*Configure GPIO pin : ssiNCS_Pin */
  GPIO_InitStruct.Pin = ssiNCS_Pin;
 80005cc:	2320      	movs	r3, #32
 80005ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d0:	2301      	movs	r3, #1
 80005d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d4:	2300      	movs	r3, #0
 80005d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80005d8:	2301      	movs	r3, #1
 80005da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ssiNCS_GPIO_Port, &GPIO_InitStruct);
 80005dc:	f107 031c 	add.w	r3, r7, #28
 80005e0:	4619      	mov	r1, r3
 80005e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e6:	f000 fd95 	bl	8001114 <HAL_GPIO_Init>

  /*Configure GPIO pin : ssiClk_Pin */
  GPIO_InitStruct.Pin = ssiClk_Pin;
 80005ea:	2340      	movs	r3, #64	; 0x40
 80005ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ee:	2301      	movs	r3, #1
 80005f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005f6:	2303      	movs	r3, #3
 80005f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ssiClk_GPIO_Port, &GPIO_InitStruct);
 80005fa:	f107 031c 	add.w	r3, r7, #28
 80005fe:	4619      	mov	r1, r3
 8000600:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000604:	f000 fd86 	bl	8001114 <HAL_GPIO_Init>

  /*Configure GPIO pin : ssiDO_Pin */
  GPIO_InitStruct.Pin = ssiDO_Pin;
 8000608:	2380      	movs	r3, #128	; 0x80
 800060a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800060c:	2311      	movs	r3, #17
 800060e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000610:	2301      	movs	r3, #1
 8000612:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000614:	2303      	movs	r3, #3
 8000616:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ssiDO_GPIO_Port, &GPIO_InitStruct);
 8000618:	f107 031c 	add.w	r3, r7, #28
 800061c:	4619      	mov	r1, r3
 800061e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000622:	f000 fd77 	bl	8001114 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000626:	f244 0301 	movw	r3, #16385	; 0x4001
 800062a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062c:	2301      	movs	r3, #1
 800062e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000634:	2300      	movs	r3, #0
 8000636:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000638:	f107 031c 	add.w	r3, r7, #28
 800063c:	4619      	mov	r1, r3
 800063e:	4820      	ldr	r0, [pc, #128]	; (80006c0 <MX_GPIO_Init+0x1d8>)
 8000640:	f000 fd68 	bl	8001114 <HAL_GPIO_Init>

  /*Configure GPIO pin : testPin_Pin */
  GPIO_InitStruct.Pin = testPin_Pin;
 8000644:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064a:	2301      	movs	r3, #1
 800064c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064e:	2300      	movs	r3, #0
 8000650:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000652:	2303      	movs	r3, #3
 8000654:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(testPin_GPIO_Port, &GPIO_InitStruct);
 8000656:	f107 031c 	add.w	r3, r7, #28
 800065a:	4619      	mov	r1, r3
 800065c:	4818      	ldr	r0, [pc, #96]	; (80006c0 <MX_GPIO_Init+0x1d8>)
 800065e:	f000 fd59 	bl	8001114 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000662:	2340      	movs	r3, #64	; 0x40
 8000664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000666:	2301      	movs	r3, #1
 8000668:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066e:	2300      	movs	r3, #0
 8000670:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	4619      	mov	r1, r3
 8000678:	4812      	ldr	r0, [pc, #72]	; (80006c4 <MX_GPIO_Init+0x1dc>)
 800067a:	f000 fd4b 	bl	8001114 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800067e:	2380      	movs	r3, #128	; 0x80
 8000680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000682:	2300      	movs	r3, #0
 8000684:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800068a:	f107 031c 	add.w	r3, r7, #28
 800068e:	4619      	mov	r1, r3
 8000690:	480c      	ldr	r0, [pc, #48]	; (80006c4 <MX_GPIO_Init+0x1dc>)
 8000692:	f000 fd3f 	bl	8001114 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000696:	2380      	movs	r3, #128	; 0x80
 8000698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069a:	2301      	movs	r3, #1
 800069c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80006a2:	2301      	movs	r3, #1
 80006a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006a6:	f107 031c 	add.w	r3, r7, #28
 80006aa:	4619      	mov	r1, r3
 80006ac:	4804      	ldr	r0, [pc, #16]	; (80006c0 <MX_GPIO_Init+0x1d8>)
 80006ae:	f000 fd31 	bl	8001114 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006b2:	bf00      	nop
 80006b4:	3730      	adds	r7, #48	; 0x30
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40021000 	.word	0x40021000
 80006c0:	48000400 	.word	0x48000400
 80006c4:	48001800 	.word	0x48001800
 80006c8:	48000800 	.word	0x48000800

080006cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d0:	b672      	cpsid	i
}
 80006d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <Error_Handler+0x8>
	...

080006d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <HAL_MspInit+0x44>)
 80006e0:	699b      	ldr	r3, [r3, #24]
 80006e2:	4a0e      	ldr	r2, [pc, #56]	; (800071c <HAL_MspInit+0x44>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	6193      	str	r3, [r2, #24]
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <HAL_MspInit+0x44>)
 80006ec:	699b      	ldr	r3, [r3, #24]
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <HAL_MspInit+0x44>)
 80006f8:	69db      	ldr	r3, [r3, #28]
 80006fa:	4a08      	ldr	r2, [pc, #32]	; (800071c <HAL_MspInit+0x44>)
 80006fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000700:	61d3      	str	r3, [r2, #28]
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <HAL_MspInit+0x44>)
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800070e:	bf00      	nop
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	40021000 	.word	0x40021000

08000720 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a0d      	ldr	r2, [pc, #52]	; (8000764 <HAL_TIM_Base_MspInit+0x44>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d113      	bne.n	800075a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000732:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <HAL_TIM_Base_MspInit+0x48>)
 8000734:	699b      	ldr	r3, [r3, #24]
 8000736:	4a0c      	ldr	r2, [pc, #48]	; (8000768 <HAL_TIM_Base_MspInit+0x48>)
 8000738:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800073c:	6193      	str	r3, [r2, #24]
 800073e:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <HAL_TIM_Base_MspInit+0x48>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	2100      	movs	r1, #0
 800074e:	2019      	movs	r0, #25
 8000750:	f000 fa7b 	bl	8000c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000754:	2019      	movs	r0, #25
 8000756:	f000 fa94 	bl	8000c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800075a:	bf00      	nop
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40012c00 	.word	0x40012c00
 8000768:	40021000 	.word	0x40021000

0800076c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08a      	sub	sp, #40	; 0x28
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a41      	ldr	r2, [pc, #260]	; (8000890 <HAL_UART_MspInit+0x124>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d17c      	bne.n	8000888 <HAL_UART_MspInit+0x11c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800078e:	4b41      	ldr	r3, [pc, #260]	; (8000894 <HAL_UART_MspInit+0x128>)
 8000790:	69db      	ldr	r3, [r3, #28]
 8000792:	4a40      	ldr	r2, [pc, #256]	; (8000894 <HAL_UART_MspInit+0x128>)
 8000794:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000798:	61d3      	str	r3, [r2, #28]
 800079a:	4b3e      	ldr	r3, [pc, #248]	; (8000894 <HAL_UART_MspInit+0x128>)
 800079c:	69db      	ldr	r3, [r3, #28]
 800079e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007a6:	4b3b      	ldr	r3, [pc, #236]	; (8000894 <HAL_UART_MspInit+0x128>)
 80007a8:	695b      	ldr	r3, [r3, #20]
 80007aa:	4a3a      	ldr	r2, [pc, #232]	; (8000894 <HAL_UART_MspInit+0x128>)
 80007ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80007b0:	6153      	str	r3, [r2, #20]
 80007b2:	4b38      	ldr	r3, [pc, #224]	; (8000894 <HAL_UART_MspInit+0x128>)
 80007b4:	695b      	ldr	r3, [r3, #20]
 80007b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80007be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c4:	2302      	movs	r3, #2
 80007c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007cc:	2303      	movs	r3, #3
 80007ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80007d0:	2307      	movs	r3, #7
 80007d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	4619      	mov	r1, r3
 80007da:	482f      	ldr	r0, [pc, #188]	; (8000898 <HAL_UART_MspInit+0x12c>)
 80007dc:	f000 fc9a 	bl	8001114 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80007e0:	4b2e      	ldr	r3, [pc, #184]	; (800089c <HAL_UART_MspInit+0x130>)
 80007e2:	4a2f      	ldr	r2, [pc, #188]	; (80008a0 <HAL_UART_MspInit+0x134>)
 80007e4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007e6:	4b2d      	ldr	r3, [pc, #180]	; (800089c <HAL_UART_MspInit+0x130>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007ec:	4b2b      	ldr	r3, [pc, #172]	; (800089c <HAL_UART_MspInit+0x130>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007f2:	4b2a      	ldr	r3, [pc, #168]	; (800089c <HAL_UART_MspInit+0x130>)
 80007f4:	2280      	movs	r2, #128	; 0x80
 80007f6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007f8:	4b28      	ldr	r3, [pc, #160]	; (800089c <HAL_UART_MspInit+0x130>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007fe:	4b27      	ldr	r3, [pc, #156]	; (800089c <HAL_UART_MspInit+0x130>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000804:	4b25      	ldr	r3, [pc, #148]	; (800089c <HAL_UART_MspInit+0x130>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800080a:	4b24      	ldr	r3, [pc, #144]	; (800089c <HAL_UART_MspInit+0x130>)
 800080c:	2200      	movs	r2, #0
 800080e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000810:	4822      	ldr	r0, [pc, #136]	; (800089c <HAL_UART_MspInit+0x130>)
 8000812:	f000 fa50 	bl	8000cb6 <HAL_DMA_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 800081c:	f7ff ff56 	bl	80006cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	4a1e      	ldr	r2, [pc, #120]	; (800089c <HAL_UART_MspInit+0x130>)
 8000824:	675a      	str	r2, [r3, #116]	; 0x74
 8000826:	4a1d      	ldr	r2, [pc, #116]	; (800089c <HAL_UART_MspInit+0x130>)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 800082c:	4b1d      	ldr	r3, [pc, #116]	; (80008a4 <HAL_UART_MspInit+0x138>)
 800082e:	4a1e      	ldr	r2, [pc, #120]	; (80008a8 <HAL_UART_MspInit+0x13c>)
 8000830:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000832:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <HAL_UART_MspInit+0x138>)
 8000834:	2210      	movs	r2, #16
 8000836:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000838:	4b1a      	ldr	r3, [pc, #104]	; (80008a4 <HAL_UART_MspInit+0x138>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800083e:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <HAL_UART_MspInit+0x138>)
 8000840:	2280      	movs	r2, #128	; 0x80
 8000842:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000844:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <HAL_UART_MspInit+0x138>)
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800084a:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <HAL_UART_MspInit+0x138>)
 800084c:	2200      	movs	r2, #0
 800084e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000850:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <HAL_UART_MspInit+0x138>)
 8000852:	2200      	movs	r2, #0
 8000854:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000856:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <HAL_UART_MspInit+0x138>)
 8000858:	2200      	movs	r2, #0
 800085a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800085c:	4811      	ldr	r0, [pc, #68]	; (80008a4 <HAL_UART_MspInit+0x138>)
 800085e:	f000 fa2a 	bl	8000cb6 <HAL_DMA_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 8000868:	f7ff ff30 	bl	80006cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4a0d      	ldr	r2, [pc, #52]	; (80008a4 <HAL_UART_MspInit+0x138>)
 8000870:	671a      	str	r2, [r3, #112]	; 0x70
 8000872:	4a0c      	ldr	r2, [pc, #48]	; (80008a4 <HAL_UART_MspInit+0x138>)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000878:	2200      	movs	r2, #0
 800087a:	2100      	movs	r1, #0
 800087c:	2027      	movs	r0, #39	; 0x27
 800087e:	f000 f9e4 	bl	8000c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000882:	2027      	movs	r0, #39	; 0x27
 8000884:	f000 f9fd 	bl	8000c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000888:	bf00      	nop
 800088a:	3728      	adds	r7, #40	; 0x28
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40004800 	.word	0x40004800
 8000894:	40021000 	.word	0x40021000
 8000898:	48000c00 	.word	0x48000c00
 800089c:	20000630 	.word	0x20000630
 80008a0:	40020030 	.word	0x40020030
 80008a4:	20000674 	.word	0x20000674
 80008a8:	4002001c 	.word	0x4002001c

080008ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <NMI_Handler+0x4>

080008b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <HardFault_Handler+0x4>

080008b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <MemManage_Handler+0x4>

080008be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c2:	e7fe      	b.n	80008c2 <BusFault_Handler+0x4>

080008c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <UsageFault_Handler+0x4>

080008ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr

080008e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f8:	f000 f8ac 	bl	8000a54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}

08000900 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000904:	4802      	ldr	r0, [pc, #8]	; (8000910 <DMA1_Channel2_IRQHandler+0x10>)
 8000906:	f000 faf8 	bl	8000efa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000674 	.word	0x20000674

08000914 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000918:	4802      	ldr	r0, [pc, #8]	; (8000924 <DMA1_Channel3_IRQHandler+0x10>)
 800091a:	f000 faee 	bl	8000efa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000630 	.word	0x20000630

08000928 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800092c:	4802      	ldr	r0, [pc, #8]	; (8000938 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800092e:	f002 fb4e 	bl	8002fce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	2000055c 	.word	0x2000055c

0800093c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000940:	4802      	ldr	r0, [pc, #8]	; (800094c <USART3_IRQHandler+0x10>)
 8000942:	f003 f833 	bl	80039ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	200005a8 	.word	0x200005a8

08000950 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <SystemInit+0x20>)
 8000956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800095a:	4a05      	ldr	r2, [pc, #20]	; (8000970 <SystemInit+0x20>)
 800095c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000960:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000974:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009ac <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000978:	f7ff ffea 	bl	8000950 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800097c:	480c      	ldr	r0, [pc, #48]	; (80009b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800097e:	490d      	ldr	r1, [pc, #52]	; (80009b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000980:	4a0d      	ldr	r2, [pc, #52]	; (80009b8 <LoopForever+0xe>)
  movs r3, #0
 8000982:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000984:	e002      	b.n	800098c <LoopCopyDataInit>

08000986 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000986:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000988:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800098a:	3304      	adds	r3, #4

0800098c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800098c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800098e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000990:	d3f9      	bcc.n	8000986 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000992:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000994:	4c0a      	ldr	r4, [pc, #40]	; (80009c0 <LoopForever+0x16>)
  movs r3, #0
 8000996:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000998:	e001      	b.n	800099e <LoopFillZerobss>

0800099a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800099a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800099c:	3204      	adds	r2, #4

0800099e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800099e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a0:	d3fb      	bcc.n	800099a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009a2:	f004 fc1b 	bl	80051dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009a6:	f7ff fc15 	bl	80001d4 <main>

080009aa <LoopForever>:

LoopForever:
    b LoopForever
 80009aa:	e7fe      	b.n	80009aa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009ac:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80009b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b4:	20000540 	.word	0x20000540
  ldr r2, =_sidata
 80009b8:	08005368 	.word	0x08005368
  ldr r2, =_sbss
 80009bc:	20000540 	.word	0x20000540
  ldr r4, =_ebss
 80009c0:	20000b20 	.word	0x20000b20

080009c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009c4:	e7fe      	b.n	80009c4 <ADC1_2_IRQHandler>
	...

080009c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009cc:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <HAL_Init+0x28>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a07      	ldr	r2, [pc, #28]	; (80009f0 <HAL_Init+0x28>)
 80009d2:	f043 0310 	orr.w	r3, r3, #16
 80009d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d8:	2003      	movs	r0, #3
 80009da:	f000 f92b 	bl	8000c34 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009de:	2000      	movs	r0, #0
 80009e0:	f000 f808 	bl	80009f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009e4:	f7ff fe78 	bl	80006d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009e8:	2300      	movs	r3, #0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40022000 	.word	0x40022000

080009f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <HAL_InitTick+0x54>)
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <HAL_InitTick+0x58>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	4619      	mov	r1, r3
 8000a06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a12:	4618      	mov	r0, r3
 8000a14:	f000 f943 	bl	8000c9e <HAL_SYSTICK_Config>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e00e      	b.n	8000a40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2b0f      	cmp	r3, #15
 8000a26:	d80a      	bhi.n	8000a3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	6879      	ldr	r1, [r7, #4]
 8000a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a30:	f000 f90b 	bl	8000c4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a34:	4a06      	ldr	r2, [pc, #24]	; (8000a50 <HAL_InitTick+0x5c>)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	e000      	b.n	8000a40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000000 	.word	0x20000000
 8000a4c:	20000008 	.word	0x20000008
 8000a50:	20000004 	.word	0x20000004

08000a54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <HAL_IncTick+0x20>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_IncTick+0x24>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4413      	add	r3, r2
 8000a64:	4a04      	ldr	r2, [pc, #16]	; (8000a78 <HAL_IncTick+0x24>)
 8000a66:	6013      	str	r3, [r2, #0]
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	20000008 	.word	0x20000008
 8000a78:	200006d8 	.word	0x200006d8

08000a7c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a80:	4b03      	ldr	r3, [pc, #12]	; (8000a90 <HAL_GetTick+0x14>)
 8000a82:	681b      	ldr	r3, [r3, #0]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	200006d8 	.word	0x200006d8

08000a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	f003 0307 	and.w	r3, r3, #7
 8000aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aaa:	68ba      	ldr	r2, [r7, #8]
 8000aac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000abc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ac6:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	60d3      	str	r3, [r2, #12]
}
 8000acc:	bf00      	nop
 8000ace:	3714      	adds	r7, #20
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae0:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	0a1b      	lsrs	r3, r3, #8
 8000ae6:	f003 0307 	and.w	r3, r3, #7
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	db0b      	blt.n	8000b22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	f003 021f 	and.w	r2, r3, #31
 8000b10:	4907      	ldr	r1, [pc, #28]	; (8000b30 <__NVIC_EnableIRQ+0x38>)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	095b      	lsrs	r3, r3, #5
 8000b18:	2001      	movs	r0, #1
 8000b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000e100 	.word	0xe000e100

08000b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	6039      	str	r1, [r7, #0]
 8000b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	db0a      	blt.n	8000b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	490c      	ldr	r1, [pc, #48]	; (8000b80 <__NVIC_SetPriority+0x4c>)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	0112      	lsls	r2, r2, #4
 8000b54:	b2d2      	uxtb	r2, r2
 8000b56:	440b      	add	r3, r1
 8000b58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b5c:	e00a      	b.n	8000b74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	4908      	ldr	r1, [pc, #32]	; (8000b84 <__NVIC_SetPriority+0x50>)
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	f003 030f 	and.w	r3, r3, #15
 8000b6a:	3b04      	subs	r3, #4
 8000b6c:	0112      	lsls	r2, r2, #4
 8000b6e:	b2d2      	uxtb	r2, r2
 8000b70:	440b      	add	r3, r1
 8000b72:	761a      	strb	r2, [r3, #24]
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	e000e100 	.word	0xe000e100
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b089      	sub	sp, #36	; 0x24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	f003 0307 	and.w	r3, r3, #7
 8000b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ba2:	2b04      	cmp	r3, #4
 8000ba4:	bf28      	it	cs
 8000ba6:	2304      	movcs	r3, #4
 8000ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3304      	adds	r3, #4
 8000bae:	2b06      	cmp	r3, #6
 8000bb0:	d902      	bls.n	8000bb8 <NVIC_EncodePriority+0x30>
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	3b03      	subs	r3, #3
 8000bb6:	e000      	b.n	8000bba <NVIC_EncodePriority+0x32>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	43da      	mvns	r2, r3
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	401a      	ands	r2, r3
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bda:	43d9      	mvns	r1, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be0:	4313      	orrs	r3, r2
         );
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3724      	adds	r7, #36	; 0x24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
	...

08000bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c00:	d301      	bcc.n	8000c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c02:	2301      	movs	r3, #1
 8000c04:	e00f      	b.n	8000c26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c06:	4a0a      	ldr	r2, [pc, #40]	; (8000c30 <SysTick_Config+0x40>)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c0e:	210f      	movs	r1, #15
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295
 8000c14:	f7ff ff8e 	bl	8000b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c18:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <SysTick_Config+0x40>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c1e:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <SysTick_Config+0x40>)
 8000c20:	2207      	movs	r2, #7
 8000c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	e000e010 	.word	0xe000e010

08000c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff ff29 	bl	8000a94 <__NVIC_SetPriorityGrouping>
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b086      	sub	sp, #24
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	4603      	mov	r3, r0
 8000c52:	60b9      	str	r1, [r7, #8]
 8000c54:	607a      	str	r2, [r7, #4]
 8000c56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c5c:	f7ff ff3e 	bl	8000adc <__NVIC_GetPriorityGrouping>
 8000c60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	68b9      	ldr	r1, [r7, #8]
 8000c66:	6978      	ldr	r0, [r7, #20]
 8000c68:	f7ff ff8e 	bl	8000b88 <NVIC_EncodePriority>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c72:	4611      	mov	r1, r2
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff ff5d 	bl	8000b34 <__NVIC_SetPriority>
}
 8000c7a:	bf00      	nop
 8000c7c:	3718      	adds	r7, #24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	4603      	mov	r3, r0
 8000c8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff ff31 	bl	8000af8 <__NVIC_EnableIRQ>
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f7ff ffa2 	bl	8000bf0 <SysTick_Config>
 8000cac:	4603      	mov	r3, r0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b084      	sub	sp, #16
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d101      	bne.n	8000ccc <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	e037      	b.n	8000d3c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2202      	movs	r2, #2
 8000cd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000ce2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000ce6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000cf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	68db      	ldr	r3, [r3, #12]
 8000cf6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	695b      	ldr	r3, [r3, #20]
 8000d02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	69db      	ldr	r3, [r3, #28]
 8000d0e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d10:	68fa      	ldr	r2, [r7, #12]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f000 f9bc 	bl	800109c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2200      	movs	r2, #0
 8000d28:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2200      	movs	r2, #0
 8000d36:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000d3a:	2300      	movs	r3, #0
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3710      	adds	r7, #16
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
 8000d50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000d52:	2300      	movs	r3, #0
 8000d54:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d101      	bne.n	8000d64 <HAL_DMA_Start_IT+0x20>
 8000d60:	2302      	movs	r3, #2
 8000d62:	e04a      	b.n	8000dfa <HAL_DMA_Start_IT+0xb6>
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	2201      	movs	r2, #1
 8000d68:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d13a      	bne.n	8000dec <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	2202      	movs	r2, #2
 8000d7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	2200      	movs	r2, #0
 8000d82:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f022 0201 	bic.w	r2, r2, #1
 8000d92:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	68b9      	ldr	r1, [r7, #8]
 8000d9a:	68f8      	ldr	r0, [r7, #12]
 8000d9c:	f000 f950 	bl	8001040 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d008      	beq.n	8000dba <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f042 020e 	orr.w	r2, r2, #14
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	e00f      	b.n	8000dda <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f042 020a 	orr.w	r2, r2, #10
 8000dc8:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f022 0204 	bic.w	r2, r2, #4
 8000dd8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f042 0201 	orr.w	r2, r2, #1
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	e005      	b.n	8000df8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	2200      	movs	r2, #0
 8000df0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000df4:	2302      	movs	r3, #2
 8000df6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8000df8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e02:	b480      	push	{r7}
 8000e04:	b083      	sub	sp, #12
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d101      	bne.n	8000e14 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000e10:	2301      	movs	r3, #1
 8000e12:	e02e      	b.n	8000e72 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d008      	beq.n	8000e30 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2204      	movs	r2, #4
 8000e22:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2200      	movs	r2, #0
 8000e28:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	e020      	b.n	8000e72 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f022 020e 	bic.w	r2, r2, #14
 8000e3e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f022 0201 	bic.w	r2, r2, #1
 8000e4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e58:	2101      	movs	r1, #1
 8000e5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e5e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2201      	movs	r2, #1
 8000e64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b084      	sub	sp, #16
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e86:	2300      	movs	r3, #0
 8000e88:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d005      	beq.n	8000ea0 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2204      	movs	r2, #4
 8000e98:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	73fb      	strb	r3, [r7, #15]
 8000e9e:	e027      	b.n	8000ef0 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f022 020e 	bic.w	r2, r2, #14
 8000eae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f022 0201 	bic.w	r2, r2, #1
 8000ebe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ec8:	2101      	movs	r1, #1
 8000eca:	fa01 f202 	lsl.w	r2, r1, r2
 8000ece:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d003      	beq.n	8000ef0 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	4798      	blx	r3
    }
  }
  return status;
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b084      	sub	sp, #16
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	2204      	movs	r2, #4
 8000f18:	409a      	lsls	r2, r3
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d024      	beq.n	8000f6c <HAL_DMA_IRQHandler+0x72>
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	f003 0304 	and.w	r3, r3, #4
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d01f      	beq.n	8000f6c <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f003 0320 	and.w	r3, r3, #32
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d107      	bne.n	8000f4a <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f022 0204 	bic.w	r2, r2, #4
 8000f48:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f52:	2104      	movs	r1, #4
 8000f54:	fa01 f202 	lsl.w	r2, r1, r2
 8000f58:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d06a      	beq.n	8001038 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000f6a:	e065      	b.n	8001038 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f70:	2202      	movs	r2, #2
 8000f72:	409a      	lsls	r2, r3
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4013      	ands	r3, r2
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d02c      	beq.n	8000fd6 <HAL_DMA_IRQHandler+0xdc>
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d027      	beq.n	8000fd6 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f003 0320 	and.w	r3, r3, #32
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d10b      	bne.n	8000fac <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f022 020a 	bic.w	r2, r2, #10
 8000fa2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fb4:	2102      	movs	r1, #2
 8000fb6:	fa01 f202 	lsl.w	r2, r1, r2
 8000fba:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d035      	beq.n	8001038 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000fd4:	e030      	b.n	8001038 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	2208      	movs	r2, #8
 8000fdc:	409a      	lsls	r2, r3
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d028      	beq.n	8001038 <HAL_DMA_IRQHandler+0x13e>
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	f003 0308 	and.w	r3, r3, #8
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d023      	beq.n	8001038 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f022 020e 	bic.w	r2, r2, #14
 8000ffe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001008:	2101      	movs	r1, #1
 800100a:	fa01 f202 	lsl.w	r2, r1, r2
 800100e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2201      	movs	r2, #1
 8001014:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2201      	movs	r2, #1
 800101a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	2b00      	cmp	r3, #0
 800102c:	d004      	beq.n	8001038 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	4798      	blx	r3
    }
  }
}
 8001036:	e7ff      	b.n	8001038 <HAL_DMA_IRQHandler+0x13e>
 8001038:	bf00      	nop
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
 800104c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001056:	2101      	movs	r1, #1
 8001058:	fa01 f202 	lsl.w	r2, r1, r2
 800105c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	683a      	ldr	r2, [r7, #0]
 8001064:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2b10      	cmp	r3, #16
 800106c:	d108      	bne.n	8001080 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	68ba      	ldr	r2, [r7, #8]
 800107c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800107e:	e007      	b.n	8001090 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	68ba      	ldr	r2, [r7, #8]
 8001086:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	60da      	str	r2, [r3, #12]
}
 8001090:	bf00      	nop
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	461a      	mov	r2, r3
 80010aa:	4b14      	ldr	r3, [pc, #80]	; (80010fc <DMA_CalcBaseAndBitshift+0x60>)
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d80f      	bhi.n	80010d0 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b12      	ldr	r3, [pc, #72]	; (8001100 <DMA_CalcBaseAndBitshift+0x64>)
 80010b8:	4413      	add	r3, r2
 80010ba:	4a12      	ldr	r2, [pc, #72]	; (8001104 <DMA_CalcBaseAndBitshift+0x68>)
 80010bc:	fba2 2303 	umull	r2, r3, r2, r3
 80010c0:	091b      	lsrs	r3, r3, #4
 80010c2:	009a      	lsls	r2, r3, #2
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a0f      	ldr	r2, [pc, #60]	; (8001108 <DMA_CalcBaseAndBitshift+0x6c>)
 80010cc:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80010ce:	e00e      	b.n	80010ee <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	461a      	mov	r2, r3
 80010d6:	4b0d      	ldr	r3, [pc, #52]	; (800110c <DMA_CalcBaseAndBitshift+0x70>)
 80010d8:	4413      	add	r3, r2
 80010da:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <DMA_CalcBaseAndBitshift+0x68>)
 80010dc:	fba2 2303 	umull	r2, r3, r2, r3
 80010e0:	091b      	lsrs	r3, r3, #4
 80010e2:	009a      	lsls	r2, r3, #2
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4a09      	ldr	r2, [pc, #36]	; (8001110 <DMA_CalcBaseAndBitshift+0x74>)
 80010ec:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	40020407 	.word	0x40020407
 8001100:	bffdfff8 	.word	0xbffdfff8
 8001104:	cccccccd 	.word	0xcccccccd
 8001108:	40020000 	.word	0x40020000
 800110c:	bffdfbf8 	.word	0xbffdfbf8
 8001110:	40020400 	.word	0x40020400

08001114 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001114:	b480      	push	{r7}
 8001116:	b087      	sub	sp, #28
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001122:	e160      	b.n	80013e6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	2101      	movs	r1, #1
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	fa01 f303 	lsl.w	r3, r1, r3
 8001130:	4013      	ands	r3, r2
 8001132:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	2b00      	cmp	r3, #0
 8001138:	f000 8152 	beq.w	80013e0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 0303 	and.w	r3, r3, #3
 8001144:	2b01      	cmp	r3, #1
 8001146:	d005      	beq.n	8001154 <HAL_GPIO_Init+0x40>
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 0303 	and.w	r3, r3, #3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d130      	bne.n	80011b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	2203      	movs	r2, #3
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	68da      	ldr	r2, [r3, #12]
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	4313      	orrs	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800118a:	2201      	movs	r2, #1
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43db      	mvns	r3, r3
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	4013      	ands	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	091b      	lsrs	r3, r3, #4
 80011a0:	f003 0201 	and.w	r2, r3, #1
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 0303 	and.w	r3, r3, #3
 80011be:	2b03      	cmp	r3, #3
 80011c0:	d017      	beq.n	80011f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	2203      	movs	r2, #3
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	4013      	ands	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	689a      	ldr	r2, [r3, #8]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f003 0303 	and.w	r3, r3, #3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d123      	bne.n	8001246 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	08da      	lsrs	r2, r3, #3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	3208      	adds	r2, #8
 8001206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800120a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	220f      	movs	r2, #15
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43db      	mvns	r3, r3
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4013      	ands	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	691a      	ldr	r2, [r3, #16]
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	f003 0307 	and.w	r3, r3, #7
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4313      	orrs	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	08da      	lsrs	r2, r3, #3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3208      	adds	r2, #8
 8001240:	6939      	ldr	r1, [r7, #16]
 8001242:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	2203      	movs	r2, #3
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43db      	mvns	r3, r3
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	4013      	ands	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f003 0203 	and.w	r2, r3, #3
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001282:	2b00      	cmp	r3, #0
 8001284:	f000 80ac 	beq.w	80013e0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001288:	4b5e      	ldr	r3, [pc, #376]	; (8001404 <HAL_GPIO_Init+0x2f0>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	4a5d      	ldr	r2, [pc, #372]	; (8001404 <HAL_GPIO_Init+0x2f0>)
 800128e:	f043 0301 	orr.w	r3, r3, #1
 8001292:	6193      	str	r3, [r2, #24]
 8001294:	4b5b      	ldr	r3, [pc, #364]	; (8001404 <HAL_GPIO_Init+0x2f0>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012a0:	4a59      	ldr	r2, [pc, #356]	; (8001408 <HAL_GPIO_Init+0x2f4>)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	089b      	lsrs	r3, r3, #2
 80012a6:	3302      	adds	r3, #2
 80012a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	f003 0303 	and.w	r3, r3, #3
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	220f      	movs	r2, #15
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4013      	ands	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012ca:	d025      	beq.n	8001318 <HAL_GPIO_Init+0x204>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a4f      	ldr	r2, [pc, #316]	; (800140c <HAL_GPIO_Init+0x2f8>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d01f      	beq.n	8001314 <HAL_GPIO_Init+0x200>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4a4e      	ldr	r2, [pc, #312]	; (8001410 <HAL_GPIO_Init+0x2fc>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d019      	beq.n	8001310 <HAL_GPIO_Init+0x1fc>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a4d      	ldr	r2, [pc, #308]	; (8001414 <HAL_GPIO_Init+0x300>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d013      	beq.n	800130c <HAL_GPIO_Init+0x1f8>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4a4c      	ldr	r2, [pc, #304]	; (8001418 <HAL_GPIO_Init+0x304>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d00d      	beq.n	8001308 <HAL_GPIO_Init+0x1f4>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4a4b      	ldr	r2, [pc, #300]	; (800141c <HAL_GPIO_Init+0x308>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d007      	beq.n	8001304 <HAL_GPIO_Init+0x1f0>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a4a      	ldr	r2, [pc, #296]	; (8001420 <HAL_GPIO_Init+0x30c>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d101      	bne.n	8001300 <HAL_GPIO_Init+0x1ec>
 80012fc:	2306      	movs	r3, #6
 80012fe:	e00c      	b.n	800131a <HAL_GPIO_Init+0x206>
 8001300:	2307      	movs	r3, #7
 8001302:	e00a      	b.n	800131a <HAL_GPIO_Init+0x206>
 8001304:	2305      	movs	r3, #5
 8001306:	e008      	b.n	800131a <HAL_GPIO_Init+0x206>
 8001308:	2304      	movs	r3, #4
 800130a:	e006      	b.n	800131a <HAL_GPIO_Init+0x206>
 800130c:	2303      	movs	r3, #3
 800130e:	e004      	b.n	800131a <HAL_GPIO_Init+0x206>
 8001310:	2302      	movs	r3, #2
 8001312:	e002      	b.n	800131a <HAL_GPIO_Init+0x206>
 8001314:	2301      	movs	r3, #1
 8001316:	e000      	b.n	800131a <HAL_GPIO_Init+0x206>
 8001318:	2300      	movs	r3, #0
 800131a:	697a      	ldr	r2, [r7, #20]
 800131c:	f002 0203 	and.w	r2, r2, #3
 8001320:	0092      	lsls	r2, r2, #2
 8001322:	4093      	lsls	r3, r2
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	4313      	orrs	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800132a:	4937      	ldr	r1, [pc, #220]	; (8001408 <HAL_GPIO_Init+0x2f4>)
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	089b      	lsrs	r3, r3, #2
 8001330:	3302      	adds	r3, #2
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001338:	4b3a      	ldr	r3, [pc, #232]	; (8001424 <HAL_GPIO_Init+0x310>)
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	43db      	mvns	r3, r3
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	4013      	ands	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d003      	beq.n	800135c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	4313      	orrs	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800135c:	4a31      	ldr	r2, [pc, #196]	; (8001424 <HAL_GPIO_Init+0x310>)
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001362:	4b30      	ldr	r3, [pc, #192]	; (8001424 <HAL_GPIO_Init+0x310>)
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	43db      	mvns	r3, r3
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	4013      	ands	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	4313      	orrs	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001386:	4a27      	ldr	r2, [pc, #156]	; (8001424 <HAL_GPIO_Init+0x310>)
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800138c:	4b25      	ldr	r3, [pc, #148]	; (8001424 <HAL_GPIO_Init+0x310>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	43db      	mvns	r3, r3
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4013      	ands	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013b0:	4a1c      	ldr	r2, [pc, #112]	; (8001424 <HAL_GPIO_Init+0x310>)
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013b6:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <HAL_GPIO_Init+0x310>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	43db      	mvns	r3, r3
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	4013      	ands	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013da:	4a12      	ldr	r2, [pc, #72]	; (8001424 <HAL_GPIO_Init+0x310>)
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	3301      	adds	r3, #1
 80013e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	fa22 f303 	lsr.w	r3, r2, r3
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f47f ae97 	bne.w	8001124 <HAL_GPIO_Init+0x10>
  }
}
 80013f6:	bf00      	nop
 80013f8:	bf00      	nop
 80013fa:	371c      	adds	r7, #28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	40021000 	.word	0x40021000
 8001408:	40010000 	.word	0x40010000
 800140c:	48000400 	.word	0x48000400
 8001410:	48000800 	.word	0x48000800
 8001414:	48000c00 	.word	0x48000c00
 8001418:	48001000 	.word	0x48001000
 800141c:	48001400 	.word	0x48001400
 8001420:	48001800 	.word	0x48001800
 8001424:	40010400 	.word	0x40010400

08001428 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	460b      	mov	r3, r1
 8001432:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	691a      	ldr	r2, [r3, #16]
 8001438:	887b      	ldrh	r3, [r7, #2]
 800143a:	4013      	ands	r3, r2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d002      	beq.n	8001446 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001440:	2301      	movs	r3, #1
 8001442:	73fb      	strb	r3, [r7, #15]
 8001444:	e001      	b.n	800144a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001446:	2300      	movs	r3, #0
 8001448:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800144a:	7bfb      	ldrb	r3, [r7, #15]
}
 800144c:	4618      	mov	r0, r3
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	460b      	mov	r3, r1
 8001462:	807b      	strh	r3, [r7, #2]
 8001464:	4613      	mov	r3, r2
 8001466:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001468:	787b      	ldrb	r3, [r7, #1]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800146e:	887a      	ldrh	r2, [r7, #2]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001474:	e002      	b.n	800147c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001476:	887a      	ldrh	r2, [r7, #2]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	695b      	ldr	r3, [r3, #20]
 8001498:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800149a:	887a      	ldrh	r2, [r7, #2]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4013      	ands	r3, r2
 80014a0:	041a      	lsls	r2, r3, #16
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	43d9      	mvns	r1, r3
 80014a6:	887b      	ldrh	r3, [r7, #2]
 80014a8:	400b      	ands	r3, r1
 80014aa:	431a      	orrs	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	619a      	str	r2, [r3, #24]
}
 80014b0:	bf00      	nop
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014c8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014cc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014d2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d102      	bne.n	80014e2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	f001 b83a 	b.w	8002556 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014e6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f000 816f 	beq.w	80017d6 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80014f8:	4bb5      	ldr	r3, [pc, #724]	; (80017d0 <HAL_RCC_OscConfig+0x314>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f003 030c 	and.w	r3, r3, #12
 8001500:	2b04      	cmp	r3, #4
 8001502:	d00c      	beq.n	800151e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001504:	4bb2      	ldr	r3, [pc, #712]	; (80017d0 <HAL_RCC_OscConfig+0x314>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f003 030c 	and.w	r3, r3, #12
 800150c:	2b08      	cmp	r3, #8
 800150e:	d15c      	bne.n	80015ca <HAL_RCC_OscConfig+0x10e>
 8001510:	4baf      	ldr	r3, [pc, #700]	; (80017d0 <HAL_RCC_OscConfig+0x314>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800151c:	d155      	bne.n	80015ca <HAL_RCC_OscConfig+0x10e>
 800151e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001522:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001526:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800152a:	fa93 f3a3 	rbit	r3, r3
 800152e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001532:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001536:	fab3 f383 	clz	r3, r3
 800153a:	b2db      	uxtb	r3, r3
 800153c:	095b      	lsrs	r3, r3, #5
 800153e:	b2db      	uxtb	r3, r3
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b01      	cmp	r3, #1
 8001548:	d102      	bne.n	8001550 <HAL_RCC_OscConfig+0x94>
 800154a:	4ba1      	ldr	r3, [pc, #644]	; (80017d0 <HAL_RCC_OscConfig+0x314>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	e015      	b.n	800157c <HAL_RCC_OscConfig+0xc0>
 8001550:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001554:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001558:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800155c:	fa93 f3a3 	rbit	r3, r3
 8001560:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001564:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001568:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800156c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001570:	fa93 f3a3 	rbit	r3, r3
 8001574:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001578:	4b95      	ldr	r3, [pc, #596]	; (80017d0 <HAL_RCC_OscConfig+0x314>)
 800157a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001580:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001584:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001588:	fa92 f2a2 	rbit	r2, r2
 800158c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001590:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001594:	fab2 f282 	clz	r2, r2
 8001598:	b2d2      	uxtb	r2, r2
 800159a:	f042 0220 	orr.w	r2, r2, #32
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	f002 021f 	and.w	r2, r2, #31
 80015a4:	2101      	movs	r1, #1
 80015a6:	fa01 f202 	lsl.w	r2, r1, r2
 80015aa:	4013      	ands	r3, r2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f000 8111 	beq.w	80017d4 <HAL_RCC_OscConfig+0x318>
 80015b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f040 8108 	bne.w	80017d4 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	f000 bfc6 	b.w	8002556 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015ce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015da:	d106      	bne.n	80015ea <HAL_RCC_OscConfig+0x12e>
 80015dc:	4b7c      	ldr	r3, [pc, #496]	; (80017d0 <HAL_RCC_OscConfig+0x314>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a7b      	ldr	r2, [pc, #492]	; (80017d0 <HAL_RCC_OscConfig+0x314>)
 80015e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e6:	6013      	str	r3, [r2, #0]
 80015e8:	e036      	b.n	8001658 <HAL_RCC_OscConfig+0x19c>
 80015ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d10c      	bne.n	8001614 <HAL_RCC_OscConfig+0x158>
 80015fa:	4b75      	ldr	r3, [pc, #468]	; (80017d0 <HAL_RCC_OscConfig+0x314>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a74      	ldr	r2, [pc, #464]	; (80017d0 <HAL_RCC_OscConfig+0x314>)
 8001600:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	4b72      	ldr	r3, [pc, #456]	; (80017d0 <HAL_RCC_OscConfig+0x314>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a71      	ldr	r2, [pc, #452]	; (80017d0 <HAL_RCC_OscConfig+0x314>)
 800160c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	e021      	b.n	8001658 <HAL_RCC_OscConfig+0x19c>
 8001614:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001618:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001624:	d10c      	bne.n	8001640 <HAL_RCC_OscConfig+0x184>
 8001626:	4b6a      	ldr	r3, [pc, #424]	; (80017d0 <HAL_RCC_OscConfig+0x314>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a69      	ldr	r2, [pc, #420]	; (80017d0 <HAL_RCC_OscConfig+0x314>)
 800162c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	4b67      	ldr	r3, [pc, #412]	; (80017d0 <HAL_RCC_OscConfig+0x314>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a66      	ldr	r2, [pc, #408]	; (80017d0 <HAL_RCC_OscConfig+0x314>)
 8001638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	e00b      	b.n	8001658 <HAL_RCC_OscConfig+0x19c>
 8001640:	4b63      	ldr	r3, [pc, #396]	; (80017d0 <HAL_RCC_OscConfig+0x314>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a62      	ldr	r2, [pc, #392]	; (80017d0 <HAL_RCC_OscConfig+0x314>)
 8001646:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	4b60      	ldr	r3, [pc, #384]	; (80017d0 <HAL_RCC_OscConfig+0x314>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a5f      	ldr	r2, [pc, #380]	; (80017d0 <HAL_RCC_OscConfig+0x314>)
 8001652:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001656:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001658:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800165c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d059      	beq.n	800171c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001668:	f7ff fa08 	bl	8000a7c <HAL_GetTick>
 800166c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001670:	e00a      	b.n	8001688 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001672:	f7ff fa03 	bl	8000a7c <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b64      	cmp	r3, #100	; 0x64
 8001680:	d902      	bls.n	8001688 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	f000 bf67 	b.w	8002556 <HAL_RCC_OscConfig+0x109a>
 8001688:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800168c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001690:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001694:	fa93 f3a3 	rbit	r3, r3
 8001698:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800169c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a0:	fab3 f383 	clz	r3, r3
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	095b      	lsrs	r3, r3, #5
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	f043 0301 	orr.w	r3, r3, #1
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d102      	bne.n	80016ba <HAL_RCC_OscConfig+0x1fe>
 80016b4:	4b46      	ldr	r3, [pc, #280]	; (80017d0 <HAL_RCC_OscConfig+0x314>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	e015      	b.n	80016e6 <HAL_RCC_OscConfig+0x22a>
 80016ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016be:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80016c6:	fa93 f3a3 	rbit	r3, r3
 80016ca:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80016ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016d2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80016d6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80016da:	fa93 f3a3 	rbit	r3, r3
 80016de:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80016e2:	4b3b      	ldr	r3, [pc, #236]	; (80017d0 <HAL_RCC_OscConfig+0x314>)
 80016e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016ea:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80016ee:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80016f2:	fa92 f2a2 	rbit	r2, r2
 80016f6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80016fa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80016fe:	fab2 f282 	clz	r2, r2
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	f042 0220 	orr.w	r2, r2, #32
 8001708:	b2d2      	uxtb	r2, r2
 800170a:	f002 021f 	and.w	r2, r2, #31
 800170e:	2101      	movs	r1, #1
 8001710:	fa01 f202 	lsl.w	r2, r1, r2
 8001714:	4013      	ands	r3, r2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d0ab      	beq.n	8001672 <HAL_RCC_OscConfig+0x1b6>
 800171a:	e05c      	b.n	80017d6 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171c:	f7ff f9ae 	bl	8000a7c <HAL_GetTick>
 8001720:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001724:	e00a      	b.n	800173c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001726:	f7ff f9a9 	bl	8000a7c <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b64      	cmp	r3, #100	; 0x64
 8001734:	d902      	bls.n	800173c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	f000 bf0d 	b.w	8002556 <HAL_RCC_OscConfig+0x109a>
 800173c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001740:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001744:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001748:	fa93 f3a3 	rbit	r3, r3
 800174c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001750:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001754:	fab3 f383 	clz	r3, r3
 8001758:	b2db      	uxtb	r3, r3
 800175a:	095b      	lsrs	r3, r3, #5
 800175c:	b2db      	uxtb	r3, r3
 800175e:	f043 0301 	orr.w	r3, r3, #1
 8001762:	b2db      	uxtb	r3, r3
 8001764:	2b01      	cmp	r3, #1
 8001766:	d102      	bne.n	800176e <HAL_RCC_OscConfig+0x2b2>
 8001768:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <HAL_RCC_OscConfig+0x314>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	e015      	b.n	800179a <HAL_RCC_OscConfig+0x2de>
 800176e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001772:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001776:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800177a:	fa93 f3a3 	rbit	r3, r3
 800177e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001782:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001786:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800178a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800178e:	fa93 f3a3 	rbit	r3, r3
 8001792:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001796:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <HAL_RCC_OscConfig+0x314>)
 8001798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800179e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80017a2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80017a6:	fa92 f2a2 	rbit	r2, r2
 80017aa:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80017ae:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80017b2:	fab2 f282 	clz	r2, r2
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	f042 0220 	orr.w	r2, r2, #32
 80017bc:	b2d2      	uxtb	r2, r2
 80017be:	f002 021f 	and.w	r2, r2, #31
 80017c2:	2101      	movs	r1, #1
 80017c4:	fa01 f202 	lsl.w	r2, r1, r2
 80017c8:	4013      	ands	r3, r2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1ab      	bne.n	8001726 <HAL_RCC_OscConfig+0x26a>
 80017ce:	e002      	b.n	80017d6 <HAL_RCC_OscConfig+0x31a>
 80017d0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017da:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f000 817f 	beq.w	8001aea <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80017ec:	4ba7      	ldr	r3, [pc, #668]	; (8001a8c <HAL_RCC_OscConfig+0x5d0>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 030c 	and.w	r3, r3, #12
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d00c      	beq.n	8001812 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80017f8:	4ba4      	ldr	r3, [pc, #656]	; (8001a8c <HAL_RCC_OscConfig+0x5d0>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 030c 	and.w	r3, r3, #12
 8001800:	2b08      	cmp	r3, #8
 8001802:	d173      	bne.n	80018ec <HAL_RCC_OscConfig+0x430>
 8001804:	4ba1      	ldr	r3, [pc, #644]	; (8001a8c <HAL_RCC_OscConfig+0x5d0>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800180c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001810:	d16c      	bne.n	80018ec <HAL_RCC_OscConfig+0x430>
 8001812:	2302      	movs	r3, #2
 8001814:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001818:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800181c:	fa93 f3a3 	rbit	r3, r3
 8001820:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001824:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001828:	fab3 f383 	clz	r3, r3
 800182c:	b2db      	uxtb	r3, r3
 800182e:	095b      	lsrs	r3, r3, #5
 8001830:	b2db      	uxtb	r3, r3
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b01      	cmp	r3, #1
 800183a:	d102      	bne.n	8001842 <HAL_RCC_OscConfig+0x386>
 800183c:	4b93      	ldr	r3, [pc, #588]	; (8001a8c <HAL_RCC_OscConfig+0x5d0>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	e013      	b.n	800186a <HAL_RCC_OscConfig+0x3ae>
 8001842:	2302      	movs	r3, #2
 8001844:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001848:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800184c:	fa93 f3a3 	rbit	r3, r3
 8001850:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001854:	2302      	movs	r3, #2
 8001856:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800185a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800185e:	fa93 f3a3 	rbit	r3, r3
 8001862:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001866:	4b89      	ldr	r3, [pc, #548]	; (8001a8c <HAL_RCC_OscConfig+0x5d0>)
 8001868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186a:	2202      	movs	r2, #2
 800186c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001870:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001874:	fa92 f2a2 	rbit	r2, r2
 8001878:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800187c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001880:	fab2 f282 	clz	r2, r2
 8001884:	b2d2      	uxtb	r2, r2
 8001886:	f042 0220 	orr.w	r2, r2, #32
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	f002 021f 	and.w	r2, r2, #31
 8001890:	2101      	movs	r1, #1
 8001892:	fa01 f202 	lsl.w	r2, r1, r2
 8001896:	4013      	ands	r3, r2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d00a      	beq.n	80018b2 <HAL_RCC_OscConfig+0x3f6>
 800189c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d002      	beq.n	80018b2 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	f000 be52 	b.w	8002556 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b2:	4b76      	ldr	r3, [pc, #472]	; (8001a8c <HAL_RCC_OscConfig+0x5d0>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018be:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	691b      	ldr	r3, [r3, #16]
 80018c6:	21f8      	movs	r1, #248	; 0xf8
 80018c8:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018cc:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80018d0:	fa91 f1a1 	rbit	r1, r1
 80018d4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80018d8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80018dc:	fab1 f181 	clz	r1, r1
 80018e0:	b2c9      	uxtb	r1, r1
 80018e2:	408b      	lsls	r3, r1
 80018e4:	4969      	ldr	r1, [pc, #420]	; (8001a8c <HAL_RCC_OscConfig+0x5d0>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ea:	e0fe      	b.n	8001aea <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f000 8088 	beq.w	8001a0e <HAL_RCC_OscConfig+0x552>
 80018fe:	2301      	movs	r3, #1
 8001900:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001904:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001908:	fa93 f3a3 	rbit	r3, r3
 800190c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001910:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001914:	fab3 f383 	clz	r3, r3
 8001918:	b2db      	uxtb	r3, r3
 800191a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800191e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	461a      	mov	r2, r3
 8001926:	2301      	movs	r3, #1
 8001928:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192a:	f7ff f8a7 	bl	8000a7c <HAL_GetTick>
 800192e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001932:	e00a      	b.n	800194a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001934:	f7ff f8a2 	bl	8000a7c <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d902      	bls.n	800194a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	f000 be06 	b.w	8002556 <HAL_RCC_OscConfig+0x109a>
 800194a:	2302      	movs	r3, #2
 800194c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001950:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001954:	fa93 f3a3 	rbit	r3, r3
 8001958:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800195c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001960:	fab3 f383 	clz	r3, r3
 8001964:	b2db      	uxtb	r3, r3
 8001966:	095b      	lsrs	r3, r3, #5
 8001968:	b2db      	uxtb	r3, r3
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	b2db      	uxtb	r3, r3
 8001970:	2b01      	cmp	r3, #1
 8001972:	d102      	bne.n	800197a <HAL_RCC_OscConfig+0x4be>
 8001974:	4b45      	ldr	r3, [pc, #276]	; (8001a8c <HAL_RCC_OscConfig+0x5d0>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	e013      	b.n	80019a2 <HAL_RCC_OscConfig+0x4e6>
 800197a:	2302      	movs	r3, #2
 800197c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001980:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001984:	fa93 f3a3 	rbit	r3, r3
 8001988:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800198c:	2302      	movs	r3, #2
 800198e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001992:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001996:	fa93 f3a3 	rbit	r3, r3
 800199a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800199e:	4b3b      	ldr	r3, [pc, #236]	; (8001a8c <HAL_RCC_OscConfig+0x5d0>)
 80019a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a2:	2202      	movs	r2, #2
 80019a4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80019a8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80019ac:	fa92 f2a2 	rbit	r2, r2
 80019b0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80019b4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80019b8:	fab2 f282 	clz	r2, r2
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	f042 0220 	orr.w	r2, r2, #32
 80019c2:	b2d2      	uxtb	r2, r2
 80019c4:	f002 021f 	and.w	r2, r2, #31
 80019c8:	2101      	movs	r1, #1
 80019ca:	fa01 f202 	lsl.w	r2, r1, r2
 80019ce:	4013      	ands	r3, r2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0af      	beq.n	8001934 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d4:	4b2d      	ldr	r3, [pc, #180]	; (8001a8c <HAL_RCC_OscConfig+0x5d0>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019e0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	21f8      	movs	r1, #248	; 0xf8
 80019ea:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ee:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80019f2:	fa91 f1a1 	rbit	r1, r1
 80019f6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80019fa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80019fe:	fab1 f181 	clz	r1, r1
 8001a02:	b2c9      	uxtb	r1, r1
 8001a04:	408b      	lsls	r3, r1
 8001a06:	4921      	ldr	r1, [pc, #132]	; (8001a8c <HAL_RCC_OscConfig+0x5d0>)
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	600b      	str	r3, [r1, #0]
 8001a0c:	e06d      	b.n	8001aea <HAL_RCC_OscConfig+0x62e>
 8001a0e:	2301      	movs	r3, #1
 8001a10:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a14:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001a18:	fa93 f3a3 	rbit	r3, r3
 8001a1c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001a20:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a24:	fab3 f383 	clz	r3, r3
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a2e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	461a      	mov	r2, r3
 8001a36:	2300      	movs	r3, #0
 8001a38:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3a:	f7ff f81f 	bl	8000a7c <HAL_GetTick>
 8001a3e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a42:	e00a      	b.n	8001a5a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a44:	f7ff f81a 	bl	8000a7c <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d902      	bls.n	8001a5a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	f000 bd7e 	b.w	8002556 <HAL_RCC_OscConfig+0x109a>
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a60:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001a64:	fa93 f3a3 	rbit	r3, r3
 8001a68:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001a6c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a70:	fab3 f383 	clz	r3, r3
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	095b      	lsrs	r3, r3, #5
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	f043 0301 	orr.w	r3, r3, #1
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d105      	bne.n	8001a90 <HAL_RCC_OscConfig+0x5d4>
 8001a84:	4b01      	ldr	r3, [pc, #4]	; (8001a8c <HAL_RCC_OscConfig+0x5d0>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	e016      	b.n	8001ab8 <HAL_RCC_OscConfig+0x5fc>
 8001a8a:	bf00      	nop
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	2302      	movs	r3, #2
 8001a92:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001a9a:	fa93 f3a3 	rbit	r3, r3
 8001a9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001aa8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001aac:	fa93 f3a3 	rbit	r3, r3
 8001ab0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001ab4:	4bbf      	ldr	r3, [pc, #764]	; (8001db4 <HAL_RCC_OscConfig+0x8f8>)
 8001ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab8:	2202      	movs	r2, #2
 8001aba:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001abe:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001ac2:	fa92 f2a2 	rbit	r2, r2
 8001ac6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001aca:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001ace:	fab2 f282 	clz	r2, r2
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	f042 0220 	orr.w	r2, r2, #32
 8001ad8:	b2d2      	uxtb	r2, r2
 8001ada:	f002 021f 	and.w	r2, r2, #31
 8001ade:	2101      	movs	r1, #1
 8001ae0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1ac      	bne.n	8001a44 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0308 	and.w	r3, r3, #8
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 8113 	beq.w	8001d26 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b04:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d07c      	beq.n	8001c0a <HAL_RCC_OscConfig+0x74e>
 8001b10:	2301      	movs	r3, #1
 8001b12:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001b1a:	fa93 f3a3 	rbit	r3, r3
 8001b1e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001b22:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b26:	fab3 f383 	clz	r3, r3
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4ba2      	ldr	r3, [pc, #648]	; (8001db8 <HAL_RCC_OscConfig+0x8fc>)
 8001b30:	4413      	add	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	461a      	mov	r2, r3
 8001b36:	2301      	movs	r3, #1
 8001b38:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b3a:	f7fe ff9f 	bl	8000a7c <HAL_GetTick>
 8001b3e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b42:	e00a      	b.n	8001b5a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b44:	f7fe ff9a 	bl	8000a7c <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d902      	bls.n	8001b5a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	f000 bcfe 	b.w	8002556 <HAL_RCC_OscConfig+0x109a>
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001b64:	fa93 f2a3 	rbit	r2, r3
 8001b68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b6c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	fa93 f2a3 	rbit	r2, r3
 8001b8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b9a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ba6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	fa93 f2a3 	rbit	r2, r3
 8001bb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bb4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001bb8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bba:	4b7e      	ldr	r3, [pc, #504]	; (8001db4 <HAL_RCC_OscConfig+0x8f8>)
 8001bbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bc2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001bc6:	2102      	movs	r1, #2
 8001bc8:	6019      	str	r1, [r3, #0]
 8001bca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	fa93 f1a3 	rbit	r1, r3
 8001bd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bdc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001be0:	6019      	str	r1, [r3, #0]
  return result;
 8001be2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001be6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	fab3 f383 	clz	r3, r3
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	f003 031f 	and.w	r3, r3, #31
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001c02:	4013      	ands	r3, r2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d09d      	beq.n	8001b44 <HAL_RCC_OscConfig+0x688>
 8001c08:	e08d      	b.n	8001d26 <HAL_RCC_OscConfig+0x86a>
 8001c0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c0e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001c12:	2201      	movs	r2, #1
 8001c14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c1a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	fa93 f2a3 	rbit	r2, r3
 8001c24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c28:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001c2c:	601a      	str	r2, [r3, #0]
  return result;
 8001c2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c32:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001c36:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c38:	fab3 f383 	clz	r3, r3
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	461a      	mov	r2, r3
 8001c40:	4b5d      	ldr	r3, [pc, #372]	; (8001db8 <HAL_RCC_OscConfig+0x8fc>)
 8001c42:	4413      	add	r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	461a      	mov	r2, r3
 8001c48:	2300      	movs	r3, #0
 8001c4a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c4c:	f7fe ff16 	bl	8000a7c <HAL_GetTick>
 8001c50:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c54:	e00a      	b.n	8001c6c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c56:	f7fe ff11 	bl	8000a7c <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d902      	bls.n	8001c6c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	f000 bc75 	b.w	8002556 <HAL_RCC_OscConfig+0x109a>
 8001c6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c70:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001c74:	2202      	movs	r2, #2
 8001c76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c7c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	fa93 f2a3 	rbit	r2, r3
 8001c86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c8a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001c98:	2202      	movs	r2, #2
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	fa93 f2a3 	rbit	r2, r3
 8001caa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cb8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cc4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	fa93 f2a3 	rbit	r2, r3
 8001cce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cd2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001cd6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd8:	4b36      	ldr	r3, [pc, #216]	; (8001db4 <HAL_RCC_OscConfig+0x8f8>)
 8001cda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ce0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001ce4:	2102      	movs	r1, #2
 8001ce6:	6019      	str	r1, [r3, #0]
 8001ce8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cec:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	fa93 f1a3 	rbit	r1, r3
 8001cf6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cfa:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001cfe:	6019      	str	r1, [r3, #0]
  return result;
 8001d00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d04:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	fab3 f383 	clz	r3, r3
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	f003 031f 	and.w	r3, r3, #31
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d20:	4013      	ands	r3, r2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d197      	bne.n	8001c56 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d2a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0304 	and.w	r3, r3, #4
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f000 81a5 	beq.w	8002086 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d42:	4b1c      	ldr	r3, [pc, #112]	; (8001db4 <HAL_RCC_OscConfig+0x8f8>)
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d116      	bne.n	8001d7c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d4e:	4b19      	ldr	r3, [pc, #100]	; (8001db4 <HAL_RCC_OscConfig+0x8f8>)
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	4a18      	ldr	r2, [pc, #96]	; (8001db4 <HAL_RCC_OscConfig+0x8f8>)
 8001d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d58:	61d3      	str	r3, [r2, #28]
 8001d5a:	4b16      	ldr	r3, [pc, #88]	; (8001db4 <HAL_RCC_OscConfig+0x8f8>)
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001d62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d74:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001d76:	2301      	movs	r3, #1
 8001d78:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d7c:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <HAL_RCC_OscConfig+0x900>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d121      	bne.n	8001dcc <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d88:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <HAL_RCC_OscConfig+0x900>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a0b      	ldr	r2, [pc, #44]	; (8001dbc <HAL_RCC_OscConfig+0x900>)
 8001d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d92:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d94:	f7fe fe72 	bl	8000a7c <HAL_GetTick>
 8001d98:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d9c:	e010      	b.n	8001dc0 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d9e:	f7fe fe6d 	bl	8000a7c <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b64      	cmp	r3, #100	; 0x64
 8001dac:	d908      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e3d1      	b.n	8002556 <HAL_RCC_OscConfig+0x109a>
 8001db2:	bf00      	nop
 8001db4:	40021000 	.word	0x40021000
 8001db8:	10908120 	.word	0x10908120
 8001dbc:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc0:	4b8d      	ldr	r3, [pc, #564]	; (8001ff8 <HAL_RCC_OscConfig+0xb3c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d0e8      	beq.n	8001d9e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dd0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d106      	bne.n	8001dea <HAL_RCC_OscConfig+0x92e>
 8001ddc:	4b87      	ldr	r3, [pc, #540]	; (8001ffc <HAL_RCC_OscConfig+0xb40>)
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	4a86      	ldr	r2, [pc, #536]	; (8001ffc <HAL_RCC_OscConfig+0xb40>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	6213      	str	r3, [r2, #32]
 8001de8:	e035      	b.n	8001e56 <HAL_RCC_OscConfig+0x99a>
 8001dea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10c      	bne.n	8001e14 <HAL_RCC_OscConfig+0x958>
 8001dfa:	4b80      	ldr	r3, [pc, #512]	; (8001ffc <HAL_RCC_OscConfig+0xb40>)
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
 8001dfe:	4a7f      	ldr	r2, [pc, #508]	; (8001ffc <HAL_RCC_OscConfig+0xb40>)
 8001e00:	f023 0301 	bic.w	r3, r3, #1
 8001e04:	6213      	str	r3, [r2, #32]
 8001e06:	4b7d      	ldr	r3, [pc, #500]	; (8001ffc <HAL_RCC_OscConfig+0xb40>)
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	4a7c      	ldr	r2, [pc, #496]	; (8001ffc <HAL_RCC_OscConfig+0xb40>)
 8001e0c:	f023 0304 	bic.w	r3, r3, #4
 8001e10:	6213      	str	r3, [r2, #32]
 8001e12:	e020      	b.n	8001e56 <HAL_RCC_OscConfig+0x99a>
 8001e14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e18:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	2b05      	cmp	r3, #5
 8001e22:	d10c      	bne.n	8001e3e <HAL_RCC_OscConfig+0x982>
 8001e24:	4b75      	ldr	r3, [pc, #468]	; (8001ffc <HAL_RCC_OscConfig+0xb40>)
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	4a74      	ldr	r2, [pc, #464]	; (8001ffc <HAL_RCC_OscConfig+0xb40>)
 8001e2a:	f043 0304 	orr.w	r3, r3, #4
 8001e2e:	6213      	str	r3, [r2, #32]
 8001e30:	4b72      	ldr	r3, [pc, #456]	; (8001ffc <HAL_RCC_OscConfig+0xb40>)
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	4a71      	ldr	r2, [pc, #452]	; (8001ffc <HAL_RCC_OscConfig+0xb40>)
 8001e36:	f043 0301 	orr.w	r3, r3, #1
 8001e3a:	6213      	str	r3, [r2, #32]
 8001e3c:	e00b      	b.n	8001e56 <HAL_RCC_OscConfig+0x99a>
 8001e3e:	4b6f      	ldr	r3, [pc, #444]	; (8001ffc <HAL_RCC_OscConfig+0xb40>)
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	4a6e      	ldr	r2, [pc, #440]	; (8001ffc <HAL_RCC_OscConfig+0xb40>)
 8001e44:	f023 0301 	bic.w	r3, r3, #1
 8001e48:	6213      	str	r3, [r2, #32]
 8001e4a:	4b6c      	ldr	r3, [pc, #432]	; (8001ffc <HAL_RCC_OscConfig+0xb40>)
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	4a6b      	ldr	r2, [pc, #428]	; (8001ffc <HAL_RCC_OscConfig+0xb40>)
 8001e50:	f023 0304 	bic.w	r3, r3, #4
 8001e54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e5a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 8081 	beq.w	8001f6a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e68:	f7fe fe08 	bl	8000a7c <HAL_GetTick>
 8001e6c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e70:	e00b      	b.n	8001e8a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e72:	f7fe fe03 	bl	8000a7c <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e365      	b.n	8002556 <HAL_RCC_OscConfig+0x109a>
 8001e8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e8e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001e92:	2202      	movs	r2, #2
 8001e94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e9a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	fa93 f2a3 	rbit	r2, r3
 8001ea4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ea8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eb2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ebe:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	fa93 f2a3 	rbit	r2, r3
 8001ec8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ecc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001ed0:	601a      	str	r2, [r3, #0]
  return result;
 8001ed2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ed6:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001eda:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001edc:	fab3 f383 	clz	r3, r3
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	095b      	lsrs	r3, r3, #5
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	f043 0302 	orr.w	r3, r3, #2
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d102      	bne.n	8001ef6 <HAL_RCC_OscConfig+0xa3a>
 8001ef0:	4b42      	ldr	r3, [pc, #264]	; (8001ffc <HAL_RCC_OscConfig+0xb40>)
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	e013      	b.n	8001f1e <HAL_RCC_OscConfig+0xa62>
 8001ef6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001efa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001efe:	2202      	movs	r2, #2
 8001f00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f06:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	fa93 f2a3 	rbit	r2, r3
 8001f10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f14:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	4b38      	ldr	r3, [pc, #224]	; (8001ffc <HAL_RCC_OscConfig+0xb40>)
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f22:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001f26:	2102      	movs	r1, #2
 8001f28:	6011      	str	r1, [r2, #0]
 8001f2a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f2e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001f32:	6812      	ldr	r2, [r2, #0]
 8001f34:	fa92 f1a2 	rbit	r1, r2
 8001f38:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f3c:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001f40:	6011      	str	r1, [r2, #0]
  return result;
 8001f42:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f46:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001f4a:	6812      	ldr	r2, [r2, #0]
 8001f4c:	fab2 f282 	clz	r2, r2
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f56:	b2d2      	uxtb	r2, r2
 8001f58:	f002 021f 	and.w	r2, r2, #31
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f62:	4013      	ands	r3, r2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d084      	beq.n	8001e72 <HAL_RCC_OscConfig+0x9b6>
 8001f68:	e083      	b.n	8002072 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f6a:	f7fe fd87 	bl	8000a7c <HAL_GetTick>
 8001f6e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f72:	e00b      	b.n	8001f8c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f74:	f7fe fd82 	bl	8000a7c <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e2e4      	b.n	8002556 <HAL_RCC_OscConfig+0x109a>
 8001f8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f90:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001f94:	2202      	movs	r2, #2
 8001f96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f9c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	fa93 f2a3 	rbit	r2, r3
 8001fa6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001faa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fb4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001fb8:	2202      	movs	r2, #2
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fc0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	fa93 f2a3 	rbit	r2, r3
 8001fca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fce:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001fd2:	601a      	str	r2, [r3, #0]
  return result;
 8001fd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fd8:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001fdc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fde:	fab3 f383 	clz	r3, r3
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	095b      	lsrs	r3, r3, #5
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	f043 0302 	orr.w	r3, r3, #2
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d106      	bne.n	8002000 <HAL_RCC_OscConfig+0xb44>
 8001ff2:	4b02      	ldr	r3, [pc, #8]	; (8001ffc <HAL_RCC_OscConfig+0xb40>)
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	e017      	b.n	8002028 <HAL_RCC_OscConfig+0xb6c>
 8001ff8:	40007000 	.word	0x40007000
 8001ffc:	40021000 	.word	0x40021000
 8002000:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002004:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002008:	2202      	movs	r2, #2
 800200a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002010:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	fa93 f2a3 	rbit	r2, r3
 800201a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800201e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	4bb3      	ldr	r3, [pc, #716]	; (80022f4 <HAL_RCC_OscConfig+0xe38>)
 8002026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002028:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800202c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002030:	2102      	movs	r1, #2
 8002032:	6011      	str	r1, [r2, #0]
 8002034:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002038:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800203c:	6812      	ldr	r2, [r2, #0]
 800203e:	fa92 f1a2 	rbit	r1, r2
 8002042:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002046:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800204a:	6011      	str	r1, [r2, #0]
  return result;
 800204c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002050:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002054:	6812      	ldr	r2, [r2, #0]
 8002056:	fab2 f282 	clz	r2, r2
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	f002 021f 	and.w	r2, r2, #31
 8002066:	2101      	movs	r1, #1
 8002068:	fa01 f202 	lsl.w	r2, r1, r2
 800206c:	4013      	ands	r3, r2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d180      	bne.n	8001f74 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002072:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002076:	2b01      	cmp	r3, #1
 8002078:	d105      	bne.n	8002086 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800207a:	4b9e      	ldr	r3, [pc, #632]	; (80022f4 <HAL_RCC_OscConfig+0xe38>)
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	4a9d      	ldr	r2, [pc, #628]	; (80022f4 <HAL_RCC_OscConfig+0xe38>)
 8002080:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002084:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002086:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800208a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	2b00      	cmp	r3, #0
 8002094:	f000 825e 	beq.w	8002554 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002098:	4b96      	ldr	r3, [pc, #600]	; (80022f4 <HAL_RCC_OscConfig+0xe38>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 030c 	and.w	r3, r3, #12
 80020a0:	2b08      	cmp	r3, #8
 80020a2:	f000 821f 	beq.w	80024e4 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020aa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	f040 8170 	bne.w	8002398 <HAL_RCC_OscConfig+0xedc>
 80020b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020bc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80020c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ca:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	fa93 f2a3 	rbit	r2, r3
 80020d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020d8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80020dc:	601a      	str	r2, [r3, #0]
  return result;
 80020de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020e2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80020e6:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e8:	fab3 f383 	clz	r3, r3
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020f2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	461a      	mov	r2, r3
 80020fa:	2300      	movs	r3, #0
 80020fc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fe:	f7fe fcbd 	bl	8000a7c <HAL_GetTick>
 8002102:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002106:	e009      	b.n	800211c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002108:	f7fe fcb8 	bl	8000a7c <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e21c      	b.n	8002556 <HAL_RCC_OscConfig+0x109a>
 800211c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002120:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002124:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002128:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800212e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	fa93 f2a3 	rbit	r2, r3
 8002138:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800213c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002140:	601a      	str	r2, [r3, #0]
  return result;
 8002142:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002146:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800214a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800214c:	fab3 f383 	clz	r3, r3
 8002150:	b2db      	uxtb	r3, r3
 8002152:	095b      	lsrs	r3, r3, #5
 8002154:	b2db      	uxtb	r3, r3
 8002156:	f043 0301 	orr.w	r3, r3, #1
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b01      	cmp	r3, #1
 800215e:	d102      	bne.n	8002166 <HAL_RCC_OscConfig+0xcaa>
 8002160:	4b64      	ldr	r3, [pc, #400]	; (80022f4 <HAL_RCC_OscConfig+0xe38>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	e027      	b.n	80021b6 <HAL_RCC_OscConfig+0xcfa>
 8002166:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800216a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800216e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002172:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002174:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002178:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	fa93 f2a3 	rbit	r2, r3
 8002182:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002186:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002190:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002194:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800219e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	fa93 f2a3 	rbit	r2, r3
 80021a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021ac:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	4b50      	ldr	r3, [pc, #320]	; (80022f4 <HAL_RCC_OscConfig+0xe38>)
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021ba:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80021be:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80021c2:	6011      	str	r1, [r2, #0]
 80021c4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021c8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80021cc:	6812      	ldr	r2, [r2, #0]
 80021ce:	fa92 f1a2 	rbit	r1, r2
 80021d2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021d6:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80021da:	6011      	str	r1, [r2, #0]
  return result;
 80021dc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021e0:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80021e4:	6812      	ldr	r2, [r2, #0]
 80021e6:	fab2 f282 	clz	r2, r2
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	f042 0220 	orr.w	r2, r2, #32
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	f002 021f 	and.w	r2, r2, #31
 80021f6:	2101      	movs	r1, #1
 80021f8:	fa01 f202 	lsl.w	r2, r1, r2
 80021fc:	4013      	ands	r3, r2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d182      	bne.n	8002108 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002202:	4b3c      	ldr	r3, [pc, #240]	; (80022f4 <HAL_RCC_OscConfig+0xe38>)
 8002204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002206:	f023 020f 	bic.w	r2, r3, #15
 800220a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800220e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002216:	4937      	ldr	r1, [pc, #220]	; (80022f4 <HAL_RCC_OscConfig+0xe38>)
 8002218:	4313      	orrs	r3, r2
 800221a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800221c:	4b35      	ldr	r3, [pc, #212]	; (80022f4 <HAL_RCC_OscConfig+0xe38>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002224:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002228:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6a19      	ldr	r1, [r3, #32]
 8002230:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002234:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	69db      	ldr	r3, [r3, #28]
 800223c:	430b      	orrs	r3, r1
 800223e:	492d      	ldr	r1, [pc, #180]	; (80022f4 <HAL_RCC_OscConfig+0xe38>)
 8002240:	4313      	orrs	r3, r2
 8002242:	604b      	str	r3, [r1, #4]
 8002244:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002248:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800224c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002250:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002252:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002256:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	fa93 f2a3 	rbit	r2, r3
 8002260:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002264:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002268:	601a      	str	r2, [r3, #0]
  return result;
 800226a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800226e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002272:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002274:	fab3 f383 	clz	r3, r3
 8002278:	b2db      	uxtb	r3, r3
 800227a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800227e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	461a      	mov	r2, r3
 8002286:	2301      	movs	r3, #1
 8002288:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228a:	f7fe fbf7 	bl	8000a7c <HAL_GetTick>
 800228e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002292:	e009      	b.n	80022a8 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002294:	f7fe fbf2 	bl	8000a7c <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e156      	b.n	8002556 <HAL_RCC_OscConfig+0x109a>
 80022a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022ac:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80022b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022ba:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	fa93 f2a3 	rbit	r2, r3
 80022c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022c8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80022cc:	601a      	str	r2, [r3, #0]
  return result;
 80022ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022d2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80022d6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022d8:	fab3 f383 	clz	r3, r3
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	095b      	lsrs	r3, r3, #5
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d105      	bne.n	80022f8 <HAL_RCC_OscConfig+0xe3c>
 80022ec:	4b01      	ldr	r3, [pc, #4]	; (80022f4 <HAL_RCC_OscConfig+0xe38>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	e02a      	b.n	8002348 <HAL_RCC_OscConfig+0xe8c>
 80022f2:	bf00      	nop
 80022f4:	40021000 	.word	0x40021000
 80022f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022fc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002300:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002304:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002306:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800230a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	fa93 f2a3 	rbit	r2, r3
 8002314:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002318:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002322:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002326:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002330:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	fa93 f2a3 	rbit	r2, r3
 800233a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800233e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	4b86      	ldr	r3, [pc, #536]	; (8002560 <HAL_RCC_OscConfig+0x10a4>)
 8002346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002348:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800234c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002350:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002354:	6011      	str	r1, [r2, #0]
 8002356:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800235a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	fa92 f1a2 	rbit	r1, r2
 8002364:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002368:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800236c:	6011      	str	r1, [r2, #0]
  return result;
 800236e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002372:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002376:	6812      	ldr	r2, [r2, #0]
 8002378:	fab2 f282 	clz	r2, r2
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	f042 0220 	orr.w	r2, r2, #32
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	f002 021f 	and.w	r2, r2, #31
 8002388:	2101      	movs	r1, #1
 800238a:	fa01 f202 	lsl.w	r2, r1, r2
 800238e:	4013      	ands	r3, r2
 8002390:	2b00      	cmp	r3, #0
 8002392:	f43f af7f 	beq.w	8002294 <HAL_RCC_OscConfig+0xdd8>
 8002396:	e0dd      	b.n	8002554 <HAL_RCC_OscConfig+0x1098>
 8002398:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800239c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80023a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023aa:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	fa93 f2a3 	rbit	r2, r3
 80023b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023b8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80023bc:	601a      	str	r2, [r3, #0]
  return result;
 80023be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023c2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80023c6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c8:	fab3 f383 	clz	r3, r3
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023d2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	461a      	mov	r2, r3
 80023da:	2300      	movs	r3, #0
 80023dc:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023de:	f7fe fb4d 	bl	8000a7c <HAL_GetTick>
 80023e2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023e6:	e009      	b.n	80023fc <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023e8:	f7fe fb48 	bl	8000a7c <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e0ac      	b.n	8002556 <HAL_RCC_OscConfig+0x109a>
 80023fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002400:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002404:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002408:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800240e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	fa93 f2a3 	rbit	r2, r3
 8002418:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800241c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002420:	601a      	str	r2, [r3, #0]
  return result;
 8002422:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002426:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800242a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800242c:	fab3 f383 	clz	r3, r3
 8002430:	b2db      	uxtb	r3, r3
 8002432:	095b      	lsrs	r3, r3, #5
 8002434:	b2db      	uxtb	r3, r3
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b01      	cmp	r3, #1
 800243e:	d102      	bne.n	8002446 <HAL_RCC_OscConfig+0xf8a>
 8002440:	4b47      	ldr	r3, [pc, #284]	; (8002560 <HAL_RCC_OscConfig+0x10a4>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	e027      	b.n	8002496 <HAL_RCC_OscConfig+0xfda>
 8002446:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800244a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800244e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002452:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002454:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002458:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	fa93 f2a3 	rbit	r2, r3
 8002462:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002466:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002470:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002474:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800247e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	fa93 f2a3 	rbit	r2, r3
 8002488:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800248c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	4b33      	ldr	r3, [pc, #204]	; (8002560 <HAL_RCC_OscConfig+0x10a4>)
 8002494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002496:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800249a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800249e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80024a2:	6011      	str	r1, [r2, #0]
 80024a4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80024a8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80024ac:	6812      	ldr	r2, [r2, #0]
 80024ae:	fa92 f1a2 	rbit	r1, r2
 80024b2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80024b6:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80024ba:	6011      	str	r1, [r2, #0]
  return result;
 80024bc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80024c0:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80024c4:	6812      	ldr	r2, [r2, #0]
 80024c6:	fab2 f282 	clz	r2, r2
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	f042 0220 	orr.w	r2, r2, #32
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	f002 021f 	and.w	r2, r2, #31
 80024d6:	2101      	movs	r1, #1
 80024d8:	fa01 f202 	lsl.w	r2, r1, r2
 80024dc:	4013      	ands	r3, r2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d182      	bne.n	80023e8 <HAL_RCC_OscConfig+0xf2c>
 80024e2:	e037      	b.n	8002554 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d101      	bne.n	80024f8 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e02e      	b.n	8002556 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024f8:	4b19      	ldr	r3, [pc, #100]	; (8002560 <HAL_RCC_OscConfig+0x10a4>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002500:	4b17      	ldr	r3, [pc, #92]	; (8002560 <HAL_RCC_OscConfig+0x10a4>)
 8002502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002504:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002508:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800250c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002510:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002514:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	69db      	ldr	r3, [r3, #28]
 800251c:	429a      	cmp	r2, r3
 800251e:	d117      	bne.n	8002550 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002520:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002524:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002528:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800252c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002534:	429a      	cmp	r2, r3
 8002536:	d10b      	bne.n	8002550 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002538:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800253c:	f003 020f 	and.w	r2, r3, #15
 8002540:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002544:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800254c:	429a      	cmp	r2, r3
 800254e:	d001      	beq.n	8002554 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e000      	b.n	8002556 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40021000 	.word	0x40021000

08002564 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b09e      	sub	sp, #120	; 0x78
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800256e:	2300      	movs	r3, #0
 8002570:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d101      	bne.n	800257c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e162      	b.n	8002842 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800257c:	4b90      	ldr	r3, [pc, #576]	; (80027c0 <HAL_RCC_ClockConfig+0x25c>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	429a      	cmp	r2, r3
 8002588:	d910      	bls.n	80025ac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258a:	4b8d      	ldr	r3, [pc, #564]	; (80027c0 <HAL_RCC_ClockConfig+0x25c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f023 0207 	bic.w	r2, r3, #7
 8002592:	498b      	ldr	r1, [pc, #556]	; (80027c0 <HAL_RCC_ClockConfig+0x25c>)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	4313      	orrs	r3, r2
 8002598:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800259a:	4b89      	ldr	r3, [pc, #548]	; (80027c0 <HAL_RCC_ClockConfig+0x25c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d001      	beq.n	80025ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e14a      	b.n	8002842 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d008      	beq.n	80025ca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025b8:	4b82      	ldr	r3, [pc, #520]	; (80027c4 <HAL_RCC_ClockConfig+0x260>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	497f      	ldr	r1, [pc, #508]	; (80027c4 <HAL_RCC_ClockConfig+0x260>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 80dc 	beq.w	8002790 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d13c      	bne.n	800265a <HAL_RCC_ClockConfig+0xf6>
 80025e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025e4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025e8:	fa93 f3a3 	rbit	r3, r3
 80025ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80025ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f0:	fab3 f383 	clz	r3, r3
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	095b      	lsrs	r3, r3, #5
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	f043 0301 	orr.w	r3, r3, #1
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2b01      	cmp	r3, #1
 8002602:	d102      	bne.n	800260a <HAL_RCC_ClockConfig+0xa6>
 8002604:	4b6f      	ldr	r3, [pc, #444]	; (80027c4 <HAL_RCC_ClockConfig+0x260>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	e00f      	b.n	800262a <HAL_RCC_ClockConfig+0xc6>
 800260a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800260e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002610:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002612:	fa93 f3a3 	rbit	r3, r3
 8002616:	667b      	str	r3, [r7, #100]	; 0x64
 8002618:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800261c:	663b      	str	r3, [r7, #96]	; 0x60
 800261e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002620:	fa93 f3a3 	rbit	r3, r3
 8002624:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002626:	4b67      	ldr	r3, [pc, #412]	; (80027c4 <HAL_RCC_ClockConfig+0x260>)
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800262e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002630:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002632:	fa92 f2a2 	rbit	r2, r2
 8002636:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002638:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800263a:	fab2 f282 	clz	r2, r2
 800263e:	b2d2      	uxtb	r2, r2
 8002640:	f042 0220 	orr.w	r2, r2, #32
 8002644:	b2d2      	uxtb	r2, r2
 8002646:	f002 021f 	and.w	r2, r2, #31
 800264a:	2101      	movs	r1, #1
 800264c:	fa01 f202 	lsl.w	r2, r1, r2
 8002650:	4013      	ands	r3, r2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d17b      	bne.n	800274e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e0f3      	b.n	8002842 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b02      	cmp	r3, #2
 8002660:	d13c      	bne.n	80026dc <HAL_RCC_ClockConfig+0x178>
 8002662:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002666:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800266a:	fa93 f3a3 	rbit	r3, r3
 800266e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002672:	fab3 f383 	clz	r3, r3
 8002676:	b2db      	uxtb	r3, r3
 8002678:	095b      	lsrs	r3, r3, #5
 800267a:	b2db      	uxtb	r3, r3
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b01      	cmp	r3, #1
 8002684:	d102      	bne.n	800268c <HAL_RCC_ClockConfig+0x128>
 8002686:	4b4f      	ldr	r3, [pc, #316]	; (80027c4 <HAL_RCC_ClockConfig+0x260>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	e00f      	b.n	80026ac <HAL_RCC_ClockConfig+0x148>
 800268c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002690:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002692:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002694:	fa93 f3a3 	rbit	r3, r3
 8002698:	647b      	str	r3, [r7, #68]	; 0x44
 800269a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800269e:	643b      	str	r3, [r7, #64]	; 0x40
 80026a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026a2:	fa93 f3a3 	rbit	r3, r3
 80026a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026a8:	4b46      	ldr	r3, [pc, #280]	; (80027c4 <HAL_RCC_ClockConfig+0x260>)
 80026aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026b0:	63ba      	str	r2, [r7, #56]	; 0x38
 80026b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026b4:	fa92 f2a2 	rbit	r2, r2
 80026b8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80026ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026bc:	fab2 f282 	clz	r2, r2
 80026c0:	b2d2      	uxtb	r2, r2
 80026c2:	f042 0220 	orr.w	r2, r2, #32
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	f002 021f 	and.w	r2, r2, #31
 80026cc:	2101      	movs	r1, #1
 80026ce:	fa01 f202 	lsl.w	r2, r1, r2
 80026d2:	4013      	ands	r3, r2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d13a      	bne.n	800274e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e0b2      	b.n	8002842 <HAL_RCC_ClockConfig+0x2de>
 80026dc:	2302      	movs	r3, #2
 80026de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e2:	fa93 f3a3 	rbit	r3, r3
 80026e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80026e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ea:	fab3 f383 	clz	r3, r3
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	095b      	lsrs	r3, r3, #5
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d102      	bne.n	8002704 <HAL_RCC_ClockConfig+0x1a0>
 80026fe:	4b31      	ldr	r3, [pc, #196]	; (80027c4 <HAL_RCC_ClockConfig+0x260>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	e00d      	b.n	8002720 <HAL_RCC_ClockConfig+0x1bc>
 8002704:	2302      	movs	r3, #2
 8002706:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800270a:	fa93 f3a3 	rbit	r3, r3
 800270e:	627b      	str	r3, [r7, #36]	; 0x24
 8002710:	2302      	movs	r3, #2
 8002712:	623b      	str	r3, [r7, #32]
 8002714:	6a3b      	ldr	r3, [r7, #32]
 8002716:	fa93 f3a3 	rbit	r3, r3
 800271a:	61fb      	str	r3, [r7, #28]
 800271c:	4b29      	ldr	r3, [pc, #164]	; (80027c4 <HAL_RCC_ClockConfig+0x260>)
 800271e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002720:	2202      	movs	r2, #2
 8002722:	61ba      	str	r2, [r7, #24]
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	fa92 f2a2 	rbit	r2, r2
 800272a:	617a      	str	r2, [r7, #20]
  return result;
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	fab2 f282 	clz	r2, r2
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	f042 0220 	orr.w	r2, r2, #32
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	f002 021f 	and.w	r2, r2, #31
 800273e:	2101      	movs	r1, #1
 8002740:	fa01 f202 	lsl.w	r2, r1, r2
 8002744:	4013      	ands	r3, r2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e079      	b.n	8002842 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800274e:	4b1d      	ldr	r3, [pc, #116]	; (80027c4 <HAL_RCC_ClockConfig+0x260>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f023 0203 	bic.w	r2, r3, #3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	491a      	ldr	r1, [pc, #104]	; (80027c4 <HAL_RCC_ClockConfig+0x260>)
 800275c:	4313      	orrs	r3, r2
 800275e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002760:	f7fe f98c 	bl	8000a7c <HAL_GetTick>
 8002764:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002766:	e00a      	b.n	800277e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002768:	f7fe f988 	bl	8000a7c <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	f241 3288 	movw	r2, #5000	; 0x1388
 8002776:	4293      	cmp	r3, r2
 8002778:	d901      	bls.n	800277e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e061      	b.n	8002842 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277e:	4b11      	ldr	r3, [pc, #68]	; (80027c4 <HAL_RCC_ClockConfig+0x260>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f003 020c 	and.w	r2, r3, #12
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	429a      	cmp	r2, r3
 800278e:	d1eb      	bne.n	8002768 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002790:	4b0b      	ldr	r3, [pc, #44]	; (80027c0 <HAL_RCC_ClockConfig+0x25c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	429a      	cmp	r2, r3
 800279c:	d214      	bcs.n	80027c8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800279e:	4b08      	ldr	r3, [pc, #32]	; (80027c0 <HAL_RCC_ClockConfig+0x25c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f023 0207 	bic.w	r2, r3, #7
 80027a6:	4906      	ldr	r1, [pc, #24]	; (80027c0 <HAL_RCC_ClockConfig+0x25c>)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ae:	4b04      	ldr	r3, [pc, #16]	; (80027c0 <HAL_RCC_ClockConfig+0x25c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d005      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e040      	b.n	8002842 <HAL_RCC_ClockConfig+0x2de>
 80027c0:	40022000 	.word	0x40022000
 80027c4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0304 	and.w	r3, r3, #4
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d008      	beq.n	80027e6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027d4:	4b1d      	ldr	r3, [pc, #116]	; (800284c <HAL_RCC_ClockConfig+0x2e8>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	491a      	ldr	r1, [pc, #104]	; (800284c <HAL_RCC_ClockConfig+0x2e8>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d009      	beq.n	8002806 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027f2:	4b16      	ldr	r3, [pc, #88]	; (800284c <HAL_RCC_ClockConfig+0x2e8>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	4912      	ldr	r1, [pc, #72]	; (800284c <HAL_RCC_ClockConfig+0x2e8>)
 8002802:	4313      	orrs	r3, r2
 8002804:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002806:	f000 f829 	bl	800285c <HAL_RCC_GetSysClockFreq>
 800280a:	4601      	mov	r1, r0
 800280c:	4b0f      	ldr	r3, [pc, #60]	; (800284c <HAL_RCC_ClockConfig+0x2e8>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002814:	22f0      	movs	r2, #240	; 0xf0
 8002816:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	fa92 f2a2 	rbit	r2, r2
 800281e:	60fa      	str	r2, [r7, #12]
  return result;
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	fab2 f282 	clz	r2, r2
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	40d3      	lsrs	r3, r2
 800282a:	4a09      	ldr	r2, [pc, #36]	; (8002850 <HAL_RCC_ClockConfig+0x2ec>)
 800282c:	5cd3      	ldrb	r3, [r2, r3]
 800282e:	fa21 f303 	lsr.w	r3, r1, r3
 8002832:	4a08      	ldr	r2, [pc, #32]	; (8002854 <HAL_RCC_ClockConfig+0x2f0>)
 8002834:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002836:	4b08      	ldr	r3, [pc, #32]	; (8002858 <HAL_RCC_ClockConfig+0x2f4>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f7fe f8da 	bl	80009f4 <HAL_InitTick>
  
  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3778      	adds	r7, #120	; 0x78
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	40021000 	.word	0x40021000
 8002850:	08005328 	.word	0x08005328
 8002854:	20000000 	.word	0x20000000
 8002858:	20000004 	.word	0x20000004

0800285c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800285c:	b480      	push	{r7}
 800285e:	b087      	sub	sp, #28
 8002860:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002862:	2300      	movs	r3, #0
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	2300      	movs	r3, #0
 8002868:	60bb      	str	r3, [r7, #8]
 800286a:	2300      	movs	r3, #0
 800286c:	617b      	str	r3, [r7, #20]
 800286e:	2300      	movs	r3, #0
 8002870:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002872:	2300      	movs	r3, #0
 8002874:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002876:	4b1f      	ldr	r3, [pc, #124]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f003 030c 	and.w	r3, r3, #12
 8002882:	2b04      	cmp	r3, #4
 8002884:	d002      	beq.n	800288c <HAL_RCC_GetSysClockFreq+0x30>
 8002886:	2b08      	cmp	r3, #8
 8002888:	d003      	beq.n	8002892 <HAL_RCC_GetSysClockFreq+0x36>
 800288a:	e029      	b.n	80028e0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800288c:	4b1a      	ldr	r3, [pc, #104]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800288e:	613b      	str	r3, [r7, #16]
      break;
 8002890:	e029      	b.n	80028e6 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	0c9b      	lsrs	r3, r3, #18
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	4a18      	ldr	r2, [pc, #96]	; (80028fc <HAL_RCC_GetSysClockFreq+0xa0>)
 800289c:	5cd3      	ldrb	r3, [r2, r3]
 800289e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80028a0:	4b14      	ldr	r3, [pc, #80]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80028a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a4:	f003 030f 	and.w	r3, r3, #15
 80028a8:	4a15      	ldr	r2, [pc, #84]	; (8002900 <HAL_RCC_GetSysClockFreq+0xa4>)
 80028aa:	5cd3      	ldrb	r3, [r2, r3]
 80028ac:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d008      	beq.n	80028ca <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80028b8:	4a0f      	ldr	r2, [pc, #60]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	fb02 f303 	mul.w	r3, r2, r3
 80028c6:	617b      	str	r3, [r7, #20]
 80028c8:	e007      	b.n	80028da <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80028ca:	4a0b      	ldr	r2, [pc, #44]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	fb02 f303 	mul.w	r3, r2, r3
 80028d8:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	613b      	str	r3, [r7, #16]
      break;
 80028de:	e002      	b.n	80028e6 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028e0:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028e2:	613b      	str	r3, [r7, #16]
      break;
 80028e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028e6:	693b      	ldr	r3, [r7, #16]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	371c      	adds	r7, #28
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	40021000 	.word	0x40021000
 80028f8:	007a1200 	.word	0x007a1200
 80028fc:	08005340 	.word	0x08005340
 8002900:	08005350 	.word	0x08005350

08002904 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002908:	4b03      	ldr	r3, [pc, #12]	; (8002918 <HAL_RCC_GetHCLKFreq+0x14>)
 800290a:	681b      	ldr	r3, [r3, #0]
}
 800290c:	4618      	mov	r0, r3
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	20000000 	.word	0x20000000

0800291c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002922:	f7ff ffef 	bl	8002904 <HAL_RCC_GetHCLKFreq>
 8002926:	4601      	mov	r1, r0
 8002928:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002930:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002934:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	fa92 f2a2 	rbit	r2, r2
 800293c:	603a      	str	r2, [r7, #0]
  return result;
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	fab2 f282 	clz	r2, r2
 8002944:	b2d2      	uxtb	r2, r2
 8002946:	40d3      	lsrs	r3, r2
 8002948:	4a04      	ldr	r2, [pc, #16]	; (800295c <HAL_RCC_GetPCLK1Freq+0x40>)
 800294a:	5cd3      	ldrb	r3, [r2, r3]
 800294c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002950:	4618      	mov	r0, r3
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40021000 	.word	0x40021000
 800295c:	08005338 	.word	0x08005338

08002960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002966:	f7ff ffcd 	bl	8002904 <HAL_RCC_GetHCLKFreq>
 800296a:	4601      	mov	r1, r0
 800296c:	4b0b      	ldr	r3, [pc, #44]	; (800299c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002974:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002978:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	fa92 f2a2 	rbit	r2, r2
 8002980:	603a      	str	r2, [r7, #0]
  return result;
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	fab2 f282 	clz	r2, r2
 8002988:	b2d2      	uxtb	r2, r2
 800298a:	40d3      	lsrs	r3, r2
 800298c:	4a04      	ldr	r2, [pc, #16]	; (80029a0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800298e:	5cd3      	ldrb	r3, [r2, r3]
 8002990:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002994:	4618      	mov	r0, r3
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40021000 	.word	0x40021000
 80029a0:	08005338 	.word	0x08005338

080029a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b092      	sub	sp, #72	; 0x48
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029ac:	2300      	movs	r3, #0
 80029ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80029b4:	2300      	movs	r3, #0
 80029b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 80d4 	beq.w	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029c8:	4b4e      	ldr	r3, [pc, #312]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ca:	69db      	ldr	r3, [r3, #28]
 80029cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10e      	bne.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029d4:	4b4b      	ldr	r3, [pc, #300]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029d6:	69db      	ldr	r3, [r3, #28]
 80029d8:	4a4a      	ldr	r2, [pc, #296]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029de:	61d3      	str	r3, [r2, #28]
 80029e0:	4b48      	ldr	r3, [pc, #288]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e2:	69db      	ldr	r3, [r3, #28]
 80029e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e8:	60bb      	str	r3, [r7, #8]
 80029ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029ec:	2301      	movs	r3, #1
 80029ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f2:	4b45      	ldr	r3, [pc, #276]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d118      	bne.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029fe:	4b42      	ldr	r3, [pc, #264]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a41      	ldr	r2, [pc, #260]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a08:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a0a:	f7fe f837 	bl	8000a7c <HAL_GetTick>
 8002a0e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a10:	e008      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a12:	f7fe f833 	bl	8000a7c <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b64      	cmp	r3, #100	; 0x64
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e1d6      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a24:	4b38      	ldr	r3, [pc, #224]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0f0      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a30:	4b34      	ldr	r3, [pc, #208]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a38:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 8084 	beq.w	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d07c      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a50:	4b2c      	ldr	r3, [pc, #176]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a5e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a62:	fa93 f3a3 	rbit	r3, r3
 8002a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a6a:	fab3 f383 	clz	r3, r3
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	461a      	mov	r2, r3
 8002a72:	4b26      	ldr	r3, [pc, #152]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a74:	4413      	add	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	461a      	mov	r2, r3
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	6013      	str	r3, [r2, #0]
 8002a7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a82:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a86:	fa93 f3a3 	rbit	r3, r3
 8002a8a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a8e:	fab3 f383 	clz	r3, r3
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	461a      	mov	r2, r3
 8002a96:	4b1d      	ldr	r3, [pc, #116]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a98:	4413      	add	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002aa2:	4a18      	ldr	r2, [pc, #96]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aa6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d04b      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab2:	f7fd ffe3 	bl	8000a7c <HAL_GetTick>
 8002ab6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab8:	e00a      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aba:	f7fd ffdf 	bl	8000a7c <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e180      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad6:	fa93 f3a3 	rbit	r3, r3
 8002ada:	627b      	str	r3, [r7, #36]	; 0x24
 8002adc:	2302      	movs	r3, #2
 8002ade:	623b      	str	r3, [r7, #32]
 8002ae0:	6a3b      	ldr	r3, [r7, #32]
 8002ae2:	fa93 f3a3 	rbit	r3, r3
 8002ae6:	61fb      	str	r3, [r7, #28]
  return result;
 8002ae8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aea:	fab3 f383 	clz	r3, r3
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	095b      	lsrs	r3, r3, #5
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	f043 0302 	orr.w	r3, r3, #2
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d108      	bne.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002afe:	4b01      	ldr	r3, [pc, #4]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	e00d      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002b04:	40021000 	.word	0x40021000
 8002b08:	40007000 	.word	0x40007000
 8002b0c:	10908100 	.word	0x10908100
 8002b10:	2302      	movs	r3, #2
 8002b12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	fa93 f3a3 	rbit	r3, r3
 8002b1a:	617b      	str	r3, [r7, #20]
 8002b1c:	4b9a      	ldr	r3, [pc, #616]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	2202      	movs	r2, #2
 8002b22:	613a      	str	r2, [r7, #16]
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	fa92 f2a2 	rbit	r2, r2
 8002b2a:	60fa      	str	r2, [r7, #12]
  return result;
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	fab2 f282 	clz	r2, r2
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b38:	b2d2      	uxtb	r2, r2
 8002b3a:	f002 021f 	and.w	r2, r2, #31
 8002b3e:	2101      	movs	r1, #1
 8002b40:	fa01 f202 	lsl.w	r2, r1, r2
 8002b44:	4013      	ands	r3, r2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0b7      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002b4a:	4b8f      	ldr	r3, [pc, #572]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	498c      	ldr	r1, [pc, #560]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b5c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d105      	bne.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b64:	4b88      	ldr	r3, [pc, #544]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b66:	69db      	ldr	r3, [r3, #28]
 8002b68:	4a87      	ldr	r2, [pc, #540]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b6e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d008      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b7c:	4b82      	ldr	r3, [pc, #520]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b80:	f023 0203 	bic.w	r2, r3, #3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	497f      	ldr	r1, [pc, #508]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d008      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b9a:	4b7b      	ldr	r3, [pc, #492]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	4978      	ldr	r1, [pc, #480]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d008      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bb8:	4b73      	ldr	r3, [pc, #460]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	4970      	ldr	r1, [pc, #448]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0320 	and.w	r3, r3, #32
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d008      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bd6:	4b6c      	ldr	r3, [pc, #432]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	f023 0210 	bic.w	r2, r3, #16
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	4969      	ldr	r1, [pc, #420]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d008      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002bf4:	4b64      	ldr	r3, [pc, #400]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c00:	4961      	ldr	r1, [pc, #388]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d008      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c12:	4b5d      	ldr	r3, [pc, #372]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	f023 0220 	bic.w	r2, r3, #32
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	495a      	ldr	r1, [pc, #360]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d008      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c30:	4b55      	ldr	r3, [pc, #340]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c34:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3c:	4952      	ldr	r1, [pc, #328]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0308 	and.w	r3, r3, #8
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d008      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c4e:	4b4e      	ldr	r3, [pc, #312]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	494b      	ldr	r1, [pc, #300]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0310 	and.w	r3, r3, #16
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d008      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c6c:	4b46      	ldr	r3, [pc, #280]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c70:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	4943      	ldr	r1, [pc, #268]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d008      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c8a:	4b3f      	ldr	r3, [pc, #252]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	493c      	ldr	r1, [pc, #240]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ca8:	4b37      	ldr	r3, [pc, #220]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cac:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb4:	4934      	ldr	r1, [pc, #208]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d008      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002cc6:	4b30      	ldr	r3, [pc, #192]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cca:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd2:	492d      	ldr	r1, [pc, #180]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d008      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002ce4:	4b28      	ldr	r3, [pc, #160]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf0:	4925      	ldr	r1, [pc, #148]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d008      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002d02:	4b21      	ldr	r3, [pc, #132]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	491e      	ldr	r1, [pc, #120]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d008      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002d20:	4b19      	ldr	r3, [pc, #100]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d24:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d2c:	4916      	ldr	r1, [pc, #88]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d008      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002d3e:	4b12      	ldr	r3, [pc, #72]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d42:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4a:	490f      	ldr	r1, [pc, #60]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d008      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002d5c:	4b0a      	ldr	r3, [pc, #40]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d60:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d68:	4907      	ldr	r1, [pc, #28]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00c      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002d7a:	4b03      	ldr	r3, [pc, #12]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	e002      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002d86:	bf00      	nop
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d8e:	4913      	ldr	r1, [pc, #76]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d008      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002da0:	4b0e      	ldr	r3, [pc, #56]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dac:	490b      	ldr	r1, [pc, #44]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d008      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002dbe:	4b07      	ldr	r3, [pc, #28]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dca:	4904      	ldr	r1, [pc, #16]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3748      	adds	r7, #72	; 0x48
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40021000 	.word	0x40021000

08002de0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e049      	b.n	8002e86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d106      	bne.n	8002e0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7fd fc8a 	bl	8000720 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2202      	movs	r2, #2
 8002e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	3304      	adds	r3, #4
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4610      	mov	r0, r2
 8002e20:	f000 fac8 	bl	80033b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
	...

08002e90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d001      	beq.n	8002ea8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e04f      	b.n	8002f48 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0201 	orr.w	r2, r2, #1
 8002ebe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a23      	ldr	r2, [pc, #140]	; (8002f54 <HAL_TIM_Base_Start_IT+0xc4>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d01d      	beq.n	8002f06 <HAL_TIM_Base_Start_IT+0x76>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ed2:	d018      	beq.n	8002f06 <HAL_TIM_Base_Start_IT+0x76>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a1f      	ldr	r2, [pc, #124]	; (8002f58 <HAL_TIM_Base_Start_IT+0xc8>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d013      	beq.n	8002f06 <HAL_TIM_Base_Start_IT+0x76>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a1e      	ldr	r2, [pc, #120]	; (8002f5c <HAL_TIM_Base_Start_IT+0xcc>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d00e      	beq.n	8002f06 <HAL_TIM_Base_Start_IT+0x76>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a1c      	ldr	r2, [pc, #112]	; (8002f60 <HAL_TIM_Base_Start_IT+0xd0>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d009      	beq.n	8002f06 <HAL_TIM_Base_Start_IT+0x76>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a1b      	ldr	r2, [pc, #108]	; (8002f64 <HAL_TIM_Base_Start_IT+0xd4>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d004      	beq.n	8002f06 <HAL_TIM_Base_Start_IT+0x76>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a19      	ldr	r2, [pc, #100]	; (8002f68 <HAL_TIM_Base_Start_IT+0xd8>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d115      	bne.n	8002f32 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	4b17      	ldr	r3, [pc, #92]	; (8002f6c <HAL_TIM_Base_Start_IT+0xdc>)
 8002f0e:	4013      	ands	r3, r2
 8002f10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2b06      	cmp	r3, #6
 8002f16:	d015      	beq.n	8002f44 <HAL_TIM_Base_Start_IT+0xb4>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f1e:	d011      	beq.n	8002f44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f042 0201 	orr.w	r2, r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f30:	e008      	b.n	8002f44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f042 0201 	orr.w	r2, r2, #1
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	e000      	b.n	8002f46 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f44:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	40012c00 	.word	0x40012c00
 8002f58:	40000400 	.word	0x40000400
 8002f5c:	40000800 	.word	0x40000800
 8002f60:	40013400 	.word	0x40013400
 8002f64:	40014000 	.word	0x40014000
 8002f68:	40015000 	.word	0x40015000
 8002f6c:	00010007 	.word	0x00010007

08002f70 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68da      	ldr	r2, [r3, #12]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0201 	bic.w	r2, r2, #1
 8002f86:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6a1a      	ldr	r2, [r3, #32]
 8002f8e:	f241 1311 	movw	r3, #4369	; 0x1111
 8002f92:	4013      	ands	r3, r2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10f      	bne.n	8002fb8 <HAL_TIM_Base_Stop_IT+0x48>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6a1a      	ldr	r2, [r3, #32]
 8002f9e:	f240 4344 	movw	r3, #1092	; 0x444
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d107      	bne.n	8002fb8 <HAL_TIM_Base_Stop_IT+0x48>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f022 0201 	bic.w	r2, r2, #1
 8002fb6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b084      	sub	sp, #16
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d020      	beq.n	8003032 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d01b      	beq.n	8003032 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f06f 0202 	mvn.w	r2, #2
 8003002:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	f003 0303 	and.w	r3, r3, #3
 8003014:	2b00      	cmp	r3, #0
 8003016:	d003      	beq.n	8003020 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f9ad 	bl	8003378 <HAL_TIM_IC_CaptureCallback>
 800301e:	e005      	b.n	800302c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 f99f 	bl	8003364 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f9b0 	bl	800338c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	f003 0304 	and.w	r3, r3, #4
 8003038:	2b00      	cmp	r3, #0
 800303a:	d020      	beq.n	800307e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f003 0304 	and.w	r3, r3, #4
 8003042:	2b00      	cmp	r3, #0
 8003044:	d01b      	beq.n	800307e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f06f 0204 	mvn.w	r2, #4
 800304e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2202      	movs	r2, #2
 8003054:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003060:	2b00      	cmp	r3, #0
 8003062:	d003      	beq.n	800306c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 f987 	bl	8003378 <HAL_TIM_IC_CaptureCallback>
 800306a:	e005      	b.n	8003078 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f979 	bl	8003364 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f98a 	bl	800338c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	f003 0308 	and.w	r3, r3, #8
 8003084:	2b00      	cmp	r3, #0
 8003086:	d020      	beq.n	80030ca <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f003 0308 	and.w	r3, r3, #8
 800308e:	2b00      	cmp	r3, #0
 8003090:	d01b      	beq.n	80030ca <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f06f 0208 	mvn.w	r2, #8
 800309a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2204      	movs	r2, #4
 80030a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	69db      	ldr	r3, [r3, #28]
 80030a8:	f003 0303 	and.w	r3, r3, #3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 f961 	bl	8003378 <HAL_TIM_IC_CaptureCallback>
 80030b6:	e005      	b.n	80030c4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 f953 	bl	8003364 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f964 	bl	800338c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	f003 0310 	and.w	r3, r3, #16
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d020      	beq.n	8003116 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f003 0310 	and.w	r3, r3, #16
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d01b      	beq.n	8003116 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f06f 0210 	mvn.w	r2, #16
 80030e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2208      	movs	r2, #8
 80030ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d003      	beq.n	8003104 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 f93b 	bl	8003378 <HAL_TIM_IC_CaptureCallback>
 8003102:	e005      	b.n	8003110 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 f92d 	bl	8003364 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f93e 	bl	800338c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00c      	beq.n	800313a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d007      	beq.n	800313a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f06f 0201 	mvn.w	r2, #1
 8003132:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f001 ffb3 	bl	80050a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00c      	beq.n	800315e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800314a:	2b00      	cmp	r3, #0
 800314c:	d007      	beq.n	800315e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003156:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 fb05 	bl	8003768 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00c      	beq.n	8003182 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800316e:	2b00      	cmp	r3, #0
 8003170:	d007      	beq.n	8003182 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800317a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 fafd 	bl	800377c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00c      	beq.n	80031a6 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003192:	2b00      	cmp	r3, #0
 8003194:	d007      	beq.n	80031a6 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800319e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 f8fd 	bl	80033a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	f003 0320 	and.w	r3, r3, #32
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00c      	beq.n	80031ca <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f003 0320 	and.w	r3, r3, #32
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d007      	beq.n	80031ca <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f06f 0220 	mvn.w	r2, #32
 80031c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 fac5 	bl	8003754 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031ca:	bf00      	nop
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b084      	sub	sp, #16
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
 80031da:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031dc:	2300      	movs	r3, #0
 80031de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d101      	bne.n	80031ee <HAL_TIM_ConfigClockSource+0x1c>
 80031ea:	2302      	movs	r3, #2
 80031ec:	e0b6      	b.n	800335c <HAL_TIM_ConfigClockSource+0x18a>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2202      	movs	r2, #2
 80031fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800320c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003210:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003218:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800322a:	d03e      	beq.n	80032aa <HAL_TIM_ConfigClockSource+0xd8>
 800322c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003230:	f200 8087 	bhi.w	8003342 <HAL_TIM_ConfigClockSource+0x170>
 8003234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003238:	f000 8086 	beq.w	8003348 <HAL_TIM_ConfigClockSource+0x176>
 800323c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003240:	d87f      	bhi.n	8003342 <HAL_TIM_ConfigClockSource+0x170>
 8003242:	2b70      	cmp	r3, #112	; 0x70
 8003244:	d01a      	beq.n	800327c <HAL_TIM_ConfigClockSource+0xaa>
 8003246:	2b70      	cmp	r3, #112	; 0x70
 8003248:	d87b      	bhi.n	8003342 <HAL_TIM_ConfigClockSource+0x170>
 800324a:	2b60      	cmp	r3, #96	; 0x60
 800324c:	d050      	beq.n	80032f0 <HAL_TIM_ConfigClockSource+0x11e>
 800324e:	2b60      	cmp	r3, #96	; 0x60
 8003250:	d877      	bhi.n	8003342 <HAL_TIM_ConfigClockSource+0x170>
 8003252:	2b50      	cmp	r3, #80	; 0x50
 8003254:	d03c      	beq.n	80032d0 <HAL_TIM_ConfigClockSource+0xfe>
 8003256:	2b50      	cmp	r3, #80	; 0x50
 8003258:	d873      	bhi.n	8003342 <HAL_TIM_ConfigClockSource+0x170>
 800325a:	2b40      	cmp	r3, #64	; 0x40
 800325c:	d058      	beq.n	8003310 <HAL_TIM_ConfigClockSource+0x13e>
 800325e:	2b40      	cmp	r3, #64	; 0x40
 8003260:	d86f      	bhi.n	8003342 <HAL_TIM_ConfigClockSource+0x170>
 8003262:	2b30      	cmp	r3, #48	; 0x30
 8003264:	d064      	beq.n	8003330 <HAL_TIM_ConfigClockSource+0x15e>
 8003266:	2b30      	cmp	r3, #48	; 0x30
 8003268:	d86b      	bhi.n	8003342 <HAL_TIM_ConfigClockSource+0x170>
 800326a:	2b20      	cmp	r3, #32
 800326c:	d060      	beq.n	8003330 <HAL_TIM_ConfigClockSource+0x15e>
 800326e:	2b20      	cmp	r3, #32
 8003270:	d867      	bhi.n	8003342 <HAL_TIM_ConfigClockSource+0x170>
 8003272:	2b00      	cmp	r3, #0
 8003274:	d05c      	beq.n	8003330 <HAL_TIM_ConfigClockSource+0x15e>
 8003276:	2b10      	cmp	r3, #16
 8003278:	d05a      	beq.n	8003330 <HAL_TIM_ConfigClockSource+0x15e>
 800327a:	e062      	b.n	8003342 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6818      	ldr	r0, [r3, #0]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	6899      	ldr	r1, [r3, #8]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	f000 f9b6 	bl	80035fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800329e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68ba      	ldr	r2, [r7, #8]
 80032a6:	609a      	str	r2, [r3, #8]
      break;
 80032a8:	e04f      	b.n	800334a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6818      	ldr	r0, [r3, #0]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	6899      	ldr	r1, [r3, #8]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	f000 f99f 	bl	80035fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032cc:	609a      	str	r2, [r3, #8]
      break;
 80032ce:	e03c      	b.n	800334a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6818      	ldr	r0, [r3, #0]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	6859      	ldr	r1, [r3, #4]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	461a      	mov	r2, r3
 80032de:	f000 f913 	bl	8003508 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2150      	movs	r1, #80	; 0x50
 80032e8:	4618      	mov	r0, r3
 80032ea:	f000 f96c 	bl	80035c6 <TIM_ITRx_SetConfig>
      break;
 80032ee:	e02c      	b.n	800334a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6818      	ldr	r0, [r3, #0]
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	6859      	ldr	r1, [r3, #4]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	461a      	mov	r2, r3
 80032fe:	f000 f932 	bl	8003566 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2160      	movs	r1, #96	; 0x60
 8003308:	4618      	mov	r0, r3
 800330a:	f000 f95c 	bl	80035c6 <TIM_ITRx_SetConfig>
      break;
 800330e:	e01c      	b.n	800334a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6818      	ldr	r0, [r3, #0]
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	6859      	ldr	r1, [r3, #4]
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	461a      	mov	r2, r3
 800331e:	f000 f8f3 	bl	8003508 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2140      	movs	r1, #64	; 0x40
 8003328:	4618      	mov	r0, r3
 800332a:	f000 f94c 	bl	80035c6 <TIM_ITRx_SetConfig>
      break;
 800332e:	e00c      	b.n	800334a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4619      	mov	r1, r3
 800333a:	4610      	mov	r0, r2
 800333c:	f000 f943 	bl	80035c6 <TIM_ITRx_SetConfig>
      break;
 8003340:	e003      	b.n	800334a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	73fb      	strb	r3, [r7, #15]
      break;
 8003346:	e000      	b.n	800334a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003348:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800335a:	7bfb      	ldrb	r3, [r7, #15]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a48      	ldr	r2, [pc, #288]	; (80034e8 <TIM_Base_SetConfig+0x134>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d013      	beq.n	80033f4 <TIM_Base_SetConfig+0x40>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d2:	d00f      	beq.n	80033f4 <TIM_Base_SetConfig+0x40>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a45      	ldr	r2, [pc, #276]	; (80034ec <TIM_Base_SetConfig+0x138>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d00b      	beq.n	80033f4 <TIM_Base_SetConfig+0x40>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a44      	ldr	r2, [pc, #272]	; (80034f0 <TIM_Base_SetConfig+0x13c>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d007      	beq.n	80033f4 <TIM_Base_SetConfig+0x40>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a43      	ldr	r2, [pc, #268]	; (80034f4 <TIM_Base_SetConfig+0x140>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d003      	beq.n	80033f4 <TIM_Base_SetConfig+0x40>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a42      	ldr	r2, [pc, #264]	; (80034f8 <TIM_Base_SetConfig+0x144>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d108      	bne.n	8003406 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	4313      	orrs	r3, r2
 8003404:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a37      	ldr	r2, [pc, #220]	; (80034e8 <TIM_Base_SetConfig+0x134>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d01f      	beq.n	800344e <TIM_Base_SetConfig+0x9a>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003414:	d01b      	beq.n	800344e <TIM_Base_SetConfig+0x9a>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a34      	ldr	r2, [pc, #208]	; (80034ec <TIM_Base_SetConfig+0x138>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d017      	beq.n	800344e <TIM_Base_SetConfig+0x9a>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a33      	ldr	r2, [pc, #204]	; (80034f0 <TIM_Base_SetConfig+0x13c>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d013      	beq.n	800344e <TIM_Base_SetConfig+0x9a>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a32      	ldr	r2, [pc, #200]	; (80034f4 <TIM_Base_SetConfig+0x140>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d00f      	beq.n	800344e <TIM_Base_SetConfig+0x9a>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a32      	ldr	r2, [pc, #200]	; (80034fc <TIM_Base_SetConfig+0x148>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d00b      	beq.n	800344e <TIM_Base_SetConfig+0x9a>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a31      	ldr	r2, [pc, #196]	; (8003500 <TIM_Base_SetConfig+0x14c>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d007      	beq.n	800344e <TIM_Base_SetConfig+0x9a>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a30      	ldr	r2, [pc, #192]	; (8003504 <TIM_Base_SetConfig+0x150>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d003      	beq.n	800344e <TIM_Base_SetConfig+0x9a>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a2b      	ldr	r2, [pc, #172]	; (80034f8 <TIM_Base_SetConfig+0x144>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d108      	bne.n	8003460 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003454:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	4313      	orrs	r3, r2
 800345e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	4313      	orrs	r3, r2
 800346c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a18      	ldr	r2, [pc, #96]	; (80034e8 <TIM_Base_SetConfig+0x134>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d013      	beq.n	80034b4 <TIM_Base_SetConfig+0x100>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a19      	ldr	r2, [pc, #100]	; (80034f4 <TIM_Base_SetConfig+0x140>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d00f      	beq.n	80034b4 <TIM_Base_SetConfig+0x100>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a19      	ldr	r2, [pc, #100]	; (80034fc <TIM_Base_SetConfig+0x148>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d00b      	beq.n	80034b4 <TIM_Base_SetConfig+0x100>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a18      	ldr	r2, [pc, #96]	; (8003500 <TIM_Base_SetConfig+0x14c>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d007      	beq.n	80034b4 <TIM_Base_SetConfig+0x100>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a17      	ldr	r2, [pc, #92]	; (8003504 <TIM_Base_SetConfig+0x150>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d003      	beq.n	80034b4 <TIM_Base_SetConfig+0x100>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a12      	ldr	r2, [pc, #72]	; (80034f8 <TIM_Base_SetConfig+0x144>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d103      	bne.n	80034bc <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	691a      	ldr	r2, [r3, #16]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d105      	bne.n	80034da <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	f023 0201 	bic.w	r2, r3, #1
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	611a      	str	r2, [r3, #16]
  }
}
 80034da:	bf00      	nop
 80034dc:	3714      	adds	r7, #20
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	40012c00 	.word	0x40012c00
 80034ec:	40000400 	.word	0x40000400
 80034f0:	40000800 	.word	0x40000800
 80034f4:	40013400 	.word	0x40013400
 80034f8:	40015000 	.word	0x40015000
 80034fc:	40014000 	.word	0x40014000
 8003500:	40014400 	.word	0x40014400
 8003504:	40014800 	.word	0x40014800

08003508 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003508:	b480      	push	{r7}
 800350a:	b087      	sub	sp, #28
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	f023 0201 	bic.w	r2, r3, #1
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003532:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	011b      	lsls	r3, r3, #4
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	4313      	orrs	r3, r2
 800353c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f023 030a 	bic.w	r3, r3, #10
 8003544:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	4313      	orrs	r3, r2
 800354c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	621a      	str	r2, [r3, #32]
}
 800355a:	bf00      	nop
 800355c:	371c      	adds	r7, #28
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003566:	b480      	push	{r7}
 8003568:	b087      	sub	sp, #28
 800356a:	af00      	add	r7, sp, #0
 800356c:	60f8      	str	r0, [r7, #12]
 800356e:	60b9      	str	r1, [r7, #8]
 8003570:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	f023 0210 	bic.w	r2, r3, #16
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003590:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	031b      	lsls	r3, r3, #12
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	4313      	orrs	r3, r2
 800359a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	011b      	lsls	r3, r3, #4
 80035a8:	697a      	ldr	r2, [r7, #20]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	621a      	str	r2, [r3, #32]
}
 80035ba:	bf00      	nop
 80035bc:	371c      	adds	r7, #28
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr

080035c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b085      	sub	sp, #20
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
 80035ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	f043 0307 	orr.w	r3, r3, #7
 80035e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	609a      	str	r2, [r3, #8]
}
 80035f0:	bf00      	nop
 80035f2:	3714      	adds	r7, #20
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b087      	sub	sp, #28
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
 8003608:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003616:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	021a      	lsls	r2, r3, #8
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	431a      	orrs	r2, r3
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	4313      	orrs	r3, r2
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	4313      	orrs	r3, r2
 8003628:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	609a      	str	r2, [r3, #8]
}
 8003630:	bf00      	nop
 8003632:	371c      	adds	r7, #28
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800364c:	2b01      	cmp	r3, #1
 800364e:	d101      	bne.n	8003654 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003650:	2302      	movs	r3, #2
 8003652:	e06d      	b.n	8003730 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2202      	movs	r2, #2
 8003660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a30      	ldr	r2, [pc, #192]	; (800373c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d009      	beq.n	8003692 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a2f      	ldr	r2, [pc, #188]	; (8003740 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d004      	beq.n	8003692 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a2d      	ldr	r2, [pc, #180]	; (8003744 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d108      	bne.n	80036a4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003698:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a1e      	ldr	r2, [pc, #120]	; (800373c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d01d      	beq.n	8003704 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d0:	d018      	beq.n	8003704 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a1c      	ldr	r2, [pc, #112]	; (8003748 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d013      	beq.n	8003704 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a1a      	ldr	r2, [pc, #104]	; (800374c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d00e      	beq.n	8003704 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a15      	ldr	r2, [pc, #84]	; (8003740 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d009      	beq.n	8003704 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a16      	ldr	r2, [pc, #88]	; (8003750 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d004      	beq.n	8003704 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a11      	ldr	r2, [pc, #68]	; (8003744 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d10c      	bne.n	800371e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800370a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	4313      	orrs	r3, r2
 8003714:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68ba      	ldr	r2, [r7, #8]
 800371c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3714      	adds	r7, #20
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr
 800373c:	40012c00 	.word	0x40012c00
 8003740:	40013400 	.word	0x40013400
 8003744:	40015000 	.word	0x40015000
 8003748:	40000400 	.word	0x40000400
 800374c:	40000800 	.word	0x40000800
 8003750:	40014000 	.word	0x40014000

08003754 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e040      	b.n	8003824 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d106      	bne.n	80037b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7fc ffda 	bl	800076c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2224      	movs	r2, #36	; 0x24
 80037bc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 0201 	bic.w	r2, r2, #1
 80037cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d002      	beq.n	80037dc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 fdd6 	bl	8004388 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 fbff 	bl	8003fe0 <UART_SetConfig>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d101      	bne.n	80037ec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e01b      	b.n	8003824 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689a      	ldr	r2, [r3, #8]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800380a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f042 0201 	orr.w	r2, r2, #1
 800381a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 fe55 	bl	80044cc <UART_CheckIdleState>
 8003822:	4603      	mov	r3, r0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3708      	adds	r7, #8
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b08a      	sub	sp, #40	; 0x28
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	4613      	mov	r3, r2
 8003838:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800383e:	2b20      	cmp	r3, #32
 8003840:	d165      	bne.n	800390e <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d002      	beq.n	800384e <HAL_UART_Transmit_DMA+0x22>
 8003848:	88fb      	ldrh	r3, [r7, #6]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e05e      	b.n	8003910 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	68ba      	ldr	r2, [r7, #8]
 8003856:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	88fa      	ldrh	r2, [r7, #6]
 800385c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	88fa      	ldrh	r2, [r7, #6]
 8003864:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2221      	movs	r2, #33	; 0x21
 8003874:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387a:	2b00      	cmp	r3, #0
 800387c:	d027      	beq.n	80038ce <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003882:	4a25      	ldr	r2, [pc, #148]	; (8003918 <HAL_UART_Transmit_DMA+0xec>)
 8003884:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388a:	4a24      	ldr	r2, [pc, #144]	; (800391c <HAL_UART_Transmit_DMA+0xf0>)
 800388c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003892:	4a23      	ldr	r2, [pc, #140]	; (8003920 <HAL_UART_Transmit_DMA+0xf4>)
 8003894:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389a:	2200      	movs	r2, #0
 800389c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038a6:	4619      	mov	r1, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	3328      	adds	r3, #40	; 0x28
 80038ae:	461a      	mov	r2, r3
 80038b0:	88fb      	ldrh	r3, [r7, #6]
 80038b2:	f7fd fa47 	bl	8000d44 <HAL_DMA_Start_IT>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d008      	beq.n	80038ce <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2210      	movs	r2, #16
 80038c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2220      	movs	r2, #32
 80038c8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e020      	b.n	8003910 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2240      	movs	r2, #64	; 0x40
 80038d4:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	3308      	adds	r3, #8
 80038dc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	e853 3f00 	ldrex	r3, [r3]
 80038e4:	613b      	str	r3, [r7, #16]
   return(result);
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038ec:	627b      	str	r3, [r7, #36]	; 0x24
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	3308      	adds	r3, #8
 80038f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038f6:	623a      	str	r2, [r7, #32]
 80038f8:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fa:	69f9      	ldr	r1, [r7, #28]
 80038fc:	6a3a      	ldr	r2, [r7, #32]
 80038fe:	e841 2300 	strex	r3, r2, [r1]
 8003902:	61bb      	str	r3, [r7, #24]
   return(result);
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1e5      	bne.n	80038d6 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800390a:	2300      	movs	r3, #0
 800390c:	e000      	b.n	8003910 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800390e:	2302      	movs	r3, #2
  }
}
 8003910:	4618      	mov	r0, r3
 8003912:	3728      	adds	r7, #40	; 0x28
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	0800494d 	.word	0x0800494d
 800391c:	080049e1 	.word	0x080049e1
 8003920:	08004b61 	.word	0x08004b61

08003924 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b08a      	sub	sp, #40	; 0x28
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	4613      	mov	r3, r2
 8003930:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003938:	2b20      	cmp	r3, #32
 800393a:	d132      	bne.n	80039a2 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d002      	beq.n	8003948 <HAL_UART_Receive_DMA+0x24>
 8003942:	88fb      	ldrh	r3, [r7, #6]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d101      	bne.n	800394c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e02b      	b.n	80039a4 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d018      	beq.n	8003992 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	e853 3f00 	ldrex	r3, [r3]
 800396c:	613b      	str	r3, [r7, #16]
   return(result);
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003974:	627b      	str	r3, [r7, #36]	; 0x24
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	461a      	mov	r2, r3
 800397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397e:	623b      	str	r3, [r7, #32]
 8003980:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003982:	69f9      	ldr	r1, [r7, #28]
 8003984:	6a3a      	ldr	r2, [r7, #32]
 8003986:	e841 2300 	strex	r3, r2, [r1]
 800398a:	61bb      	str	r3, [r7, #24]
   return(result);
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1e6      	bne.n	8003960 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003992:	88fb      	ldrh	r3, [r7, #6]
 8003994:	461a      	mov	r2, r3
 8003996:	68b9      	ldr	r1, [r7, #8]
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 fead 	bl	80046f8 <UART_Start_Receive_DMA>
 800399e:	4603      	mov	r3, r0
 80039a0:	e000      	b.n	80039a4 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 80039a2:	2302      	movs	r3, #2
  }
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3728      	adds	r7, #40	; 0x28
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b0ba      	sub	sp, #232	; 0xe8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80039d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80039d6:	f640 030f 	movw	r3, #2063	; 0x80f
 80039da:	4013      	ands	r3, r2
 80039dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80039e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d115      	bne.n	8003a14 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80039e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ec:	f003 0320 	and.w	r3, r3, #32
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00f      	beq.n	8003a14 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80039f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039f8:	f003 0320 	and.w	r3, r3, #32
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d009      	beq.n	8003a14 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 82ab 	beq.w	8003f60 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	4798      	blx	r3
      }
      return;
 8003a12:	e2a5      	b.n	8003f60 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003a14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 8117 	beq.w	8003c4c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003a1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d106      	bne.n	8003a38 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003a2a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003a2e:	4b85      	ldr	r3, [pc, #532]	; (8003c44 <HAL_UART_IRQHandler+0x298>)
 8003a30:	4013      	ands	r3, r2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f000 810a 	beq.w	8003c4c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d011      	beq.n	8003a68 <HAL_UART_IRQHandler+0xbc>
 8003a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00b      	beq.n	8003a68 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2201      	movs	r2, #1
 8003a56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a5e:	f043 0201 	orr.w	r2, r3, #1
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d011      	beq.n	8003a98 <HAL_UART_IRQHandler+0xec>
 8003a74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00b      	beq.n	8003a98 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2202      	movs	r2, #2
 8003a86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a8e:	f043 0204 	orr.w	r2, r3, #4
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d011      	beq.n	8003ac8 <HAL_UART_IRQHandler+0x11c>
 8003aa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00b      	beq.n	8003ac8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2204      	movs	r2, #4
 8003ab6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003abe:	f043 0202 	orr.w	r2, r3, #2
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003acc:	f003 0308 	and.w	r3, r3, #8
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d017      	beq.n	8003b04 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ad8:	f003 0320 	and.w	r3, r3, #32
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d105      	bne.n	8003aec <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003ae0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ae4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00b      	beq.n	8003b04 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2208      	movs	r2, #8
 8003af2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003afa:	f043 0208 	orr.w	r2, r3, #8
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d012      	beq.n	8003b36 <HAL_UART_IRQHandler+0x18a>
 8003b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00c      	beq.n	8003b36 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b2c:	f043 0220 	orr.w	r2, r3, #32
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 8211 	beq.w	8003f64 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b46:	f003 0320 	and.w	r3, r3, #32
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00d      	beq.n	8003b6a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b52:	f003 0320 	and.w	r3, r3, #32
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d007      	beq.n	8003b6a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d003      	beq.n	8003b6a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b7e:	2b40      	cmp	r3, #64	; 0x40
 8003b80:	d005      	beq.n	8003b8e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003b82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b86:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d04f      	beq.n	8003c2e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 fe78 	bl	8004884 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b9e:	2b40      	cmp	r3, #64	; 0x40
 8003ba0:	d141      	bne.n	8003c26 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	3308      	adds	r3, #8
 8003ba8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003bb0:	e853 3f00 	ldrex	r3, [r3]
 8003bb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003bb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	3308      	adds	r3, #8
 8003bca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003bce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003bd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003bda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003bde:	e841 2300 	strex	r3, r2, [r1]
 8003be2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003be6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1d9      	bne.n	8003ba2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d013      	beq.n	8003c1e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bfa:	4a13      	ldr	r2, [pc, #76]	; (8003c48 <HAL_UART_IRQHandler+0x29c>)
 8003bfc:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fd f93b 	bl	8000e7e <HAL_DMA_Abort_IT>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d017      	beq.n	8003c3e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003c18:	4610      	mov	r0, r2
 8003c1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c1c:	e00f      	b.n	8003c3e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f9c8 	bl	8003fb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c24:	e00b      	b.n	8003c3e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f9c4 	bl	8003fb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c2c:	e007      	b.n	8003c3e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f9c0 	bl	8003fb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003c3c:	e192      	b.n	8003f64 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c3e:	bf00      	nop
    return;
 8003c40:	e190      	b.n	8003f64 <HAL_UART_IRQHandler+0x5b8>
 8003c42:	bf00      	nop
 8003c44:	04000120 	.word	0x04000120
 8003c48:	08004bdf 	.word	0x08004bdf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	f040 814b 	bne.w	8003eec <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c5a:	f003 0310 	and.w	r3, r3, #16
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 8144 	beq.w	8003eec <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c68:	f003 0310 	and.w	r3, r3, #16
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 813d 	beq.w	8003eec <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2210      	movs	r2, #16
 8003c78:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c84:	2b40      	cmp	r3, #64	; 0x40
 8003c86:	f040 80b5 	bne.w	8003df4 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c96:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f000 8164 	beq.w	8003f68 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003ca6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003caa:	429a      	cmp	r2, r3
 8003cac:	f080 815c 	bcs.w	8003f68 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cb6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	2b20      	cmp	r3, #32
 8003cc2:	f000 8086 	beq.w	8003dd2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cd2:	e853 3f00 	ldrex	r3, [r3]
 8003cd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003cda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ce2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	461a      	mov	r2, r3
 8003cec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003cf0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003cf4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003cfc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d00:	e841 2300 	strex	r3, r2, [r1]
 8003d04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1da      	bne.n	8003cc6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	3308      	adds	r3, #8
 8003d16:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d1a:	e853 3f00 	ldrex	r3, [r3]
 8003d1e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d22:	f023 0301 	bic.w	r3, r3, #1
 8003d26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	3308      	adds	r3, #8
 8003d30:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d34:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d38:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d3c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d40:	e841 2300 	strex	r3, r2, [r1]
 8003d44:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1e1      	bne.n	8003d10 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	3308      	adds	r3, #8
 8003d52:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d56:	e853 3f00 	ldrex	r3, [r3]
 8003d5a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	3308      	adds	r3, #8
 8003d6c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d70:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d72:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d74:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d76:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d78:	e841 2300 	strex	r3, r2, [r1]
 8003d7c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1e3      	bne.n	8003d4c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2220      	movs	r2, #32
 8003d88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d9a:	e853 3f00 	ldrex	r3, [r3]
 8003d9e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003da0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003da2:	f023 0310 	bic.w	r3, r3, #16
 8003da6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	461a      	mov	r2, r3
 8003db0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003db4:	65bb      	str	r3, [r7, #88]	; 0x58
 8003db6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003dba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003dbc:	e841 2300 	strex	r3, r2, [r1]
 8003dc0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1e4      	bne.n	8003d92 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7fd f818 	bl	8000e02 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	4619      	mov	r1, r3
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 f8eb 	bl	8003fc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003df2:	e0b9      	b.n	8003f68 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 80ab 	beq.w	8003f6c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003e16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f000 80a6 	beq.w	8003f6c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e28:	e853 3f00 	ldrex	r3, [r3]
 8003e2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e42:	647b      	str	r3, [r7, #68]	; 0x44
 8003e44:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e4a:	e841 2300 	strex	r3, r2, [r1]
 8003e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1e4      	bne.n	8003e20 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	3308      	adds	r3, #8
 8003e5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	e853 3f00 	ldrex	r3, [r3]
 8003e64:	623b      	str	r3, [r7, #32]
   return(result);
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	f023 0301 	bic.w	r3, r3, #1
 8003e6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	3308      	adds	r3, #8
 8003e76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e7a:	633a      	str	r2, [r7, #48]	; 0x30
 8003e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e82:	e841 2300 	strex	r3, r2, [r1]
 8003e86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1e3      	bne.n	8003e56 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2220      	movs	r2, #32
 8003e92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	e853 3f00 	ldrex	r3, [r3]
 8003eae:	60fb      	str	r3, [r7, #12]
   return(result);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f023 0310 	bic.w	r3, r3, #16
 8003eb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003ec4:	61fb      	str	r3, [r7, #28]
 8003ec6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec8:	69b9      	ldr	r1, [r7, #24]
 8003eca:	69fa      	ldr	r2, [r7, #28]
 8003ecc:	e841 2300 	strex	r3, r2, [r1]
 8003ed0:	617b      	str	r3, [r7, #20]
   return(result);
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1e4      	bne.n	8003ea2 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ede:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 f86f 	bl	8003fc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003eea:	e03f      	b.n	8003f6c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ef0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00e      	beq.n	8003f16 <HAL_UART_IRQHandler+0x56a>
 8003ef8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003efc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d008      	beq.n	8003f16 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003f0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 fea5 	bl	8004c5e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003f14:	e02d      	b.n	8003f72 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00e      	beq.n	8003f40 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003f22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d008      	beq.n	8003f40 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d01c      	beq.n	8003f70 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	4798      	blx	r3
    }
    return;
 8003f3e:	e017      	b.n	8003f70 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d012      	beq.n	8003f72 <HAL_UART_IRQHandler+0x5c6>
 8003f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00c      	beq.n	8003f72 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 fe56 	bl	8004c0a <UART_EndTransmit_IT>
    return;
 8003f5e:	e008      	b.n	8003f72 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003f60:	bf00      	nop
 8003f62:	e006      	b.n	8003f72 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003f64:	bf00      	nop
 8003f66:	e004      	b.n	8003f72 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003f68:	bf00      	nop
 8003f6a:	e002      	b.n	8003f72 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003f6c:	bf00      	nop
 8003f6e:	e000      	b.n	8003f72 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003f70:	bf00      	nop
  }

}
 8003f72:	37e8      	adds	r7, #232	; 0xe8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b088      	sub	sp, #32
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689a      	ldr	r2, [r3, #8]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	69db      	ldr	r3, [r3, #28]
 8004000:	4313      	orrs	r3, r2
 8004002:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	4b92      	ldr	r3, [pc, #584]	; (8004254 <UART_SetConfig+0x274>)
 800400c:	4013      	ands	r3, r2
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	6812      	ldr	r2, [r2, #0]
 8004012:	6979      	ldr	r1, [r7, #20]
 8004014:	430b      	orrs	r3, r1
 8004016:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68da      	ldr	r2, [r3, #12]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	430a      	orrs	r2, r1
 800402c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	4313      	orrs	r3, r2
 800403c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	430a      	orrs	r2, r1
 8004050:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a80      	ldr	r2, [pc, #512]	; (8004258 <UART_SetConfig+0x278>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d120      	bne.n	800409e <UART_SetConfig+0xbe>
 800405c:	4b7f      	ldr	r3, [pc, #508]	; (800425c <UART_SetConfig+0x27c>)
 800405e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004060:	f003 0303 	and.w	r3, r3, #3
 8004064:	2b03      	cmp	r3, #3
 8004066:	d817      	bhi.n	8004098 <UART_SetConfig+0xb8>
 8004068:	a201      	add	r2, pc, #4	; (adr r2, 8004070 <UART_SetConfig+0x90>)
 800406a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406e:	bf00      	nop
 8004070:	08004081 	.word	0x08004081
 8004074:	0800408d 	.word	0x0800408d
 8004078:	08004093 	.word	0x08004093
 800407c:	08004087 	.word	0x08004087
 8004080:	2301      	movs	r3, #1
 8004082:	77fb      	strb	r3, [r7, #31]
 8004084:	e0b5      	b.n	80041f2 <UART_SetConfig+0x212>
 8004086:	2302      	movs	r3, #2
 8004088:	77fb      	strb	r3, [r7, #31]
 800408a:	e0b2      	b.n	80041f2 <UART_SetConfig+0x212>
 800408c:	2304      	movs	r3, #4
 800408e:	77fb      	strb	r3, [r7, #31]
 8004090:	e0af      	b.n	80041f2 <UART_SetConfig+0x212>
 8004092:	2308      	movs	r3, #8
 8004094:	77fb      	strb	r3, [r7, #31]
 8004096:	e0ac      	b.n	80041f2 <UART_SetConfig+0x212>
 8004098:	2310      	movs	r3, #16
 800409a:	77fb      	strb	r3, [r7, #31]
 800409c:	e0a9      	b.n	80041f2 <UART_SetConfig+0x212>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a6f      	ldr	r2, [pc, #444]	; (8004260 <UART_SetConfig+0x280>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d124      	bne.n	80040f2 <UART_SetConfig+0x112>
 80040a8:	4b6c      	ldr	r3, [pc, #432]	; (800425c <UART_SetConfig+0x27c>)
 80040aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040b4:	d011      	beq.n	80040da <UART_SetConfig+0xfa>
 80040b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040ba:	d817      	bhi.n	80040ec <UART_SetConfig+0x10c>
 80040bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040c0:	d011      	beq.n	80040e6 <UART_SetConfig+0x106>
 80040c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040c6:	d811      	bhi.n	80040ec <UART_SetConfig+0x10c>
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d003      	beq.n	80040d4 <UART_SetConfig+0xf4>
 80040cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040d0:	d006      	beq.n	80040e0 <UART_SetConfig+0x100>
 80040d2:	e00b      	b.n	80040ec <UART_SetConfig+0x10c>
 80040d4:	2300      	movs	r3, #0
 80040d6:	77fb      	strb	r3, [r7, #31]
 80040d8:	e08b      	b.n	80041f2 <UART_SetConfig+0x212>
 80040da:	2302      	movs	r3, #2
 80040dc:	77fb      	strb	r3, [r7, #31]
 80040de:	e088      	b.n	80041f2 <UART_SetConfig+0x212>
 80040e0:	2304      	movs	r3, #4
 80040e2:	77fb      	strb	r3, [r7, #31]
 80040e4:	e085      	b.n	80041f2 <UART_SetConfig+0x212>
 80040e6:	2308      	movs	r3, #8
 80040e8:	77fb      	strb	r3, [r7, #31]
 80040ea:	e082      	b.n	80041f2 <UART_SetConfig+0x212>
 80040ec:	2310      	movs	r3, #16
 80040ee:	77fb      	strb	r3, [r7, #31]
 80040f0:	e07f      	b.n	80041f2 <UART_SetConfig+0x212>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a5b      	ldr	r2, [pc, #364]	; (8004264 <UART_SetConfig+0x284>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d124      	bne.n	8004146 <UART_SetConfig+0x166>
 80040fc:	4b57      	ldr	r3, [pc, #348]	; (800425c <UART_SetConfig+0x27c>)
 80040fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004100:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004104:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004108:	d011      	beq.n	800412e <UART_SetConfig+0x14e>
 800410a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800410e:	d817      	bhi.n	8004140 <UART_SetConfig+0x160>
 8004110:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004114:	d011      	beq.n	800413a <UART_SetConfig+0x15a>
 8004116:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800411a:	d811      	bhi.n	8004140 <UART_SetConfig+0x160>
 800411c:	2b00      	cmp	r3, #0
 800411e:	d003      	beq.n	8004128 <UART_SetConfig+0x148>
 8004120:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004124:	d006      	beq.n	8004134 <UART_SetConfig+0x154>
 8004126:	e00b      	b.n	8004140 <UART_SetConfig+0x160>
 8004128:	2300      	movs	r3, #0
 800412a:	77fb      	strb	r3, [r7, #31]
 800412c:	e061      	b.n	80041f2 <UART_SetConfig+0x212>
 800412e:	2302      	movs	r3, #2
 8004130:	77fb      	strb	r3, [r7, #31]
 8004132:	e05e      	b.n	80041f2 <UART_SetConfig+0x212>
 8004134:	2304      	movs	r3, #4
 8004136:	77fb      	strb	r3, [r7, #31]
 8004138:	e05b      	b.n	80041f2 <UART_SetConfig+0x212>
 800413a:	2308      	movs	r3, #8
 800413c:	77fb      	strb	r3, [r7, #31]
 800413e:	e058      	b.n	80041f2 <UART_SetConfig+0x212>
 8004140:	2310      	movs	r3, #16
 8004142:	77fb      	strb	r3, [r7, #31]
 8004144:	e055      	b.n	80041f2 <UART_SetConfig+0x212>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a47      	ldr	r2, [pc, #284]	; (8004268 <UART_SetConfig+0x288>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d124      	bne.n	800419a <UART_SetConfig+0x1ba>
 8004150:	4b42      	ldr	r3, [pc, #264]	; (800425c <UART_SetConfig+0x27c>)
 8004152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004154:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004158:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800415c:	d011      	beq.n	8004182 <UART_SetConfig+0x1a2>
 800415e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004162:	d817      	bhi.n	8004194 <UART_SetConfig+0x1b4>
 8004164:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004168:	d011      	beq.n	800418e <UART_SetConfig+0x1ae>
 800416a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800416e:	d811      	bhi.n	8004194 <UART_SetConfig+0x1b4>
 8004170:	2b00      	cmp	r3, #0
 8004172:	d003      	beq.n	800417c <UART_SetConfig+0x19c>
 8004174:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004178:	d006      	beq.n	8004188 <UART_SetConfig+0x1a8>
 800417a:	e00b      	b.n	8004194 <UART_SetConfig+0x1b4>
 800417c:	2300      	movs	r3, #0
 800417e:	77fb      	strb	r3, [r7, #31]
 8004180:	e037      	b.n	80041f2 <UART_SetConfig+0x212>
 8004182:	2302      	movs	r3, #2
 8004184:	77fb      	strb	r3, [r7, #31]
 8004186:	e034      	b.n	80041f2 <UART_SetConfig+0x212>
 8004188:	2304      	movs	r3, #4
 800418a:	77fb      	strb	r3, [r7, #31]
 800418c:	e031      	b.n	80041f2 <UART_SetConfig+0x212>
 800418e:	2308      	movs	r3, #8
 8004190:	77fb      	strb	r3, [r7, #31]
 8004192:	e02e      	b.n	80041f2 <UART_SetConfig+0x212>
 8004194:	2310      	movs	r3, #16
 8004196:	77fb      	strb	r3, [r7, #31]
 8004198:	e02b      	b.n	80041f2 <UART_SetConfig+0x212>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a33      	ldr	r2, [pc, #204]	; (800426c <UART_SetConfig+0x28c>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d124      	bne.n	80041ee <UART_SetConfig+0x20e>
 80041a4:	4b2d      	ldr	r3, [pc, #180]	; (800425c <UART_SetConfig+0x27c>)
 80041a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80041ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80041b0:	d011      	beq.n	80041d6 <UART_SetConfig+0x1f6>
 80041b2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80041b6:	d817      	bhi.n	80041e8 <UART_SetConfig+0x208>
 80041b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041bc:	d011      	beq.n	80041e2 <UART_SetConfig+0x202>
 80041be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041c2:	d811      	bhi.n	80041e8 <UART_SetConfig+0x208>
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d003      	beq.n	80041d0 <UART_SetConfig+0x1f0>
 80041c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041cc:	d006      	beq.n	80041dc <UART_SetConfig+0x1fc>
 80041ce:	e00b      	b.n	80041e8 <UART_SetConfig+0x208>
 80041d0:	2300      	movs	r3, #0
 80041d2:	77fb      	strb	r3, [r7, #31]
 80041d4:	e00d      	b.n	80041f2 <UART_SetConfig+0x212>
 80041d6:	2302      	movs	r3, #2
 80041d8:	77fb      	strb	r3, [r7, #31]
 80041da:	e00a      	b.n	80041f2 <UART_SetConfig+0x212>
 80041dc:	2304      	movs	r3, #4
 80041de:	77fb      	strb	r3, [r7, #31]
 80041e0:	e007      	b.n	80041f2 <UART_SetConfig+0x212>
 80041e2:	2308      	movs	r3, #8
 80041e4:	77fb      	strb	r3, [r7, #31]
 80041e6:	e004      	b.n	80041f2 <UART_SetConfig+0x212>
 80041e8:	2310      	movs	r3, #16
 80041ea:	77fb      	strb	r3, [r7, #31]
 80041ec:	e001      	b.n	80041f2 <UART_SetConfig+0x212>
 80041ee:	2310      	movs	r3, #16
 80041f0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041fa:	d16b      	bne.n	80042d4 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80041fc:	7ffb      	ldrb	r3, [r7, #31]
 80041fe:	2b08      	cmp	r3, #8
 8004200:	d838      	bhi.n	8004274 <UART_SetConfig+0x294>
 8004202:	a201      	add	r2, pc, #4	; (adr r2, 8004208 <UART_SetConfig+0x228>)
 8004204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004208:	0800422d 	.word	0x0800422d
 800420c:	08004235 	.word	0x08004235
 8004210:	0800423d 	.word	0x0800423d
 8004214:	08004275 	.word	0x08004275
 8004218:	08004243 	.word	0x08004243
 800421c:	08004275 	.word	0x08004275
 8004220:	08004275 	.word	0x08004275
 8004224:	08004275 	.word	0x08004275
 8004228:	0800424b 	.word	0x0800424b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800422c:	f7fe fb76 	bl	800291c <HAL_RCC_GetPCLK1Freq>
 8004230:	61b8      	str	r0, [r7, #24]
        break;
 8004232:	e024      	b.n	800427e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004234:	f7fe fb94 	bl	8002960 <HAL_RCC_GetPCLK2Freq>
 8004238:	61b8      	str	r0, [r7, #24]
        break;
 800423a:	e020      	b.n	800427e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800423c:	4b0c      	ldr	r3, [pc, #48]	; (8004270 <UART_SetConfig+0x290>)
 800423e:	61bb      	str	r3, [r7, #24]
        break;
 8004240:	e01d      	b.n	800427e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004242:	f7fe fb0b 	bl	800285c <HAL_RCC_GetSysClockFreq>
 8004246:	61b8      	str	r0, [r7, #24]
        break;
 8004248:	e019      	b.n	800427e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800424a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800424e:	61bb      	str	r3, [r7, #24]
        break;
 8004250:	e015      	b.n	800427e <UART_SetConfig+0x29e>
 8004252:	bf00      	nop
 8004254:	efff69f3 	.word	0xefff69f3
 8004258:	40013800 	.word	0x40013800
 800425c:	40021000 	.word	0x40021000
 8004260:	40004400 	.word	0x40004400
 8004264:	40004800 	.word	0x40004800
 8004268:	40004c00 	.word	0x40004c00
 800426c:	40005000 	.word	0x40005000
 8004270:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004274:	2300      	movs	r3, #0
 8004276:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	77bb      	strb	r3, [r7, #30]
        break;
 800427c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d073      	beq.n	800436c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	005a      	lsls	r2, r3, #1
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	085b      	lsrs	r3, r3, #1
 800428e:	441a      	add	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	fbb2 f3f3 	udiv	r3, r2, r3
 8004298:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	2b0f      	cmp	r3, #15
 800429e:	d916      	bls.n	80042ce <UART_SetConfig+0x2ee>
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042a6:	d212      	bcs.n	80042ce <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	f023 030f 	bic.w	r3, r3, #15
 80042b0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	085b      	lsrs	r3, r3, #1
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	f003 0307 	and.w	r3, r3, #7
 80042bc:	b29a      	uxth	r2, r3
 80042be:	89fb      	ldrh	r3, [r7, #14]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	89fa      	ldrh	r2, [r7, #14]
 80042ca:	60da      	str	r2, [r3, #12]
 80042cc:	e04e      	b.n	800436c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	77bb      	strb	r3, [r7, #30]
 80042d2:	e04b      	b.n	800436c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80042d4:	7ffb      	ldrb	r3, [r7, #31]
 80042d6:	2b08      	cmp	r3, #8
 80042d8:	d827      	bhi.n	800432a <UART_SetConfig+0x34a>
 80042da:	a201      	add	r2, pc, #4	; (adr r2, 80042e0 <UART_SetConfig+0x300>)
 80042dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e0:	08004305 	.word	0x08004305
 80042e4:	0800430d 	.word	0x0800430d
 80042e8:	08004315 	.word	0x08004315
 80042ec:	0800432b 	.word	0x0800432b
 80042f0:	0800431b 	.word	0x0800431b
 80042f4:	0800432b 	.word	0x0800432b
 80042f8:	0800432b 	.word	0x0800432b
 80042fc:	0800432b 	.word	0x0800432b
 8004300:	08004323 	.word	0x08004323
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004304:	f7fe fb0a 	bl	800291c <HAL_RCC_GetPCLK1Freq>
 8004308:	61b8      	str	r0, [r7, #24]
        break;
 800430a:	e013      	b.n	8004334 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800430c:	f7fe fb28 	bl	8002960 <HAL_RCC_GetPCLK2Freq>
 8004310:	61b8      	str	r0, [r7, #24]
        break;
 8004312:	e00f      	b.n	8004334 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004314:	4b1b      	ldr	r3, [pc, #108]	; (8004384 <UART_SetConfig+0x3a4>)
 8004316:	61bb      	str	r3, [r7, #24]
        break;
 8004318:	e00c      	b.n	8004334 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800431a:	f7fe fa9f 	bl	800285c <HAL_RCC_GetSysClockFreq>
 800431e:	61b8      	str	r0, [r7, #24]
        break;
 8004320:	e008      	b.n	8004334 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004326:	61bb      	str	r3, [r7, #24]
        break;
 8004328:	e004      	b.n	8004334 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800432a:	2300      	movs	r3, #0
 800432c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	77bb      	strb	r3, [r7, #30]
        break;
 8004332:	bf00      	nop
    }

    if (pclk != 0U)
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d018      	beq.n	800436c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	085a      	lsrs	r2, r3, #1
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	441a      	add	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	fbb2 f3f3 	udiv	r3, r2, r3
 800434c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	2b0f      	cmp	r3, #15
 8004352:	d909      	bls.n	8004368 <UART_SetConfig+0x388>
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800435a:	d205      	bcs.n	8004368 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	b29a      	uxth	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	60da      	str	r2, [r3, #12]
 8004366:	e001      	b.n	800436c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004378:	7fbb      	ldrb	r3, [r7, #30]
}
 800437a:	4618      	mov	r0, r3
 800437c:	3720      	adds	r7, #32
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	007a1200 	.word	0x007a1200

08004388 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004394:	f003 0308 	and.w	r3, r3, #8
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00a      	beq.n	80043b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00a      	beq.n	80043d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	430a      	orrs	r2, r1
 80043d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	f003 0302 	and.w	r3, r3, #2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00a      	beq.n	80043f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fa:	f003 0304 	and.w	r3, r3, #4
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00a      	beq.n	8004418 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	430a      	orrs	r2, r1
 8004416:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441c:	f003 0310 	and.w	r3, r3, #16
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00a      	beq.n	800443a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	430a      	orrs	r2, r1
 8004438:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	f003 0320 	and.w	r3, r3, #32
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00a      	beq.n	800445c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	430a      	orrs	r2, r1
 800445a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004464:	2b00      	cmp	r3, #0
 8004466:	d01a      	beq.n	800449e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	430a      	orrs	r2, r1
 800447c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004482:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004486:	d10a      	bne.n	800449e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00a      	beq.n	80044c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	605a      	str	r2, [r3, #4]
  }
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b098      	sub	sp, #96	; 0x60
 80044d0:	af02      	add	r7, sp, #8
 80044d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044dc:	f7fc face 	bl	8000a7c <HAL_GetTick>
 80044e0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0308 	and.w	r3, r3, #8
 80044ec:	2b08      	cmp	r3, #8
 80044ee:	d12e      	bne.n	800454e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044f4:	9300      	str	r3, [sp, #0]
 80044f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044f8:	2200      	movs	r2, #0
 80044fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f88c 	bl	800461c <UART_WaitOnFlagUntilTimeout>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d021      	beq.n	800454e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004512:	e853 3f00 	ldrex	r3, [r3]
 8004516:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800451a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800451e:	653b      	str	r3, [r7, #80]	; 0x50
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	461a      	mov	r2, r3
 8004526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004528:	647b      	str	r3, [r7, #68]	; 0x44
 800452a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800452e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004530:	e841 2300 	strex	r3, r2, [r1]
 8004534:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1e6      	bne.n	800450a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2220      	movs	r2, #32
 8004540:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e062      	b.n	8004614 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0304 	and.w	r3, r3, #4
 8004558:	2b04      	cmp	r3, #4
 800455a:	d149      	bne.n	80045f0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800455c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004560:	9300      	str	r3, [sp, #0]
 8004562:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004564:	2200      	movs	r2, #0
 8004566:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f856 	bl	800461c <UART_WaitOnFlagUntilTimeout>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d03c      	beq.n	80045f0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800457c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457e:	e853 3f00 	ldrex	r3, [r3]
 8004582:	623b      	str	r3, [r7, #32]
   return(result);
 8004584:	6a3b      	ldr	r3, [r7, #32]
 8004586:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800458a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	461a      	mov	r2, r3
 8004592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004594:	633b      	str	r3, [r7, #48]	; 0x30
 8004596:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004598:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800459a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800459c:	e841 2300 	strex	r3, r2, [r1]
 80045a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80045a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1e6      	bne.n	8004576 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	3308      	adds	r3, #8
 80045ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	e853 3f00 	ldrex	r3, [r3]
 80045b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f023 0301 	bic.w	r3, r3, #1
 80045be:	64bb      	str	r3, [r7, #72]	; 0x48
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	3308      	adds	r3, #8
 80045c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045c8:	61fa      	str	r2, [r7, #28]
 80045ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045cc:	69b9      	ldr	r1, [r7, #24]
 80045ce:	69fa      	ldr	r2, [r7, #28]
 80045d0:	e841 2300 	strex	r3, r2, [r1]
 80045d4:	617b      	str	r3, [r7, #20]
   return(result);
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1e5      	bne.n	80045a8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2220      	movs	r2, #32
 80045e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e011      	b.n	8004614 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2220      	movs	r2, #32
 80045f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2220      	movs	r2, #32
 80045fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3758      	adds	r7, #88	; 0x58
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	603b      	str	r3, [r7, #0]
 8004628:	4613      	mov	r3, r2
 800462a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800462c:	e04f      	b.n	80046ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004634:	d04b      	beq.n	80046ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004636:	f7fc fa21 	bl	8000a7c <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	429a      	cmp	r2, r3
 8004644:	d302      	bcc.n	800464c <UART_WaitOnFlagUntilTimeout+0x30>
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d101      	bne.n	8004650 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e04e      	b.n	80046ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0304 	and.w	r3, r3, #4
 800465a:	2b00      	cmp	r3, #0
 800465c:	d037      	beq.n	80046ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	2b80      	cmp	r3, #128	; 0x80
 8004662:	d034      	beq.n	80046ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	2b40      	cmp	r3, #64	; 0x40
 8004668:	d031      	beq.n	80046ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	69db      	ldr	r3, [r3, #28]
 8004670:	f003 0308 	and.w	r3, r3, #8
 8004674:	2b08      	cmp	r3, #8
 8004676:	d110      	bne.n	800469a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2208      	movs	r2, #8
 800467e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f000 f8ff 	bl	8004884 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2208      	movs	r2, #8
 800468a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e029      	b.n	80046ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	69db      	ldr	r3, [r3, #28]
 80046a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046a8:	d111      	bne.n	80046ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f000 f8e5 	bl	8004884 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2220      	movs	r2, #32
 80046be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e00f      	b.n	80046ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	69da      	ldr	r2, [r3, #28]
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	4013      	ands	r3, r2
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	429a      	cmp	r2, r3
 80046dc:	bf0c      	ite	eq
 80046de:	2301      	moveq	r3, #1
 80046e0:	2300      	movne	r3, #0
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	461a      	mov	r2, r3
 80046e6:	79fb      	ldrb	r3, [r7, #7]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d0a0      	beq.n	800462e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
	...

080046f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b096      	sub	sp, #88	; 0x58
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	4613      	mov	r3, r2
 8004704:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	68ba      	ldr	r2, [r7, #8]
 800470a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	88fa      	ldrh	r2, [r7, #6]
 8004710:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2222      	movs	r2, #34	; 0x22
 8004720:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004728:	2b00      	cmp	r3, #0
 800472a:	d028      	beq.n	800477e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004730:	4a3e      	ldr	r2, [pc, #248]	; (800482c <UART_Start_Receive_DMA+0x134>)
 8004732:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004738:	4a3d      	ldr	r2, [pc, #244]	; (8004830 <UART_Start_Receive_DMA+0x138>)
 800473a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004740:	4a3c      	ldr	r2, [pc, #240]	; (8004834 <UART_Start_Receive_DMA+0x13c>)
 8004742:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004748:	2200      	movs	r2, #0
 800474a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	3324      	adds	r3, #36	; 0x24
 8004756:	4619      	mov	r1, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800475c:	461a      	mov	r2, r3
 800475e:	88fb      	ldrh	r3, [r7, #6]
 8004760:	f7fc faf0 	bl	8000d44 <HAL_DMA_Start_IT>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d009      	beq.n	800477e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2210      	movs	r2, #16
 800476e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2220      	movs	r2, #32
 8004776:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e051      	b.n	8004822 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d018      	beq.n	80047b8 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800478e:	e853 3f00 	ldrex	r3, [r3]
 8004792:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800479a:	657b      	str	r3, [r7, #84]	; 0x54
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	461a      	mov	r2, r3
 80047a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80047a6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80047aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047ac:	e841 2300 	strex	r3, r2, [r1]
 80047b0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80047b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1e6      	bne.n	8004786 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	3308      	adds	r3, #8
 80047be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c2:	e853 3f00 	ldrex	r3, [r3]
 80047c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ca:	f043 0301 	orr.w	r3, r3, #1
 80047ce:	653b      	str	r3, [r7, #80]	; 0x50
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	3308      	adds	r3, #8
 80047d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80047d8:	637a      	str	r2, [r7, #52]	; 0x34
 80047da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047e0:	e841 2300 	strex	r3, r2, [r1]
 80047e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80047e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1e5      	bne.n	80047b8 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	3308      	adds	r3, #8
 80047f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	e853 3f00 	ldrex	r3, [r3]
 80047fa:	613b      	str	r3, [r7, #16]
   return(result);
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004802:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	3308      	adds	r3, #8
 800480a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800480c:	623a      	str	r2, [r7, #32]
 800480e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004810:	69f9      	ldr	r1, [r7, #28]
 8004812:	6a3a      	ldr	r2, [r7, #32]
 8004814:	e841 2300 	strex	r3, r2, [r1]
 8004818:	61bb      	str	r3, [r7, #24]
   return(result);
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1e5      	bne.n	80047ec <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3758      	adds	r7, #88	; 0x58
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	080049fd 	.word	0x080049fd
 8004830:	08004b23 	.word	0x08004b23
 8004834:	08004b61 	.word	0x08004b61

08004838 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004838:	b480      	push	{r7}
 800483a:	b089      	sub	sp, #36	; 0x24
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	e853 3f00 	ldrex	r3, [r3]
 800484c:	60bb      	str	r3, [r7, #8]
   return(result);
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004854:	61fb      	str	r3, [r7, #28]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	461a      	mov	r2, r3
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	61bb      	str	r3, [r7, #24]
 8004860:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004862:	6979      	ldr	r1, [r7, #20]
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	e841 2300 	strex	r3, r2, [r1]
 800486a:	613b      	str	r3, [r7, #16]
   return(result);
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1e6      	bne.n	8004840 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2220      	movs	r2, #32
 8004876:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8004878:	bf00      	nop
 800487a:	3724      	adds	r7, #36	; 0x24
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004884:	b480      	push	{r7}
 8004886:	b095      	sub	sp, #84	; 0x54
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004894:	e853 3f00 	ldrex	r3, [r3]
 8004898:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800489a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	461a      	mov	r2, r3
 80048a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048aa:	643b      	str	r3, [r7, #64]	; 0x40
 80048ac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048b2:	e841 2300 	strex	r3, r2, [r1]
 80048b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1e6      	bne.n	800488c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	3308      	adds	r3, #8
 80048c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c6:	6a3b      	ldr	r3, [r7, #32]
 80048c8:	e853 3f00 	ldrex	r3, [r3]
 80048cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	f023 0301 	bic.w	r3, r3, #1
 80048d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	3308      	adds	r3, #8
 80048dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048e6:	e841 2300 	strex	r3, r2, [r1]
 80048ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1e5      	bne.n	80048be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d118      	bne.n	800492c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	e853 3f00 	ldrex	r3, [r3]
 8004906:	60bb      	str	r3, [r7, #8]
   return(result);
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	f023 0310 	bic.w	r3, r3, #16
 800490e:	647b      	str	r3, [r7, #68]	; 0x44
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	461a      	mov	r2, r3
 8004916:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004918:	61bb      	str	r3, [r7, #24]
 800491a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491c:	6979      	ldr	r1, [r7, #20]
 800491e:	69ba      	ldr	r2, [r7, #24]
 8004920:	e841 2300 	strex	r3, r2, [r1]
 8004924:	613b      	str	r3, [r7, #16]
   return(result);
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1e6      	bne.n	80048fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2220      	movs	r2, #32
 8004930:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004940:	bf00      	nop
 8004942:	3754      	adds	r7, #84	; 0x54
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b090      	sub	sp, #64	; 0x40
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004958:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	2b20      	cmp	r3, #32
 8004960:	d037      	beq.n	80049d2 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8004962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004964:	2200      	movs	r2, #0
 8004966:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800496a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	3308      	adds	r3, #8
 8004970:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004974:	e853 3f00 	ldrex	r3, [r3]
 8004978:	623b      	str	r3, [r7, #32]
   return(result);
 800497a:	6a3b      	ldr	r3, [r7, #32]
 800497c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004980:	63bb      	str	r3, [r7, #56]	; 0x38
 8004982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	3308      	adds	r3, #8
 8004988:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800498a:	633a      	str	r2, [r7, #48]	; 0x30
 800498c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004992:	e841 2300 	strex	r3, r2, [r1]
 8004996:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1e5      	bne.n	800496a <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800499e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	e853 3f00 	ldrex	r3, [r3]
 80049aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049b2:	637b      	str	r3, [r7, #52]	; 0x34
 80049b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	461a      	mov	r2, r3
 80049ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049bc:	61fb      	str	r3, [r7, #28]
 80049be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c0:	69b9      	ldr	r1, [r7, #24]
 80049c2:	69fa      	ldr	r2, [r7, #28]
 80049c4:	e841 2300 	strex	r3, r2, [r1]
 80049c8:	617b      	str	r3, [r7, #20]
   return(result);
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1e6      	bne.n	800499e <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80049d0:	e002      	b.n	80049d8 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 80049d2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80049d4:	f7ff fad0 	bl	8003f78 <HAL_UART_TxCpltCallback>
}
 80049d8:	bf00      	nop
 80049da:	3740      	adds	r7, #64	; 0x40
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f7ff facc 	bl	8003f8c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049f4:	bf00      	nop
 80049f6:	3710      	adds	r7, #16
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b09c      	sub	sp, #112	; 0x70
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a08:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	2b20      	cmp	r3, #32
 8004a10:	d071      	beq.n	8004af6 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8004a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a14:	2200      	movs	r2, #0
 8004a16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a22:	e853 3f00 	ldrex	r3, [r3]
 8004a26:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	461a      	mov	r2, r3
 8004a36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a38:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a3a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a40:	e841 2300 	strex	r3, r2, [r1]
 8004a44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1e6      	bne.n	8004a1a <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	3308      	adds	r3, #8
 8004a52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a56:	e853 3f00 	ldrex	r3, [r3]
 8004a5a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a5e:	f023 0301 	bic.w	r3, r3, #1
 8004a62:	667b      	str	r3, [r7, #100]	; 0x64
 8004a64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	3308      	adds	r3, #8
 8004a6a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004a6c:	647a      	str	r2, [r7, #68]	; 0x44
 8004a6e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a74:	e841 2300 	strex	r3, r2, [r1]
 8004a78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1e5      	bne.n	8004a4c <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	3308      	adds	r3, #8
 8004a86:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8a:	e853 3f00 	ldrex	r3, [r3]
 8004a8e:	623b      	str	r3, [r7, #32]
   return(result);
 8004a90:	6a3b      	ldr	r3, [r7, #32]
 8004a92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a96:	663b      	str	r3, [r7, #96]	; 0x60
 8004a98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	3308      	adds	r3, #8
 8004a9e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004aa0:	633a      	str	r2, [r7, #48]	; 0x30
 8004aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004aa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aa8:	e841 2300 	strex	r3, r2, [r1]
 8004aac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1e5      	bne.n	8004a80 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ab4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004abe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d118      	bne.n	8004af6 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	e853 3f00 	ldrex	r3, [r3]
 8004ad0:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f023 0310 	bic.w	r3, r3, #16
 8004ad8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ae2:	61fb      	str	r3, [r7, #28]
 8004ae4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae6:	69b9      	ldr	r1, [r7, #24]
 8004ae8:	69fa      	ldr	r2, [r7, #28]
 8004aea:	e841 2300 	strex	r3, r2, [r1]
 8004aee:	617b      	str	r3, [r7, #20]
   return(result);
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1e6      	bne.n	8004ac4 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004af8:	2200      	movs	r2, #0
 8004afa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d107      	bne.n	8004b14 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b06:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004b0e:	f7ff fa5b 	bl	8003fc8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004b12:	e002      	b.n	8004b1a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004b14:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004b16:	f000 fb4b 	bl	80051b0 <HAL_UART_RxCpltCallback>
}
 8004b1a:	bf00      	nop
 8004b1c:	3770      	adds	r7, #112	; 0x70
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b084      	sub	sp, #16
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2201      	movs	r2, #1
 8004b34:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d109      	bne.n	8004b52 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004b44:	085b      	lsrs	r3, r3, #1
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	4619      	mov	r1, r3
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f7ff fa3c 	bl	8003fc8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004b50:	e002      	b.n	8004b58 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f7ff fa24 	bl	8003fa0 <HAL_UART_RxHalfCpltCallback>
}
 8004b58:	bf00      	nop
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b72:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b7a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b86:	2b80      	cmp	r3, #128	; 0x80
 8004b88:	d109      	bne.n	8004b9e <UART_DMAError+0x3e>
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	2b21      	cmp	r3, #33	; 0x21
 8004b8e:	d106      	bne.n	8004b9e <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8004b98:	6978      	ldr	r0, [r7, #20]
 8004b9a:	f7ff fe4d 	bl	8004838 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba8:	2b40      	cmp	r3, #64	; 0x40
 8004baa:	d109      	bne.n	8004bc0 <UART_DMAError+0x60>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2b22      	cmp	r3, #34	; 0x22
 8004bb0:	d106      	bne.n	8004bc0 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8004bba:	6978      	ldr	r0, [r7, #20]
 8004bbc:	f7ff fe62 	bl	8004884 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bc6:	f043 0210 	orr.w	r2, r3, #16
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004bd0:	6978      	ldr	r0, [r7, #20]
 8004bd2:	f7ff f9ef 	bl	8003fb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bd6:	bf00      	nop
 8004bd8:	3718      	adds	r7, #24
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b084      	sub	sp, #16
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f7ff f9d9 	bl	8003fb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c02:	bf00      	nop
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}

08004c0a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b088      	sub	sp, #32
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	e853 3f00 	ldrex	r3, [r3]
 8004c1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c26:	61fb      	str	r3, [r7, #28]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	61bb      	str	r3, [r7, #24]
 8004c32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c34:	6979      	ldr	r1, [r7, #20]
 8004c36:	69ba      	ldr	r2, [r7, #24]
 8004c38:	e841 2300 	strex	r3, r2, [r1]
 8004c3c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1e6      	bne.n	8004c12 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2220      	movs	r2, #32
 8004c48:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f7ff f991 	bl	8003f78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c56:	bf00      	nop
 8004c58:	3720      	adds	r7, #32
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004c5e:	b480      	push	{r7}
 8004c60:	b083      	sub	sp, #12
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004c66:	bf00      	nop
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <setConditionsFor>:
uint32_t cntWaitOTPWriteStatusFlags;

extern TIM_HandleTypeDef htim1;

void setConditionsFor(uint8_t modeOtpOrReadEnc)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b083      	sub	sp, #12
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	4603      	mov	r3, r0
 8004c7a:	71fb      	strb	r3, [r7, #7]
	}
	else
	{
		//TODO - disable 7V output to VPP pin; ALIGN, PWRDOWN – Set Low, PROG – Set Low
	}
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <getEncVal>:

void getEncVal( void )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
	uint8_t encResolutionOTPVal = (OTPData[9]<<1) + OTPData[8]; //bits 9 and 8 contain the resolution configuration
 8004c8e:	4b1d      	ldr	r3, [pc, #116]	; (8004d04 <getEncVal+0x7c>)
 8004c90:	7a5b      	ldrb	r3, [r3, #9]
 8004c92:	005b      	lsls	r3, r3, #1
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	4b1b      	ldr	r3, [pc, #108]	; (8004d04 <getEncVal+0x7c>)
 8004c98:	7a1b      	ldrb	r3, [r3, #8]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	71fb      	strb	r3, [r7, #7]
	setConditionsFor(eReadEncVal);
 8004c9e:	2001      	movs	r0, #1
 8004ca0:	f7ff ffe7 	bl	8004c72 <setConditionsFor>
	ssiMode = read;
 8004ca4:	4b18      	ldr	r3, [pc, #96]	; (8004d08 <getEncVal+0x80>)
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	701a      	strb	r2, [r3, #0]

	cOtpClk = &otpData[ssiMode][0][0];
 8004caa:	4b17      	ldr	r3, [pc, #92]	; (8004d08 <getEncVal+0x80>)
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	461a      	mov	r2, r3
 8004cb0:	2392      	movs	r3, #146	; 0x92
 8004cb2:	fb02 f303 	mul.w	r3, r2, r3
 8004cb6:	4a15      	ldr	r2, [pc, #84]	; (8004d0c <getEncVal+0x84>)
 8004cb8:	4413      	add	r3, r2
 8004cba:	4a15      	ldr	r2, [pc, #84]	; (8004d10 <getEncVal+0x88>)
 8004cbc:	6013      	str	r3, [r2, #0]
	cOtpData = &otpData[ssiMode][1][0];
 8004cbe:	4b12      	ldr	r3, [pc, #72]	; (8004d08 <getEncVal+0x80>)
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	2392      	movs	r3, #146	; 0x92
 8004cc6:	fb02 f303 	mul.w	r3, r2, r3
 8004cca:	3349      	adds	r3, #73	; 0x49
 8004ccc:	4a0f      	ldr	r2, [pc, #60]	; (8004d0c <getEncVal+0x84>)
 8004cce:	4413      	add	r3, r2
 8004cd0:	4a10      	ldr	r2, [pc, #64]	; (8004d14 <getEncVal+0x8c>)
 8004cd2:	6013      	str	r3, [r2, #0]
	ssiClkEdgesNb = encResolution[encResolutionOTPVal]*2u;
 8004cd4:	79fb      	ldrb	r3, [r7, #7]
 8004cd6:	4a10      	ldr	r2, [pc, #64]	; (8004d18 <getEncVal+0x90>)
 8004cd8:	5cd3      	ldrb	r3, [r2, r3]
 8004cda:	005b      	lsls	r3, r3, #1
 8004cdc:	b2da      	uxtb	r2, r3
 8004cde:	4b0f      	ldr	r3, [pc, #60]	; (8004d1c <getEncVal+0x94>)
 8004ce0:	701a      	strb	r2, [r3, #0]

	fWaitSSITransfer  = 1u;
 8004ce2:	4b0f      	ldr	r3, [pc, #60]	; (8004d20 <getEncVal+0x98>)
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, ssiNCS_Pin, GPIO_PIN_RESET);
 8004ce8:	2200      	movs	r2, #0
 8004cea:	2120      	movs	r1, #32
 8004cec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004cf0:	f7fc fbb2 	bl	8001458 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim1);
 8004cf4:	480b      	ldr	r0, [pc, #44]	; (8004d24 <getEncVal+0x9c>)
 8004cf6:	f7fe f8cb 	bl	8002e90 <HAL_TIM_Base_Start_IT>

}
 8004cfa:	bf00      	nop
 8004cfc:	3708      	adds	r7, #8
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	200006dc 	.word	0x200006dc
 8004d08:	20000b0b 	.word	0x20000b0b
 8004d0c:	2000000c 	.word	0x2000000c
 8004d10:	20000b0c 	.word	0x20000b0c
 8004d14:	20000b10 	.word	0x20000b10
 8004d18:	20000534 	.word	0x20000534
 8004d1c:	20000b14 	.word	0x20000b14
 8004d20:	20000b16 	.word	0x20000b16
 8004d24:	2000055c 	.word	0x2000055c

08004d28 <getOTPVal>:

void getOTPVal( void )
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	af00      	add	r7, sp, #0
	setConditionsFor(eReadEncVal);
 8004d2c:	2001      	movs	r0, #1
 8004d2e:	f7ff ffa0 	bl	8004c72 <setConditionsFor>
	ssiMode = read;
 8004d32:	4b14      	ldr	r3, [pc, #80]	; (8004d84 <getOTPVal+0x5c>)
 8004d34:	2200      	movs	r2, #0
 8004d36:	701a      	strb	r2, [r3, #0]

	cOtpClk = &otpData[ssiMode][0][0];
 8004d38:	4b12      	ldr	r3, [pc, #72]	; (8004d84 <getOTPVal+0x5c>)
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	2392      	movs	r3, #146	; 0x92
 8004d40:	fb02 f303 	mul.w	r3, r2, r3
 8004d44:	4a10      	ldr	r2, [pc, #64]	; (8004d88 <getOTPVal+0x60>)
 8004d46:	4413      	add	r3, r2
 8004d48:	4a10      	ldr	r2, [pc, #64]	; (8004d8c <getOTPVal+0x64>)
 8004d4a:	6013      	str	r3, [r2, #0]
	cOtpData = &otpData[ssiMode][1][0];
 8004d4c:	4b0d      	ldr	r3, [pc, #52]	; (8004d84 <getOTPVal+0x5c>)
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	461a      	mov	r2, r3
 8004d52:	2392      	movs	r3, #146	; 0x92
 8004d54:	fb02 f303 	mul.w	r3, r2, r3
 8004d58:	3349      	adds	r3, #73	; 0x49
 8004d5a:	4a0b      	ldr	r2, [pc, #44]	; (8004d88 <getOTPVal+0x60>)
 8004d5c:	4413      	add	r3, r2
 8004d5e:	4a0c      	ldr	r2, [pc, #48]	; (8004d90 <getOTPVal+0x68>)
 8004d60:	6013      	str	r3, [r2, #0]
	ssiClkEdgesNb = NB_OF_CLK_EDGES;
 8004d62:	4b0c      	ldr	r3, [pc, #48]	; (8004d94 <getOTPVal+0x6c>)
 8004d64:	2247      	movs	r2, #71	; 0x47
 8004d66:	701a      	strb	r2, [r3, #0]

	fWaitSSITransfer  = 1u;
 8004d68:	4b0b      	ldr	r3, [pc, #44]	; (8004d98 <getOTPVal+0x70>)
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, ssiNCS_Pin, GPIO_PIN_RESET);
 8004d6e:	2200      	movs	r2, #0
 8004d70:	2120      	movs	r1, #32
 8004d72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d76:	f7fc fb6f 	bl	8001458 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim1);
 8004d7a:	4808      	ldr	r0, [pc, #32]	; (8004d9c <getOTPVal+0x74>)
 8004d7c:	f7fe f888 	bl	8002e90 <HAL_TIM_Base_Start_IT>
}
 8004d80:	bf00      	nop
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	20000b0b 	.word	0x20000b0b
 8004d88:	2000000c 	.word	0x2000000c
 8004d8c:	20000b0c 	.word	0x20000b0c
 8004d90:	20000b10 	.word	0x20000b10
 8004d94:	20000b14 	.word	0x20000b14
 8004d98:	20000b16 	.word	0x20000b16
 8004d9c:	2000055c 	.word	0x2000055c

08004da0 <setOTPField>:

void setOTPField( void )
{
 8004da0:	b480      	push	{r7}
 8004da2:	af00      	add	r7, sp, #0
	//TODO - check the value passed after option name: so and update the otpData[1] buffer and menuOTPDescr with the values

}
 8004da4:	bf00      	nop
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
	...

08004db0 <programOTPData>:

void programOTPData( void)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
	setConditionsFor(eProgOTP);
 8004db4:	2000      	movs	r0, #0
 8004db6:	f7ff ff5c 	bl	8004c72 <setConditionsFor>
	ssiMode = write;
 8004dba:	4b16      	ldr	r3, [pc, #88]	; (8004e14 <programOTPData+0x64>)
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	701a      	strb	r2, [r3, #0]

	cOtpClk = &otpData[ssiMode][0][0];
 8004dc0:	4b14      	ldr	r3, [pc, #80]	; (8004e14 <programOTPData+0x64>)
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	2392      	movs	r3, #146	; 0x92
 8004dc8:	fb02 f303 	mul.w	r3, r2, r3
 8004dcc:	4a12      	ldr	r2, [pc, #72]	; (8004e18 <programOTPData+0x68>)
 8004dce:	4413      	add	r3, r2
 8004dd0:	4a12      	ldr	r2, [pc, #72]	; (8004e1c <programOTPData+0x6c>)
 8004dd2:	6013      	str	r3, [r2, #0]
	cOtpData = &otpData[ssiMode][1][0];
 8004dd4:	4b0f      	ldr	r3, [pc, #60]	; (8004e14 <programOTPData+0x64>)
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	461a      	mov	r2, r3
 8004dda:	2392      	movs	r3, #146	; 0x92
 8004ddc:	fb02 f303 	mul.w	r3, r2, r3
 8004de0:	3349      	adds	r3, #73	; 0x49
 8004de2:	4a0d      	ldr	r2, [pc, #52]	; (8004e18 <programOTPData+0x68>)
 8004de4:	4413      	add	r3, r2
 8004de6:	4a0e      	ldr	r2, [pc, #56]	; (8004e20 <programOTPData+0x70>)
 8004de8:	6013      	str	r3, [r2, #0]
	ssiClkEdgesNb = NB_OF_CLK_EDGES;
 8004dea:	4b0e      	ldr	r3, [pc, #56]	; (8004e24 <programOTPData+0x74>)
 8004dec:	2247      	movs	r2, #71	; 0x47
 8004dee:	701a      	strb	r2, [r3, #0]

	fWaitSSITransfer  = 1u;
 8004df0:	4b0d      	ldr	r3, [pc, #52]	; (8004e28 <programOTPData+0x78>)
 8004df2:	2201      	movs	r2, #1
 8004df4:	701a      	strb	r2, [r3, #0]
	cntWaitOTPWriteStatusFlags = 1000u;
 8004df6:	4b0d      	ldr	r3, [pc, #52]	; (8004e2c <programOTPData+0x7c>)
 8004df8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004dfc:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, ssiNCS_Pin, GPIO_PIN_RESET);
 8004dfe:	2200      	movs	r2, #0
 8004e00:	2120      	movs	r1, #32
 8004e02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e06:	f7fc fb27 	bl	8001458 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim1);
 8004e0a:	4809      	ldr	r0, [pc, #36]	; (8004e30 <programOTPData+0x80>)
 8004e0c:	f7fe f840 	bl	8002e90 <HAL_TIM_Base_Start_IT>
}
 8004e10:	bf00      	nop
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	20000b0b 	.word	0x20000b0b
 8004e18:	2000000c 	.word	0x2000000c
 8004e1c:	20000b0c 	.word	0x20000b0c
 8004e20:	20000b10 	.word	0x20000b10
 8004e24:	20000b14 	.word	0x20000b14
 8004e28:	20000b16 	.word	0x20000b16
 8004e2c:	20000b1c 	.word	0x20000b1c
 8004e30:	2000055c 	.word	0x2000055c

08004e34 <prepareMenu>:

uint16_t prepareMenu( void ) {
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
	uint16_t lIdx = 0u;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	80fb      	strh	r3, [r7, #6]
	uint16_t lIdxuMenu = 0u;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	80bb      	strh	r3, [r7, #4]
	uint8_t lMenuItem = 0u;
 8004e42:	2300      	movs	r3, #0
 8004e44:	70fb      	strb	r3, [r7, #3]

	//TODO update actual OTP data according to the received data from device via SSI interface
	//TODO update the preset OTP data according to the values set via UART interface

	//copy OTP description
	for (/*lIdx already initialized above*/;lIdxuMenu<sizeof(menuOTPDescr); lIdxuMenu++)
 8004e46:	e008      	b.n	8004e5a <prepareMenu+0x26>
	{
		uartMenu[lIdxuMenu] = menuOTPDescr[lIdxuMenu];
 8004e48:	88ba      	ldrh	r2, [r7, #4]
 8004e4a:	88bb      	ldrh	r3, [r7, #4]
 8004e4c:	4924      	ldr	r1, [pc, #144]	; (8004ee0 <prepareMenu+0xac>)
 8004e4e:	5c89      	ldrb	r1, [r1, r2]
 8004e50:	4a24      	ldr	r2, [pc, #144]	; (8004ee4 <prepareMenu+0xb0>)
 8004e52:	54d1      	strb	r1, [r2, r3]
	for (/*lIdx already initialized above*/;lIdxuMenu<sizeof(menuOTPDescr); lIdxuMenu++)
 8004e54:	88bb      	ldrh	r3, [r7, #4]
 8004e56:	3301      	adds	r3, #1
 8004e58:	80bb      	strh	r3, [r7, #4]
 8004e5a:	88bb      	ldrh	r3, [r7, #4]
 8004e5c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d9f1      	bls.n	8004e48 <prepareMenu+0x14>
	}

	//copy Menu items
    for (/*lMenuItem initialized above*/;lMenuItem<  menuSize; lMenuItem++) {
 8004e64:	e01d      	b.n	8004ea2 <prepareMenu+0x6e>
    	for (lIdx = 0u; lIdx<sizeof(menu[lMenuItem].helpText); lIdx++)
 8004e66:	2300      	movs	r3, #0
 8004e68:	80fb      	strh	r3, [r7, #6]
 8004e6a:	e014      	b.n	8004e96 <prepareMenu+0x62>
    	{
    		uartMenu[lIdxuMenu] = menu[lMenuItem].helpText[lIdx];
 8004e6c:	78fa      	ldrb	r2, [r7, #3]
 8004e6e:	491e      	ldr	r1, [pc, #120]	; (8004ee8 <prepareMenu+0xb4>)
 8004e70:	4613      	mov	r3, r2
 8004e72:	005b      	lsls	r3, r3, #1
 8004e74:	4413      	add	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	440b      	add	r3, r1
 8004e7a:	3304      	adds	r3, #4
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	88fb      	ldrh	r3, [r7, #6]
 8004e80:	441a      	add	r2, r3
 8004e82:	88bb      	ldrh	r3, [r7, #4]
 8004e84:	7811      	ldrb	r1, [r2, #0]
 8004e86:	4a17      	ldr	r2, [pc, #92]	; (8004ee4 <prepareMenu+0xb0>)
 8004e88:	54d1      	strb	r1, [r2, r3]
    		lIdxuMenu++;
 8004e8a:	88bb      	ldrh	r3, [r7, #4]
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	80bb      	strh	r3, [r7, #4]
    	for (lIdx = 0u; lIdx<sizeof(menu[lMenuItem].helpText); lIdx++)
 8004e90:	88fb      	ldrh	r3, [r7, #6]
 8004e92:	3301      	adds	r3, #1
 8004e94:	80fb      	strh	r3, [r7, #6]
 8004e96:	88fb      	ldrh	r3, [r7, #6]
 8004e98:	2b03      	cmp	r3, #3
 8004e9a:	d9e7      	bls.n	8004e6c <prepareMenu+0x38>
    for (/*lMenuItem initialized above*/;lMenuItem<  menuSize; lMenuItem++) {
 8004e9c:	78fb      	ldrb	r3, [r7, #3]
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	70fb      	strb	r3, [r7, #3]
 8004ea2:	4b12      	ldr	r3, [pc, #72]	; (8004eec <prepareMenu+0xb8>)
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	78fa      	ldrb	r2, [r7, #3]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d3dc      	bcc.n	8004e66 <prepareMenu+0x32>
    	}
    }

	for (lIdx=0u; lIdx<sizeof(mPrompt); lIdx++)
 8004eac:	2300      	movs	r3, #0
 8004eae:	80fb      	strh	r3, [r7, #6]
 8004eb0:	e00b      	b.n	8004eca <prepareMenu+0x96>
	{
		uartMenu[lIdxuMenu] = mPrompt[lIdx];
 8004eb2:	88fa      	ldrh	r2, [r7, #6]
 8004eb4:	88bb      	ldrh	r3, [r7, #4]
 8004eb6:	490e      	ldr	r1, [pc, #56]	; (8004ef0 <prepareMenu+0xbc>)
 8004eb8:	5c89      	ldrb	r1, [r1, r2]
 8004eba:	4a0a      	ldr	r2, [pc, #40]	; (8004ee4 <prepareMenu+0xb0>)
 8004ebc:	54d1      	strb	r1, [r2, r3]
		lIdxuMenu++;
 8004ebe:	88bb      	ldrh	r3, [r7, #4]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	80bb      	strh	r3, [r7, #4]
	for (lIdx=0u; lIdx<sizeof(mPrompt); lIdx++)
 8004ec4:	88fb      	ldrh	r3, [r7, #6]
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	80fb      	strh	r3, [r7, #6]
 8004eca:	88fb      	ldrh	r3, [r7, #6]
 8004ecc:	2b04      	cmp	r3, #4
 8004ece:	d9f0      	bls.n	8004eb2 <prepareMenu+0x7e>
	}

	return lIdxuMenu;
 8004ed0:	88bb      	ldrh	r3, [r7, #4]

}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	20000130 	.word	0x20000130
 8004ee4:	20000708 	.word	0x20000708
 8004ee8:	20000504 	.word	0x20000504
 8004eec:	20000706 	.word	0x20000706
 8004ef0:	20000538 	.word	0x20000538

08004ef4 <processChoice>:

void processChoice(uint8_t choice[]) {
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
	uint8_t lIdx = 0u;
 8004efc:	2300      	movs	r3, #0
 8004efe:	73fb      	strb	r3, [r7, #15]
	uint8_t lMenuItem = 0u;
 8004f00:	2300      	movs	r3, #0
 8004f02:	73bb      	strb	r3, [r7, #14]
	uint8_t lFound = 0u;
 8004f04:	2300      	movs	r3, #0
 8004f06:	737b      	strb	r3, [r7, #13]

	for (/*lMenuItem initialized above*/;lMenuItem<  menuSize; lMenuItem++)
 8004f08:	e02d      	b.n	8004f66 <processChoice+0x72>
	{
		lFound = 1u;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	737b      	strb	r3, [r7, #13]
		for (lIdx = 0u; lIdx<sizeof(menu[lMenuItem].optionName); lIdx++)
 8004f0e:	2300      	movs	r3, #0
 8004f10:	73fb      	strb	r3, [r7, #15]
 8004f12:	e015      	b.n	8004f40 <processChoice+0x4c>
		{
			if (choice[lIdx] != menu[lMenuItem].optionName[lIdx])
 8004f14:	7bfb      	ldrb	r3, [r7, #15]
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	4413      	add	r3, r2
 8004f1a:	7819      	ldrb	r1, [r3, #0]
 8004f1c:	7bba      	ldrb	r2, [r7, #14]
 8004f1e:	4817      	ldr	r0, [pc, #92]	; (8004f7c <processChoice+0x88>)
 8004f20:	4613      	mov	r3, r2
 8004f22:	005b      	lsls	r3, r3, #1
 8004f24:	4413      	add	r3, r2
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	4403      	add	r3, r0
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	7bfb      	ldrb	r3, [r7, #15]
 8004f2e:	4413      	add	r3, r2
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	4299      	cmp	r1, r3
 8004f34:	d001      	beq.n	8004f3a <processChoice+0x46>
			{
				lFound = 0u;
 8004f36:	2300      	movs	r3, #0
 8004f38:	737b      	strb	r3, [r7, #13]
		for (lIdx = 0u; lIdx<sizeof(menu[lMenuItem].optionName); lIdx++)
 8004f3a:	7bfb      	ldrb	r3, [r7, #15]
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	73fb      	strb	r3, [r7, #15]
 8004f40:	7bfb      	ldrb	r3, [r7, #15]
 8004f42:	2b03      	cmp	r3, #3
 8004f44:	d9e6      	bls.n	8004f14 <processChoice+0x20>
			}
		}

		if ( 0u != lFound )
 8004f46:	7b7b      	ldrb	r3, [r7, #13]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d009      	beq.n	8004f60 <processChoice+0x6c>
		{
			menu[lMenuItem].action();
 8004f4c:	7bba      	ldrb	r2, [r7, #14]
 8004f4e:	490b      	ldr	r1, [pc, #44]	; (8004f7c <processChoice+0x88>)
 8004f50:	4613      	mov	r3, r2
 8004f52:	005b      	lsls	r3, r3, #1
 8004f54:	4413      	add	r3, r2
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	440b      	add	r3, r1
 8004f5a:	3308      	adds	r3, #8
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4798      	blx	r3
	for (/*lMenuItem initialized above*/;lMenuItem<  menuSize; lMenuItem++)
 8004f60:	7bbb      	ldrb	r3, [r7, #14]
 8004f62:	3301      	adds	r3, #1
 8004f64:	73bb      	strb	r3, [r7, #14]
 8004f66:	4b06      	ldr	r3, [pc, #24]	; (8004f80 <processChoice+0x8c>)
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	7bba      	ldrb	r2, [r7, #14]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d3cc      	bcc.n	8004f0a <processChoice+0x16>
		}
	}
}
 8004f70:	bf00      	nop
 8004f72:	bf00      	nop
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	20000504 	.word	0x20000504
 8004f80:	20000706 	.word	0x20000706

08004f84 <uInit>:

void uInit( void )
{
 8004f84:	b480      	push	{r7}
 8004f86:	af00      	add	r7, sp, #0
	menuSize = 4u;
 8004f88:	4b0f      	ldr	r3, [pc, #60]	; (8004fc8 <uInit+0x44>)
 8004f8a:	2204      	movs	r2, #4
 8004f8c:	701a      	strb	r2, [r3, #0]
	uState = eInit;
 8004f8e:	4b0f      	ldr	r3, [pc, #60]	; (8004fcc <uInit+0x48>)
 8004f90:	2200      	movs	r2, #0
 8004f92:	701a      	strb	r2, [r3, #0]

	fWaitSSITransfer = 0u;
 8004f94:	4b0e      	ldr	r3, [pc, #56]	; (8004fd0 <uInit+0x4c>)
 8004f96:	2200      	movs	r2, #0
 8004f98:	701a      	strb	r2, [r3, #0]
	ssiMode = read;
 8004f9a:	4b0e      	ldr	r3, [pc, #56]	; (8004fd4 <uInit+0x50>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	701a      	strb	r2, [r3, #0]
	ssiClkEdgesNb = 2u*32u;
 8004fa0:	4b0d      	ldr	r3, [pc, #52]	; (8004fd8 <uInit+0x54>)
 8004fa2:	2240      	movs	r2, #64	; 0x40
 8004fa4:	701a      	strb	r2, [r3, #0]
	fUARTRx = 0u;
 8004fa6:	4b0d      	ldr	r3, [pc, #52]	; (8004fdc <uInit+0x58>)
 8004fa8:	2200      	movs	r2, #0
 8004faa:	701a      	strb	r2, [r3, #0]
	cntWaitOTPWriteStatusFlags = 0u;
 8004fac:	4b0c      	ldr	r3, [pc, #48]	; (8004fe0 <uInit+0x5c>)
 8004fae:	2200      	movs	r2, #0
 8004fb0:	601a      	str	r2, [r3, #0]

	cOtpClk = &otpData[0][0][0];
 8004fb2:	4b0c      	ldr	r3, [pc, #48]	; (8004fe4 <uInit+0x60>)
 8004fb4:	4a0c      	ldr	r2, [pc, #48]	; (8004fe8 <uInit+0x64>)
 8004fb6:	601a      	str	r2, [r3, #0]
	cOtpData = &otpData[0][1][0];
 8004fb8:	4b0c      	ldr	r3, [pc, #48]	; (8004fec <uInit+0x68>)
 8004fba:	4a0d      	ldr	r2, [pc, #52]	; (8004ff0 <uInit+0x6c>)
 8004fbc:	601a      	str	r2, [r3, #0]
}
 8004fbe:	bf00      	nop
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr
 8004fc8:	20000706 	.word	0x20000706
 8004fcc:	20000b08 	.word	0x20000b08
 8004fd0:	20000b16 	.word	0x20000b16
 8004fd4:	20000b0b 	.word	0x20000b0b
 8004fd8:	20000b14 	.word	0x20000b14
 8004fdc:	20000b15 	.word	0x20000b15
 8004fe0:	20000b1c 	.word	0x20000b1c
 8004fe4:	20000b0c 	.word	0x20000b0c
 8004fe8:	2000000c 	.word	0x2000000c
 8004fec:	20000b10 	.word	0x20000b10
 8004ff0:	20000055 	.word	0x20000055

08004ff4 <uTask>:

void uTask( void ) {
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
	uint16_t uartDataSize = 0u;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	80fb      	strh	r3, [r7, #6]

	switch (uState)
 8004ffe:	4b22      	ldr	r3, [pc, #136]	; (8005088 <uTask+0x94>)
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	2b03      	cmp	r3, #3
 8005004:	d833      	bhi.n	800506e <uTask+0x7a>
 8005006:	a201      	add	r2, pc, #4	; (adr r2, 800500c <uTask+0x18>)
 8005008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500c:	0800501d 	.word	0x0800501d
 8005010:	0800502f 	.word	0x0800502f
 8005014:	0800504b 	.word	0x0800504b
 8005018:	08005077 	.word	0x08005077
	{
	case eInit:
		HAL_UART_Receive_DMA(&huart3, uartRxBuf, sizeof(uartRxBuf));
 800501c:	220a      	movs	r2, #10
 800501e:	491b      	ldr	r1, [pc, #108]	; (800508c <uTask+0x98>)
 8005020:	481b      	ldr	r0, [pc, #108]	; (8005090 <uTask+0x9c>)
 8005022:	f7fe fc7f 	bl	8003924 <HAL_UART_Receive_DMA>
		uState=eWaitRx;
 8005026:	4b18      	ldr	r3, [pc, #96]	; (8005088 <uTask+0x94>)
 8005028:	2201      	movs	r2, #1
 800502a:	701a      	strb	r2, [r3, #0]

		break;
 800502c:	e028      	b.n	8005080 <uTask+0x8c>
	case eWaitRx:
		if ( 0u != fUARTRx )
 800502e:	4b19      	ldr	r3, [pc, #100]	; (8005094 <uTask+0xa0>)
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d021      	beq.n	800507a <uTask+0x86>
		{
			fUARTRx = 0u;
 8005036:	4b17      	ldr	r3, [pc, #92]	; (8005094 <uTask+0xa0>)
 8005038:	2200      	movs	r2, #0
 800503a:	701a      	strb	r2, [r3, #0]
			processChoice(uartRxBuf);
 800503c:	4813      	ldr	r0, [pc, #76]	; (800508c <uTask+0x98>)
 800503e:	f7ff ff59 	bl	8004ef4 <processChoice>

			uState=eWaitChoiceActions;
 8005042:	4b11      	ldr	r3, [pc, #68]	; (8005088 <uTask+0x94>)
 8005044:	2202      	movs	r2, #2
 8005046:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005048:	e017      	b.n	800507a <uTask+0x86>
	case eWaitChoiceActions:
		if ( 0u == fWaitSSITransfer )
 800504a:	4b13      	ldr	r3, [pc, #76]	; (8005098 <uTask+0xa4>)
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d115      	bne.n	800507e <uTask+0x8a>
		{
			//TODO MiPa process SSI data if any - and prepare the menu accordingly
			uartDataSize = prepareMenu();
 8005052:	f7ff feef 	bl	8004e34 <prepareMenu>
 8005056:	4603      	mov	r3, r0
 8005058:	80fb      	strh	r3, [r7, #6]
			HAL_UART_Transmit_DMA(&huart3, uartMenu, uartDataSize);
 800505a:	88fb      	ldrh	r3, [r7, #6]
 800505c:	461a      	mov	r2, r3
 800505e:	490f      	ldr	r1, [pc, #60]	; (800509c <uTask+0xa8>)
 8005060:	480b      	ldr	r0, [pc, #44]	; (8005090 <uTask+0x9c>)
 8005062:	f7fe fbe3 	bl	800382c <HAL_UART_Transmit_DMA>

			uState=eWaitTxEnd;
 8005066:	4b08      	ldr	r3, [pc, #32]	; (8005088 <uTask+0x94>)
 8005068:	2203      	movs	r2, #3
 800506a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800506c:	e007      	b.n	800507e <uTask+0x8a>
	case eWaitTxEnd:
		//TODO if ( )
		break;
	default:
		uState = eInit;
 800506e:	4b06      	ldr	r3, [pc, #24]	; (8005088 <uTask+0x94>)
 8005070:	2200      	movs	r2, #0
 8005072:	701a      	strb	r2, [r3, #0]
		break;
 8005074:	e004      	b.n	8005080 <uTask+0x8c>
		break;
 8005076:	bf00      	nop
 8005078:	e002      	b.n	8005080 <uTask+0x8c>
		break;
 800507a:	bf00      	nop
 800507c:	e000      	b.n	8005080 <uTask+0x8c>
		break;
 800507e:	bf00      	nop
	}

}
 8005080:	bf00      	nop
 8005082:	3708      	adds	r7, #8
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	20000b08 	.word	0x20000b08
 800508c:	200006fc 	.word	0x200006fc
 8005090:	200005a8 	.word	0x200005a8
 8005094:	20000b15 	.word	0x20000b15
 8005098:	20000b16 	.word	0x20000b16
 800509c:	20000708 	.word	0x20000708

080050a0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050a0:	b590      	push	{r4, r7, lr}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, ssiClk_Pin, cOtpClk[tim1Tick]);
 80050a8:	4b36      	ldr	r3, [pc, #216]	; (8005184 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	4b36      	ldr	r3, [pc, #216]	; (8005188 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4413      	add	r3, r2
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	461a      	mov	r2, r3
 80050b6:	2140      	movs	r1, #64	; 0x40
 80050b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050bc:	f7fc f9cc 	bl	8001458 <HAL_GPIO_WritePin>
	if (write == ssiMode)
 80050c0:	4b32      	ldr	r3, [pc, #200]	; (800518c <HAL_TIM_PeriodElapsedCallback+0xec>)
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d10c      	bne.n	80050e2 <HAL_TIM_PeriodElapsedCallback+0x42>
	{
		HAL_GPIO_WritePin(GPIOA, ssiDO_Pin, cOtpData[tim1Tick]);
 80050c8:	4b31      	ldr	r3, [pc, #196]	; (8005190 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	4b2e      	ldr	r3, [pc, #184]	; (8005188 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4413      	add	r3, r2
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	461a      	mov	r2, r3
 80050d6:	2180      	movs	r1, #128	; 0x80
 80050d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050dc:	f7fc f9bc 	bl	8001458 <HAL_GPIO_WritePin>
 80050e0:	e00b      	b.n	80050fa <HAL_TIM_PeriodElapsedCallback+0x5a>
	}
	else
	{
		cOtpData[tim1Tick] = HAL_GPIO_ReadPin(GPIOA, ssiDO_Pin);
 80050e2:	4b2b      	ldr	r3, [pc, #172]	; (8005190 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	4b28      	ldr	r3, [pc, #160]	; (8005188 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	18d4      	adds	r4, r2, r3
 80050ec:	2180      	movs	r1, #128	; 0x80
 80050ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050f2:	f7fc f999 	bl	8001428 <HAL_GPIO_ReadPin>
 80050f6:	4603      	mov	r3, r0
 80050f8:	7023      	strb	r3, [r4, #0]
	}
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin); //led shows the TX status
 80050fa:	2101      	movs	r1, #1
 80050fc:	4825      	ldr	r0, [pc, #148]	; (8005194 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80050fe:	f7fc f9c3 	bl	8001488 <HAL_GPIO_TogglePin>

	if (tim1Tick< ssiClkEdgesNb)
 8005102:	4b25      	ldr	r3, [pc, #148]	; (8005198 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	461a      	mov	r2, r3
 8005108:	4b1f      	ldr	r3, [pc, #124]	; (8005188 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	429a      	cmp	r2, r3
 800510e:	d905      	bls.n	800511c <HAL_TIM_PeriodElapsedCallback+0x7c>
	{
		tim1Tick++;
 8005110:	4b1d      	ldr	r3, [pc, #116]	; (8005188 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	3301      	adds	r3, #1
 8005116:	4a1c      	ldr	r2, [pc, #112]	; (8005188 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8005118:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOA, ssiNCS_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET); //led shows the TX status finished
			fWaitSSITransfer = 0u;
		}
	}
}
 800511a:	e02e      	b.n	800517a <HAL_TIM_PeriodElapsedCallback+0xda>
		if ( ( write == ssiMode ) && (cntWaitOTPWriteStatusFlags > 0u ) )
 800511c:	4b1b      	ldr	r3, [pc, #108]	; (800518c <HAL_TIM_PeriodElapsedCallback+0xec>)
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d115      	bne.n	8005150 <HAL_TIM_PeriodElapsedCallback+0xb0>
 8005124:	4b1d      	ldr	r3, [pc, #116]	; (800519c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d011      	beq.n	8005150 <HAL_TIM_PeriodElapsedCallback+0xb0>
			if ( ( 0u == fLedMagHiToggled ) && ( 0u == fLedMagLoToggled ) )
 800512c:	4b1c      	ldr	r3, [pc, #112]	; (80051a0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d109      	bne.n	8005148 <HAL_TIM_PeriodElapsedCallback+0xa8>
 8005134:	4b1b      	ldr	r3, [pc, #108]	; (80051a4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d105      	bne.n	8005148 <HAL_TIM_PeriodElapsedCallback+0xa8>
				cntWaitOTPWriteStatusFlags--;
 800513c:	4b17      	ldr	r3, [pc, #92]	; (800519c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	3b01      	subs	r3, #1
 8005142:	4a16      	ldr	r2, [pc, #88]	; (800519c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8005144:	6013      	str	r3, [r2, #0]
			if ( ( 0u == fLedMagHiToggled ) && ( 0u == fLedMagLoToggled ) )
 8005146:	e018      	b.n	800517a <HAL_TIM_PeriodElapsedCallback+0xda>
				cntWaitOTPWriteStatusFlags = 0u;
 8005148:	4b14      	ldr	r3, [pc, #80]	; (800519c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800514a:	2200      	movs	r2, #0
 800514c:	601a      	str	r2, [r3, #0]
			if ( ( 0u == fLedMagHiToggled ) && ( 0u == fLedMagLoToggled ) )
 800514e:	e014      	b.n	800517a <HAL_TIM_PeriodElapsedCallback+0xda>
			tim1Tick=0u;
 8005150:	4b0d      	ldr	r3, [pc, #52]	; (8005188 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8005152:	2200      	movs	r2, #0
 8005154:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim1);
 8005156:	4814      	ldr	r0, [pc, #80]	; (80051a8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8005158:	f7fd ff0a 	bl	8002f70 <HAL_TIM_Base_Stop_IT>
			HAL_GPIO_WritePin(GPIOA, ssiNCS_Pin, GPIO_PIN_SET);
 800515c:	2201      	movs	r2, #1
 800515e:	2120      	movs	r1, #32
 8005160:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005164:	f7fc f978 	bl	8001458 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET); //led shows the TX status finished
 8005168:	2200      	movs	r2, #0
 800516a:	2101      	movs	r1, #1
 800516c:	4809      	ldr	r0, [pc, #36]	; (8005194 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800516e:	f7fc f973 	bl	8001458 <HAL_GPIO_WritePin>
			fWaitSSITransfer = 0u;
 8005172:	4b0e      	ldr	r3, [pc, #56]	; (80051ac <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8005174:	2200      	movs	r2, #0
 8005176:	701a      	strb	r2, [r3, #0]
}
 8005178:	e7ff      	b.n	800517a <HAL_TIM_PeriodElapsedCallback+0xda>
 800517a:	bf00      	nop
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	bd90      	pop	{r4, r7, pc}
 8005182:	bf00      	nop
 8005184:	20000b0c 	.word	0x20000b0c
 8005188:	20000b18 	.word	0x20000b18
 800518c:	20000b0b 	.word	0x20000b0b
 8005190:	20000b10 	.word	0x20000b10
 8005194:	48000400 	.word	0x48000400
 8005198:	20000b14 	.word	0x20000b14
 800519c:	20000b1c 	.word	0x20000b1c
 80051a0:	20000b09 	.word	0x20000b09
 80051a4:	20000b0a 	.word	0x20000b0a
 80051a8:	2000055c 	.word	0x2000055c
 80051ac:	20000b16 	.word	0x20000b16

080051b0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
	if ( USART3 == huart->Instance)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a05      	ldr	r2, [pc, #20]	; (80051d4 <HAL_UART_RxCpltCallback+0x24>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d102      	bne.n	80051c8 <HAL_UART_RxCpltCallback+0x18>
	{
		fUARTRx = 1u;
 80051c2:	4b05      	ldr	r3, [pc, #20]	; (80051d8 <HAL_UART_RxCpltCallback+0x28>)
 80051c4:	2201      	movs	r2, #1
 80051c6:	701a      	strb	r2, [r3, #0]
	}
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr
 80051d4:	40004800 	.word	0x40004800
 80051d8:	20000b15 	.word	0x20000b15

080051dc <__libc_init_array>:
 80051dc:	b570      	push	{r4, r5, r6, lr}
 80051de:	4d0d      	ldr	r5, [pc, #52]	; (8005214 <__libc_init_array+0x38>)
 80051e0:	4c0d      	ldr	r4, [pc, #52]	; (8005218 <__libc_init_array+0x3c>)
 80051e2:	1b64      	subs	r4, r4, r5
 80051e4:	10a4      	asrs	r4, r4, #2
 80051e6:	2600      	movs	r6, #0
 80051e8:	42a6      	cmp	r6, r4
 80051ea:	d109      	bne.n	8005200 <__libc_init_array+0x24>
 80051ec:	4d0b      	ldr	r5, [pc, #44]	; (800521c <__libc_init_array+0x40>)
 80051ee:	4c0c      	ldr	r4, [pc, #48]	; (8005220 <__libc_init_array+0x44>)
 80051f0:	f000 f820 	bl	8005234 <_init>
 80051f4:	1b64      	subs	r4, r4, r5
 80051f6:	10a4      	asrs	r4, r4, #2
 80051f8:	2600      	movs	r6, #0
 80051fa:	42a6      	cmp	r6, r4
 80051fc:	d105      	bne.n	800520a <__libc_init_array+0x2e>
 80051fe:	bd70      	pop	{r4, r5, r6, pc}
 8005200:	f855 3b04 	ldr.w	r3, [r5], #4
 8005204:	4798      	blx	r3
 8005206:	3601      	adds	r6, #1
 8005208:	e7ee      	b.n	80051e8 <__libc_init_array+0xc>
 800520a:	f855 3b04 	ldr.w	r3, [r5], #4
 800520e:	4798      	blx	r3
 8005210:	3601      	adds	r6, #1
 8005212:	e7f2      	b.n	80051fa <__libc_init_array+0x1e>
 8005214:	08005360 	.word	0x08005360
 8005218:	08005360 	.word	0x08005360
 800521c:	08005360 	.word	0x08005360
 8005220:	08005364 	.word	0x08005364

08005224 <memset>:
 8005224:	4402      	add	r2, r0
 8005226:	4603      	mov	r3, r0
 8005228:	4293      	cmp	r3, r2
 800522a:	d100      	bne.n	800522e <memset+0xa>
 800522c:	4770      	bx	lr
 800522e:	f803 1b01 	strb.w	r1, [r3], #1
 8005232:	e7f9      	b.n	8005228 <memset+0x4>

08005234 <_init>:
 8005234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005236:	bf00      	nop
 8005238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800523a:	bc08      	pop	{r3}
 800523c:	469e      	mov	lr, r3
 800523e:	4770      	bx	lr

08005240 <_fini>:
 8005240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005242:	bf00      	nop
 8005244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005246:	bc08      	pop	{r3}
 8005248:	469e      	mov	lr, r3
 800524a:	4770      	bx	lr
