
AEAT6600ConfigAndReadData.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055e4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08005778  08005778  00015778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057cc  080057cc  00020804  2**0
                  CONTENTS
  4 .ARM          00000000  080057cc  080057cc  00020804  2**0
                  CONTENTS
  5 .preinit_array 00000000  080057cc  080057cc  00020804  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057cc  080057cc  000157cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057d0  080057d0  000157d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000804  20000000  080057d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020804  2**0
                  CONTENTS
 10 .bss          000009d8  20000804  20000804  00020804  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200011dc  200011dc  00020804  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020804  2**0
                  CONTENTS, READONLY
 13 .debug_info   000116bb  00000000  00000000  00020834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002259  00000000  00000000  00031eef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d88  00000000  00000000  00034148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cc0  00000000  00000000  00034ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000202f1  00000000  00000000  00035b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000112eb  00000000  00000000  00055e81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6f6f  00000000  00000000  0006716c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012e0db  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000038a0  00000000  00000000  0012e12c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000804 	.word	0x20000804
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08005760 	.word	0x08005760

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000808 	.word	0x20000808
 80001d0:	08005760 	.word	0x08005760

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
//	GPIO_InitTypeDef GPIO_InitStruct = {0};

//	uint8_t fSetPin2InputMode = 0u;
	oldTick = 0u;
 80001d8:	4b28      	ldr	r3, [pc, #160]	; (800027c <main+0xa8>)
 80001da:	2200      	movs	r2, #0
 80001dc:	601a      	str	r2, [r3, #0]
	oldBtn = 10000u;
 80001de:	4b28      	ldr	r3, [pc, #160]	; (8000280 <main+0xac>)
 80001e0:	f242 7210 	movw	r2, #10000	; 0x2710
 80001e4:	601a      	str	r2, [r3, #0]
	csPinState = GPIO_PIN_SET;
 80001e6:	4b27      	ldr	r3, [pc, #156]	; (8000284 <main+0xb0>)
 80001e8:	2201      	movs	r2, #1
 80001ea:	701a      	strb	r2, [r3, #0]
	dataPinState = GPIO_PIN_SET;
 80001ec:	4b26      	ldr	r3, [pc, #152]	; (8000288 <main+0xb4>)
 80001ee:	2201      	movs	r2, #1
 80001f0:	701a      	strb	r2, [r3, #0]
	clkPinState = GPIO_PIN_SET;
 80001f2:	4b26      	ldr	r3, [pc, #152]	; (800028c <main+0xb8>)
 80001f4:	2201      	movs	r2, #1
 80001f6:	701a      	strb	r2, [r3, #0]
	cntClkRisingEdge = 0u;
 80001f8:	4b25      	ldr	r3, [pc, #148]	; (8000290 <main+0xbc>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	601a      	str	r2, [r3, #0]
	btnPressed = 0u;
 80001fe:	4b25      	ldr	r3, [pc, #148]	; (8000294 <main+0xc0>)
 8000200:	2200      	movs	r2, #0
 8000202:	701a      	strb	r2, [r3, #0]
	doInputMode = 0u;
 8000204:	4b24      	ldr	r3, [pc, #144]	; (8000298 <main+0xc4>)
 8000206:	2200      	movs	r2, #0
 8000208:	701a      	strb	r2, [r3, #0]
	evTim1Tick = 0u;
 800020a:	4b24      	ldr	r3, [pc, #144]	; (800029c <main+0xc8>)
 800020c:	2200      	movs	r2, #0
 800020e:	701a      	strb	r2, [r3, #0]

	pState = 0u;
 8000210:	4b23      	ldr	r3, [pc, #140]	; (80002a0 <main+0xcc>)
 8000212:	2200      	movs	r2, #0
 8000214:	701a      	strb	r2, [r3, #0]
	oldpState = 0u;
 8000216:	4b23      	ldr	r3, [pc, #140]	; (80002a4 <main+0xd0>)
 8000218:	2200      	movs	r2, #0
 800021a:	701a      	strb	r2, [r3, #0]

	cPStateBuf = 0u;
 800021c:	4b22      	ldr	r3, [pc, #136]	; (80002a8 <main+0xd4>)
 800021e:	2200      	movs	r2, #0
 8000220:	701a      	strb	r2, [r3, #0]

	mData[0]=0u;
 8000222:	4b22      	ldr	r3, [pc, #136]	; (80002ac <main+0xd8>)
 8000224:	2200      	movs	r2, #0
 8000226:	701a      	strb	r2, [r3, #0]
	mData[1]=0u;
 8000228:	4b20      	ldr	r3, [pc, #128]	; (80002ac <main+0xd8>)
 800022a:	2200      	movs	r2, #0
 800022c:	705a      	strb	r2, [r3, #1]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800022e:	f000 fbd1 	bl	80009d4 <HAL_Init>

  /* USER CODE BEGIN Init */
  uInit();
 8000232:	f005 f8b5 	bl	80053a0 <uInit>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000236:	f000 f83d 	bl	80002b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800023a:	f000 f945 	bl	80004c8 <MX_GPIO_Init>
  MX_DMA_Init();
 800023e:	f000 f91d 	bl	800047c <MX_DMA_Init>
  MX_TIM1_Init();
 8000242:	f000 f899 	bl	8000378 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000246:	f000 f8e9 	bl	800041c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, ssiNCS_Pin|ssiClk_Pin|ssiDIO_Pin, GPIO_PIN_SET);
 800024a:	2201      	movs	r2, #1
 800024c:	21e0      	movs	r1, #224	; 0xe0
 800024e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000252:	f001 f907 	bl	8001464 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  uint8_t nBtn = GPIO_PIN_RESET;
//	  nBtn = HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin);
	  mSysTick = HAL_GetTick();
 8000256:	f000 fc17 	bl	8000a88 <HAL_GetTick>
 800025a:	4603      	mov	r3, r0
 800025c:	4a14      	ldr	r2, [pc, #80]	; (80002b0 <main+0xdc>)
 800025e:	6013      	str	r3, [r2, #0]
	  if ( (oldTick!=mSysTick) /*&& (0u == (mSysTick%25))*/ )
 8000260:	4b06      	ldr	r3, [pc, #24]	; (800027c <main+0xa8>)
 8000262:	681a      	ldr	r2, [r3, #0]
 8000264:	4b12      	ldr	r3, [pc, #72]	; (80002b0 <main+0xdc>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	429a      	cmp	r2, r3
 800026a:	d0f4      	beq.n	8000256 <main+0x82>
	  {
//		  mData16 = ((((uint16_t)mData[1]&0x3F)<<8) + mData[0])>>4;
//		  HAL_GPIO_TogglePin(GPIOA, ssiNCS_Pin);
		  uTask();
 800026c:	f005 f8e0 	bl	8005430 <uTask>
		  oldTick = mSysTick;
 8000270:	4b0f      	ldr	r3, [pc, #60]	; (80002b0 <main+0xdc>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a01      	ldr	r2, [pc, #4]	; (800027c <main+0xa8>)
 8000276:	6013      	str	r3, [r2, #0]
	  mSysTick = HAL_GetTick();
 8000278:	e7ed      	b.n	8000256 <main+0x82>
 800027a:	bf00      	nop
 800027c:	20000988 	.word	0x20000988
 8000280:	2000098c 	.word	0x2000098c
 8000284:	20000990 	.word	0x20000990
 8000288:	20000991 	.word	0x20000991
 800028c:	20000992 	.word	0x20000992
 8000290:	2000097c 	.word	0x2000097c
 8000294:	20000998 	.word	0x20000998
 8000298:	20000995 	.word	0x20000995
 800029c:	20000996 	.word	0x20000996
 80002a0:	20000993 	.word	0x20000993
 80002a4:	20000994 	.word	0x20000994
 80002a8:	20000997 	.word	0x20000997
 80002ac:	20000980 	.word	0x20000980
 80002b0:	20000984 	.word	0x20000984

080002b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b0a6      	sub	sp, #152	; 0x98
 80002b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ba:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002be:	2228      	movs	r2, #40	; 0x28
 80002c0:	2100      	movs	r1, #0
 80002c2:	4618      	mov	r0, r3
 80002c4:	f005 fa44 	bl	8005750 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002cc:	2200      	movs	r2, #0
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	605a      	str	r2, [r3, #4]
 80002d2:	609a      	str	r2, [r3, #8]
 80002d4:	60da      	str	r2, [r3, #12]
 80002d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	2258      	movs	r2, #88	; 0x58
 80002dc:	2100      	movs	r1, #0
 80002de:	4618      	mov	r0, r3
 80002e0:	f005 fa36 	bl	8005750 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002e4:	2302      	movs	r3, #2
 80002e6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e8:	2301      	movs	r3, #1
 80002ea:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ec:	2310      	movs	r3, #16
 80002ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f2:	2302      	movs	r3, #2
 80002f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000300:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000304:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000308:	2300      	movs	r3, #0
 800030a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000312:	4618      	mov	r0, r3
 8000314:	f001 f8d8 	bl	80014c8 <HAL_RCC_OscConfig>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800031e:	f000 f9db 	bl	80006d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000322:	230f      	movs	r3, #15
 8000324:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000326:	2302      	movs	r3, #2
 8000328:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800032a:	2300      	movs	r3, #0
 800032c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800032e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000332:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000338:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800033c:	2102      	movs	r1, #2
 800033e:	4618      	mov	r0, r3
 8000340:	f002 f916 	bl	8002570 <HAL_RCC_ClockConfig>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800034a:	f000 f9c5 	bl	80006d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_TIM1;
 800034e:	f241 0304 	movw	r3, #4100	; 0x1004
 8000352:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000354:	2300      	movs	r3, #0
 8000356:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000358:	2300      	movs	r3, #0
 800035a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800035c:	1d3b      	adds	r3, r7, #4
 800035e:	4618      	mov	r0, r3
 8000360:	f002 fb26 	bl	80029b0 <HAL_RCCEx_PeriphCLKConfig>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800036a:	f000 f9b5 	bl	80006d8 <Error_Handler>
  }
}
 800036e:	bf00      	nop
 8000370:	3798      	adds	r7, #152	; 0x98
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
	...

08000378 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b088      	sub	sp, #32
 800037c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800037e:	f107 0310 	add.w	r3, r7, #16
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	605a      	str	r2, [r3, #4]
 8000388:	609a      	str	r2, [r3, #8]
 800038a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800038c:	1d3b      	adds	r3, r7, #4
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	605a      	str	r2, [r3, #4]
 8000394:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000396:	4b1f      	ldr	r3, [pc, #124]	; (8000414 <MX_TIM1_Init+0x9c>)
 8000398:	4a1f      	ldr	r2, [pc, #124]	; (8000418 <MX_TIM1_Init+0xa0>)
 800039a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800039c:	4b1d      	ldr	r3, [pc, #116]	; (8000414 <MX_TIM1_Init+0x9c>)
 800039e:	2247      	movs	r2, #71	; 0x47
 80003a0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003a2:	4b1c      	ldr	r3, [pc, #112]	; (8000414 <MX_TIM1_Init+0x9c>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5;
 80003a8:	4b1a      	ldr	r3, [pc, #104]	; (8000414 <MX_TIM1_Init+0x9c>)
 80003aa:	2205      	movs	r2, #5
 80003ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ae:	4b19      	ldr	r3, [pc, #100]	; (8000414 <MX_TIM1_Init+0x9c>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003b4:	4b17      	ldr	r3, [pc, #92]	; (8000414 <MX_TIM1_Init+0x9c>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003ba:	4b16      	ldr	r3, [pc, #88]	; (8000414 <MX_TIM1_Init+0x9c>)
 80003bc:	2280      	movs	r2, #128	; 0x80
 80003be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003c0:	4814      	ldr	r0, [pc, #80]	; (8000414 <MX_TIM1_Init+0x9c>)
 80003c2:	f002 fd13 	bl	8002dec <HAL_TIM_Base_Init>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80003cc:	f000 f984 	bl	80006d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003d6:	f107 0310 	add.w	r3, r7, #16
 80003da:	4619      	mov	r1, r3
 80003dc:	480d      	ldr	r0, [pc, #52]	; (8000414 <MX_TIM1_Init+0x9c>)
 80003de:	f002 fefe 	bl	80031de <HAL_TIM_ConfigClockSource>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80003e8:	f000 f976 	bl	80006d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003ec:	2300      	movs	r3, #0
 80003ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80003f0:	2300      	movs	r3, #0
 80003f2:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003f4:	2300      	movs	r3, #0
 80003f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003f8:	1d3b      	adds	r3, r7, #4
 80003fa:	4619      	mov	r1, r3
 80003fc:	4805      	ldr	r0, [pc, #20]	; (8000414 <MX_TIM1_Init+0x9c>)
 80003fe:	f003 f923 	bl	8003648 <HAL_TIMEx_MasterConfigSynchronization>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000408:	f000 f966 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800040c:	bf00      	nop
 800040e:	3720      	adds	r7, #32
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	20000820 	.word	0x20000820
 8000418:	40012c00 	.word	0x40012c00

0800041c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000420:	4b14      	ldr	r3, [pc, #80]	; (8000474 <MX_USART3_UART_Init+0x58>)
 8000422:	4a15      	ldr	r2, [pc, #84]	; (8000478 <MX_USART3_UART_Init+0x5c>)
 8000424:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000426:	4b13      	ldr	r3, [pc, #76]	; (8000474 <MX_USART3_UART_Init+0x58>)
 8000428:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800042c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800042e:	4b11      	ldr	r3, [pc, #68]	; (8000474 <MX_USART3_UART_Init+0x58>)
 8000430:	2200      	movs	r2, #0
 8000432:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000434:	4b0f      	ldr	r3, [pc, #60]	; (8000474 <MX_USART3_UART_Init+0x58>)
 8000436:	2200      	movs	r2, #0
 8000438:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800043a:	4b0e      	ldr	r3, [pc, #56]	; (8000474 <MX_USART3_UART_Init+0x58>)
 800043c:	2200      	movs	r2, #0
 800043e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000440:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <MX_USART3_UART_Init+0x58>)
 8000442:	220c      	movs	r2, #12
 8000444:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000446:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <MX_USART3_UART_Init+0x58>)
 8000448:	2200      	movs	r2, #0
 800044a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800044c:	4b09      	ldr	r3, [pc, #36]	; (8000474 <MX_USART3_UART_Init+0x58>)
 800044e:	2200      	movs	r2, #0
 8000450:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000452:	4b08      	ldr	r3, [pc, #32]	; (8000474 <MX_USART3_UART_Init+0x58>)
 8000454:	2200      	movs	r2, #0
 8000456:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000458:	4b06      	ldr	r3, [pc, #24]	; (8000474 <MX_USART3_UART_Init+0x58>)
 800045a:	2200      	movs	r2, #0
 800045c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800045e:	4805      	ldr	r0, [pc, #20]	; (8000474 <MX_USART3_UART_Init+0x58>)
 8000460:	f003 f99c 	bl	800379c <HAL_UART_Init>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800046a:	f000 f935 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800046e:	bf00      	nop
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	2000086c 	.word	0x2000086c
 8000478:	40004800 	.word	0x40004800

0800047c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000482:	4b10      	ldr	r3, [pc, #64]	; (80004c4 <MX_DMA_Init+0x48>)
 8000484:	695b      	ldr	r3, [r3, #20]
 8000486:	4a0f      	ldr	r2, [pc, #60]	; (80004c4 <MX_DMA_Init+0x48>)
 8000488:	f043 0301 	orr.w	r3, r3, #1
 800048c:	6153      	str	r3, [r2, #20]
 800048e:	4b0d      	ldr	r3, [pc, #52]	; (80004c4 <MX_DMA_Init+0x48>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	f003 0301 	and.w	r3, r3, #1
 8000496:	607b      	str	r3, [r7, #4]
 8000498:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800049a:	2200      	movs	r2, #0
 800049c:	2100      	movs	r1, #0
 800049e:	200c      	movs	r0, #12
 80004a0:	f000 fbd9 	bl	8000c56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80004a4:	200c      	movs	r0, #12
 80004a6:	f000 fbf2 	bl	8000c8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80004aa:	2200      	movs	r2, #0
 80004ac:	2100      	movs	r1, #0
 80004ae:	200d      	movs	r0, #13
 80004b0:	f000 fbd1 	bl	8000c56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80004b4:	200d      	movs	r0, #13
 80004b6:	f000 fbea 	bl	8000c8e <HAL_NVIC_EnableIRQ>

}
 80004ba:	bf00      	nop
 80004bc:	3708      	adds	r7, #8
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	40021000 	.word	0x40021000

080004c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08c      	sub	sp, #48	; 0x30
 80004cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ce:	f107 031c 	add.w	r3, r7, #28
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]
 80004dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004de:	4b79      	ldr	r3, [pc, #484]	; (80006c4 <MX_GPIO_Init+0x1fc>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	4a78      	ldr	r2, [pc, #480]	; (80006c4 <MX_GPIO_Init+0x1fc>)
 80004e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004e8:	6153      	str	r3, [r2, #20]
 80004ea:	4b76      	ldr	r3, [pc, #472]	; (80006c4 <MX_GPIO_Init+0x1fc>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004f2:	61bb      	str	r3, [r7, #24]
 80004f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004f6:	4b73      	ldr	r3, [pc, #460]	; (80006c4 <MX_GPIO_Init+0x1fc>)
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	4a72      	ldr	r2, [pc, #456]	; (80006c4 <MX_GPIO_Init+0x1fc>)
 80004fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000500:	6153      	str	r3, [r2, #20]
 8000502:	4b70      	ldr	r3, [pc, #448]	; (80006c4 <MX_GPIO_Init+0x1fc>)
 8000504:	695b      	ldr	r3, [r3, #20]
 8000506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800050a:	617b      	str	r3, [r7, #20]
 800050c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050e:	4b6d      	ldr	r3, [pc, #436]	; (80006c4 <MX_GPIO_Init+0x1fc>)
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	4a6c      	ldr	r2, [pc, #432]	; (80006c4 <MX_GPIO_Init+0x1fc>)
 8000514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000518:	6153      	str	r3, [r2, #20]
 800051a:	4b6a      	ldr	r3, [pc, #424]	; (80006c4 <MX_GPIO_Init+0x1fc>)
 800051c:	695b      	ldr	r3, [r3, #20]
 800051e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000522:	613b      	str	r3, [r7, #16]
 8000524:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000526:	4b67      	ldr	r3, [pc, #412]	; (80006c4 <MX_GPIO_Init+0x1fc>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	4a66      	ldr	r2, [pc, #408]	; (80006c4 <MX_GPIO_Init+0x1fc>)
 800052c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000530:	6153      	str	r3, [r2, #20]
 8000532:	4b64      	ldr	r3, [pc, #400]	; (80006c4 <MX_GPIO_Init+0x1fc>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800053e:	4b61      	ldr	r3, [pc, #388]	; (80006c4 <MX_GPIO_Init+0x1fc>)
 8000540:	695b      	ldr	r3, [r3, #20]
 8000542:	4a60      	ldr	r2, [pc, #384]	; (80006c4 <MX_GPIO_Init+0x1fc>)
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	6153      	str	r3, [r2, #20]
 800054a:	4b5e      	ldr	r3, [pc, #376]	; (80006c4 <MX_GPIO_Init+0x1fc>)
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000556:	4b5b      	ldr	r3, [pc, #364]	; (80006c4 <MX_GPIO_Init+0x1fc>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	4a5a      	ldr	r2, [pc, #360]	; (80006c4 <MX_GPIO_Init+0x1fc>)
 800055c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000560:	6153      	str	r3, [r2, #20]
 8000562:	4b58      	ldr	r3, [pc, #352]	; (80006c4 <MX_GPIO_Init+0x1fc>)
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ssiNCS_Pin|ssiClk_Pin|ssiDIO_Pin, GPIO_PIN_RESET);
 800056e:	2200      	movs	r2, #0
 8000570:	21e0      	movs	r1, #224	; 0xe0
 8000572:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000576:	f000 ff75 	bl	8001464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|testPin_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	f245 0181 	movw	r1, #20609	; 0x5081
 8000580:	4851      	ldr	r0, [pc, #324]	; (80006c8 <MX_GPIO_Init+0x200>)
 8000582:	f000 ff6f 	bl	8001464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, pVPP_Pin|pPROG_Pin, GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800058c:	484f      	ldr	r0, [pc, #316]	; (80006cc <MX_GPIO_Init+0x204>)
 800058e:	f000 ff69 	bl	8001464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	2140      	movs	r1, #64	; 0x40
 8000596:	484e      	ldr	r0, [pc, #312]	; (80006d0 <MX_GPIO_Init+0x208>)
 8000598:	f000 ff64 	bl	8001464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800059c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005a2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a8:	2300      	movs	r3, #0
 80005aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80005ac:	f107 031c 	add.w	r3, r7, #28
 80005b0:	4619      	mov	r1, r3
 80005b2:	4848      	ldr	r0, [pc, #288]	; (80006d4 <MX_GPIO_Init+0x20c>)
 80005b4:	f000 fdb4 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pin : ssiNCS_Pin */
  GPIO_InitStruct.Pin = ssiNCS_Pin;
 80005b8:	2320      	movs	r3, #32
 80005ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005bc:	2301      	movs	r3, #1
 80005be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80005c4:	2301      	movs	r3, #1
 80005c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ssiNCS_GPIO_Port, &GPIO_InitStruct);
 80005c8:	f107 031c 	add.w	r3, r7, #28
 80005cc:	4619      	mov	r1, r3
 80005ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d2:	f000 fda5 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pin : ssiClk_Pin */
  GPIO_InitStruct.Pin = ssiClk_Pin;
 80005d6:	2340      	movs	r3, #64	; 0x40
 80005d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005da:	2301      	movs	r3, #1
 80005dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005e2:	2303      	movs	r3, #3
 80005e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ssiClk_GPIO_Port, &GPIO_InitStruct);
 80005e6:	f107 031c 	add.w	r3, r7, #28
 80005ea:	4619      	mov	r1, r3
 80005ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f0:	f000 fd96 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pin : ssiDIO_Pin */
  GPIO_InitStruct.Pin = ssiDIO_Pin;
 80005f4:	2380      	movs	r3, #128	; 0x80
 80005f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80005f8:	2311      	movs	r3, #17
 80005fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005fc:	2301      	movs	r3, #1
 80005fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000600:	2303      	movs	r3, #3
 8000602:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ssiDIO_GPIO_Port, &GPIO_InitStruct);
 8000604:	f107 031c 	add.w	r3, r7, #28
 8000608:	4619      	mov	r1, r3
 800060a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800060e:	f000 fd87 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000612:	f244 0301 	movw	r3, #16385	; 0x4001
 8000616:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000618:	2301      	movs	r3, #1
 800061a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061c:	2300      	movs	r3, #0
 800061e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000620:	2300      	movs	r3, #0
 8000622:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000624:	f107 031c 	add.w	r3, r7, #28
 8000628:	4619      	mov	r1, r3
 800062a:	4827      	ldr	r0, [pc, #156]	; (80006c8 <MX_GPIO_Init+0x200>)
 800062c:	f000 fd78 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pin : testPin_Pin */
  GPIO_InitStruct.Pin = testPin_Pin;
 8000630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000634:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000636:	2301      	movs	r3, #1
 8000638:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	2300      	movs	r3, #0
 800063c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800063e:	2303      	movs	r3, #3
 8000640:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(testPin_GPIO_Port, &GPIO_InitStruct);
 8000642:	f107 031c 	add.w	r3, r7, #28
 8000646:	4619      	mov	r1, r3
 8000648:	481f      	ldr	r0, [pc, #124]	; (80006c8 <MX_GPIO_Init+0x200>)
 800064a:	f000 fd69 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pins : pVPP_Pin pPROG_Pin */
  GPIO_InitStruct.Pin = pVPP_Pin|pPROG_Pin;
 800064e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000652:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000654:	2301      	movs	r3, #1
 8000656:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065c:	2300      	movs	r3, #0
 800065e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000660:	f107 031c 	add.w	r3, r7, #28
 8000664:	4619      	mov	r1, r3
 8000666:	4819      	ldr	r0, [pc, #100]	; (80006cc <MX_GPIO_Init+0x204>)
 8000668:	f000 fd5a 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800066c:	2340      	movs	r3, #64	; 0x40
 800066e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000670:	2301      	movs	r3, #1
 8000672:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000678:	2300      	movs	r3, #0
 800067a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	4813      	ldr	r0, [pc, #76]	; (80006d0 <MX_GPIO_Init+0x208>)
 8000684:	f000 fd4c 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000688:	2380      	movs	r3, #128	; 0x80
 800068a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800068c:	2300      	movs	r3, #0
 800068e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000694:	f107 031c 	add.w	r3, r7, #28
 8000698:	4619      	mov	r1, r3
 800069a:	480d      	ldr	r0, [pc, #52]	; (80006d0 <MX_GPIO_Init+0x208>)
 800069c:	f000 fd40 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006a0:	2380      	movs	r3, #128	; 0x80
 80006a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a4:	2301      	movs	r3, #1
 80006a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80006ac:	2301      	movs	r3, #1
 80006ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006b0:	f107 031c 	add.w	r3, r7, #28
 80006b4:	4619      	mov	r1, r3
 80006b6:	4804      	ldr	r0, [pc, #16]	; (80006c8 <MX_GPIO_Init+0x200>)
 80006b8:	f000 fd32 	bl	8001120 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006bc:	bf00      	nop
 80006be:	3730      	adds	r7, #48	; 0x30
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40021000 	.word	0x40021000
 80006c8:	48000400 	.word	0x48000400
 80006cc:	48000c00 	.word	0x48000c00
 80006d0:	48001800 	.word	0x48001800
 80006d4:	48000800 	.word	0x48000800

080006d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006dc:	b672      	cpsid	i
}
 80006de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <Error_Handler+0x8>
	...

080006e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ea:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <HAL_MspInit+0x44>)
 80006ec:	699b      	ldr	r3, [r3, #24]
 80006ee:	4a0e      	ldr	r2, [pc, #56]	; (8000728 <HAL_MspInit+0x44>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	6193      	str	r3, [r2, #24]
 80006f6:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <HAL_MspInit+0x44>)
 80006f8:	699b      	ldr	r3, [r3, #24]
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <HAL_MspInit+0x44>)
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	4a08      	ldr	r2, [pc, #32]	; (8000728 <HAL_MspInit+0x44>)
 8000708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070c:	61d3      	str	r3, [r2, #28]
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <HAL_MspInit+0x44>)
 8000710:	69db      	ldr	r3, [r3, #28]
 8000712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	40021000 	.word	0x40021000

0800072c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a0d      	ldr	r2, [pc, #52]	; (8000770 <HAL_TIM_Base_MspInit+0x44>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d113      	bne.n	8000766 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800073e:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <HAL_TIM_Base_MspInit+0x48>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	4a0c      	ldr	r2, [pc, #48]	; (8000774 <HAL_TIM_Base_MspInit+0x48>)
 8000744:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000748:	6193      	str	r3, [r2, #24]
 800074a:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <HAL_TIM_Base_MspInit+0x48>)
 800074c:	699b      	ldr	r3, [r3, #24]
 800074e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000756:	2200      	movs	r2, #0
 8000758:	2100      	movs	r1, #0
 800075a:	2019      	movs	r0, #25
 800075c:	f000 fa7b 	bl	8000c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000760:	2019      	movs	r0, #25
 8000762:	f000 fa94 	bl	8000c8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000766:	bf00      	nop
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40012c00 	.word	0x40012c00
 8000774:	40021000 	.word	0x40021000

08000778 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08a      	sub	sp, #40	; 0x28
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a41      	ldr	r2, [pc, #260]	; (800089c <HAL_UART_MspInit+0x124>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d17c      	bne.n	8000894 <HAL_UART_MspInit+0x11c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800079a:	4b41      	ldr	r3, [pc, #260]	; (80008a0 <HAL_UART_MspInit+0x128>)
 800079c:	69db      	ldr	r3, [r3, #28]
 800079e:	4a40      	ldr	r2, [pc, #256]	; (80008a0 <HAL_UART_MspInit+0x128>)
 80007a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007a4:	61d3      	str	r3, [r2, #28]
 80007a6:	4b3e      	ldr	r3, [pc, #248]	; (80008a0 <HAL_UART_MspInit+0x128>)
 80007a8:	69db      	ldr	r3, [r3, #28]
 80007aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b2:	4b3b      	ldr	r3, [pc, #236]	; (80008a0 <HAL_UART_MspInit+0x128>)
 80007b4:	695b      	ldr	r3, [r3, #20]
 80007b6:	4a3a      	ldr	r2, [pc, #232]	; (80008a0 <HAL_UART_MspInit+0x128>)
 80007b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80007bc:	6153      	str	r3, [r2, #20]
 80007be:	4b38      	ldr	r3, [pc, #224]	; (80008a0 <HAL_UART_MspInit+0x128>)
 80007c0:	695b      	ldr	r3, [r3, #20]
 80007c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80007ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d0:	2302      	movs	r3, #2
 80007d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007d8:	2303      	movs	r3, #3
 80007da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80007dc:	2307      	movs	r3, #7
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	4619      	mov	r1, r3
 80007e6:	482f      	ldr	r0, [pc, #188]	; (80008a4 <HAL_UART_MspInit+0x12c>)
 80007e8:	f000 fc9a 	bl	8001120 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80007ec:	4b2e      	ldr	r3, [pc, #184]	; (80008a8 <HAL_UART_MspInit+0x130>)
 80007ee:	4a2f      	ldr	r2, [pc, #188]	; (80008ac <HAL_UART_MspInit+0x134>)
 80007f0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007f2:	4b2d      	ldr	r3, [pc, #180]	; (80008a8 <HAL_UART_MspInit+0x130>)
 80007f4:	2210      	movs	r2, #16
 80007f6:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007f8:	4b2b      	ldr	r3, [pc, #172]	; (80008a8 <HAL_UART_MspInit+0x130>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80007fe:	4b2a      	ldr	r3, [pc, #168]	; (80008a8 <HAL_UART_MspInit+0x130>)
 8000800:	2280      	movs	r2, #128	; 0x80
 8000802:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000804:	4b28      	ldr	r3, [pc, #160]	; (80008a8 <HAL_UART_MspInit+0x130>)
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800080a:	4b27      	ldr	r3, [pc, #156]	; (80008a8 <HAL_UART_MspInit+0x130>)
 800080c:	2200      	movs	r2, #0
 800080e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000810:	4b25      	ldr	r3, [pc, #148]	; (80008a8 <HAL_UART_MspInit+0x130>)
 8000812:	2200      	movs	r2, #0
 8000814:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000816:	4b24      	ldr	r3, [pc, #144]	; (80008a8 <HAL_UART_MspInit+0x130>)
 8000818:	2200      	movs	r2, #0
 800081a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800081c:	4822      	ldr	r0, [pc, #136]	; (80008a8 <HAL_UART_MspInit+0x130>)
 800081e:	f000 fa50 	bl	8000cc2 <HAL_DMA_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8000828:	f7ff ff56 	bl	80006d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	4a1e      	ldr	r2, [pc, #120]	; (80008a8 <HAL_UART_MspInit+0x130>)
 8000830:	671a      	str	r2, [r3, #112]	; 0x70
 8000832:	4a1d      	ldr	r2, [pc, #116]	; (80008a8 <HAL_UART_MspInit+0x130>)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8000838:	4b1d      	ldr	r3, [pc, #116]	; (80008b0 <HAL_UART_MspInit+0x138>)
 800083a:	4a1e      	ldr	r2, [pc, #120]	; (80008b4 <HAL_UART_MspInit+0x13c>)
 800083c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800083e:	4b1c      	ldr	r3, [pc, #112]	; (80008b0 <HAL_UART_MspInit+0x138>)
 8000840:	2200      	movs	r2, #0
 8000842:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000844:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <HAL_UART_MspInit+0x138>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800084a:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <HAL_UART_MspInit+0x138>)
 800084c:	2280      	movs	r2, #128	; 0x80
 800084e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000850:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <HAL_UART_MspInit+0x138>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000856:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <HAL_UART_MspInit+0x138>)
 8000858:	2200      	movs	r2, #0
 800085a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800085c:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <HAL_UART_MspInit+0x138>)
 800085e:	2200      	movs	r2, #0
 8000860:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000862:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <HAL_UART_MspInit+0x138>)
 8000864:	2200      	movs	r2, #0
 8000866:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000868:	4811      	ldr	r0, [pc, #68]	; (80008b0 <HAL_UART_MspInit+0x138>)
 800086a:	f000 fa2a 	bl	8000cc2 <HAL_DMA_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 8000874:	f7ff ff30 	bl	80006d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4a0d      	ldr	r2, [pc, #52]	; (80008b0 <HAL_UART_MspInit+0x138>)
 800087c:	675a      	str	r2, [r3, #116]	; 0x74
 800087e:	4a0c      	ldr	r2, [pc, #48]	; (80008b0 <HAL_UART_MspInit+0x138>)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000884:	2200      	movs	r2, #0
 8000886:	2100      	movs	r1, #0
 8000888:	2027      	movs	r0, #39	; 0x27
 800088a:	f000 f9e4 	bl	8000c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800088e:	2027      	movs	r0, #39	; 0x27
 8000890:	f000 f9fd 	bl	8000c8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000894:	bf00      	nop
 8000896:	3728      	adds	r7, #40	; 0x28
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40004800 	.word	0x40004800
 80008a0:	40021000 	.word	0x40021000
 80008a4:	48000c00 	.word	0x48000c00
 80008a8:	200008f4 	.word	0x200008f4
 80008ac:	4002001c 	.word	0x4002001c
 80008b0:	20000938 	.word	0x20000938
 80008b4:	40020030 	.word	0x40020030

080008b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <NMI_Handler+0x4>

080008be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c2:	e7fe      	b.n	80008c2 <HardFault_Handler+0x4>

080008c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <MemManage_Handler+0x4>

080008ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ce:	e7fe      	b.n	80008ce <BusFault_Handler+0x4>

080008d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <UsageFault_Handler+0x4>

080008d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr

080008f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000904:	f000 f8ac 	bl	8000a60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}

0800090c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000910:	4802      	ldr	r0, [pc, #8]	; (800091c <DMA1_Channel2_IRQHandler+0x10>)
 8000912:	f000 faf8 	bl	8000f06 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	200008f4 	.word	0x200008f4

08000920 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000924:	4802      	ldr	r0, [pc, #8]	; (8000930 <DMA1_Channel3_IRQHandler+0x10>)
 8000926:	f000 faee 	bl	8000f06 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000938 	.word	0x20000938

08000934 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000938:	4802      	ldr	r0, [pc, #8]	; (8000944 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800093a:	f002 fb4e 	bl	8002fda <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000820 	.word	0x20000820

08000948 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800094c:	4802      	ldr	r0, [pc, #8]	; (8000958 <USART3_IRQHandler+0x10>)
 800094e:	f002 ffef 	bl	8003930 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	2000086c 	.word	0x2000086c

0800095c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <SystemInit+0x20>)
 8000962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000966:	4a05      	ldr	r2, [pc, #20]	; (800097c <SystemInit+0x20>)
 8000968:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800096c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000980:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009b8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000984:	f7ff ffea 	bl	800095c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000988:	480c      	ldr	r0, [pc, #48]	; (80009bc <LoopForever+0x6>)
  ldr r1, =_edata
 800098a:	490d      	ldr	r1, [pc, #52]	; (80009c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800098c:	4a0d      	ldr	r2, [pc, #52]	; (80009c4 <LoopForever+0xe>)
  movs r3, #0
 800098e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000990:	e002      	b.n	8000998 <LoopCopyDataInit>

08000992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000996:	3304      	adds	r3, #4

08000998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800099c:	d3f9      	bcc.n	8000992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099e:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009a0:	4c0a      	ldr	r4, [pc, #40]	; (80009cc <LoopForever+0x16>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a4:	e001      	b.n	80009aa <LoopFillZerobss>

080009a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a8:	3204      	adds	r2, #4

080009aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ac:	d3fb      	bcc.n	80009a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009ae:	f004 feab 	bl	8005708 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009b2:	f7ff fc0f 	bl	80001d4 <main>

080009b6 <LoopForever>:

LoopForever:
    b LoopForever
 80009b6:	e7fe      	b.n	80009b6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009b8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80009bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c0:	20000804 	.word	0x20000804
  ldr r2, =_sidata
 80009c4:	080057d4 	.word	0x080057d4
  ldr r2, =_sbss
 80009c8:	20000804 	.word	0x20000804
  ldr r4, =_ebss
 80009cc:	200011dc 	.word	0x200011dc

080009d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009d0:	e7fe      	b.n	80009d0 <ADC1_2_IRQHandler>
	...

080009d4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d8:	4b08      	ldr	r3, [pc, #32]	; (80009fc <HAL_Init+0x28>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a07      	ldr	r2, [pc, #28]	; (80009fc <HAL_Init+0x28>)
 80009de:	f043 0310 	orr.w	r3, r3, #16
 80009e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e4:	2003      	movs	r0, #3
 80009e6:	f000 f92b 	bl	8000c40 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ea:	2000      	movs	r0, #0
 80009ec:	f000 f808 	bl	8000a00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009f0:	f7ff fe78 	bl	80006e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009f4:	2300      	movs	r3, #0
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40022000 	.word	0x40022000

08000a00 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <HAL_InitTick+0x54>)
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <HAL_InitTick+0x58>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	4619      	mov	r1, r3
 8000a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f000 f943 	bl	8000caa <HAL_SYSTICK_Config>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e00e      	b.n	8000a4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2b0f      	cmp	r3, #15
 8000a32:	d80a      	bhi.n	8000a4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a34:	2200      	movs	r2, #0
 8000a36:	6879      	ldr	r1, [r7, #4]
 8000a38:	f04f 30ff 	mov.w	r0, #4294967295
 8000a3c:	f000 f90b 	bl	8000c56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a40:	4a06      	ldr	r2, [pc, #24]	; (8000a5c <HAL_InitTick+0x5c>)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a46:	2300      	movs	r3, #0
 8000a48:	e000      	b.n	8000a4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000000 	.word	0x20000000
 8000a58:	20000008 	.word	0x20000008
 8000a5c:	20000004 	.word	0x20000004

08000a60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <HAL_IncTick+0x20>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <HAL_IncTick+0x24>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4413      	add	r3, r2
 8000a70:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <HAL_IncTick+0x24>)
 8000a72:	6013      	str	r3, [r2, #0]
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	20000008 	.word	0x20000008
 8000a84:	2000099c 	.word	0x2000099c

08000a88 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a8c:	4b03      	ldr	r3, [pc, #12]	; (8000a9c <HAL_GetTick+0x14>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	2000099c 	.word	0x2000099c

08000aa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f003 0307 	and.w	r3, r3, #7
 8000aae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ab6:	68ba      	ldr	r2, [r7, #8]
 8000ab8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000abc:	4013      	ands	r3, r2
 8000abe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ad0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ad2:	4a04      	ldr	r2, [pc, #16]	; (8000ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	60d3      	str	r3, [r2, #12]
}
 8000ad8:	bf00      	nop
 8000ada:	3714      	adds	r7, #20
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aec:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <__NVIC_GetPriorityGrouping+0x18>)
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	0a1b      	lsrs	r3, r3, #8
 8000af2:	f003 0307 	and.w	r3, r3, #7
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	db0b      	blt.n	8000b2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	f003 021f 	and.w	r2, r3, #31
 8000b1c:	4907      	ldr	r1, [pc, #28]	; (8000b3c <__NVIC_EnableIRQ+0x38>)
 8000b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b22:	095b      	lsrs	r3, r3, #5
 8000b24:	2001      	movs	r0, #1
 8000b26:	fa00 f202 	lsl.w	r2, r0, r2
 8000b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	e000e100 	.word	0xe000e100

08000b40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	6039      	str	r1, [r7, #0]
 8000b4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	db0a      	blt.n	8000b6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	b2da      	uxtb	r2, r3
 8000b58:	490c      	ldr	r1, [pc, #48]	; (8000b8c <__NVIC_SetPriority+0x4c>)
 8000b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5e:	0112      	lsls	r2, r2, #4
 8000b60:	b2d2      	uxtb	r2, r2
 8000b62:	440b      	add	r3, r1
 8000b64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b68:	e00a      	b.n	8000b80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	b2da      	uxtb	r2, r3
 8000b6e:	4908      	ldr	r1, [pc, #32]	; (8000b90 <__NVIC_SetPriority+0x50>)
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	f003 030f 	and.w	r3, r3, #15
 8000b76:	3b04      	subs	r3, #4
 8000b78:	0112      	lsls	r2, r2, #4
 8000b7a:	b2d2      	uxtb	r2, r2
 8000b7c:	440b      	add	r3, r1
 8000b7e:	761a      	strb	r2, [r3, #24]
}
 8000b80:	bf00      	nop
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	e000e100 	.word	0xe000e100
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b089      	sub	sp, #36	; 0x24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	f003 0307 	and.w	r3, r3, #7
 8000ba6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba8:	69fb      	ldr	r3, [r7, #28]
 8000baa:	f1c3 0307 	rsb	r3, r3, #7
 8000bae:	2b04      	cmp	r3, #4
 8000bb0:	bf28      	it	cs
 8000bb2:	2304      	movcs	r3, #4
 8000bb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	3304      	adds	r3, #4
 8000bba:	2b06      	cmp	r3, #6
 8000bbc:	d902      	bls.n	8000bc4 <NVIC_EncodePriority+0x30>
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	3b03      	subs	r3, #3
 8000bc2:	e000      	b.n	8000bc6 <NVIC_EncodePriority+0x32>
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	43da      	mvns	r2, r3
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	401a      	ands	r2, r3
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	fa01 f303 	lsl.w	r3, r1, r3
 8000be6:	43d9      	mvns	r1, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bec:	4313      	orrs	r3, r2
         );
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3724      	adds	r7, #36	; 0x24
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
	...

08000bfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c0c:	d301      	bcc.n	8000c12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e00f      	b.n	8000c32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c12:	4a0a      	ldr	r2, [pc, #40]	; (8000c3c <SysTick_Config+0x40>)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c1a:	210f      	movs	r1, #15
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	f7ff ff8e 	bl	8000b40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c24:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <SysTick_Config+0x40>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c2a:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <SysTick_Config+0x40>)
 8000c2c:	2207      	movs	r2, #7
 8000c2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	e000e010 	.word	0xe000e010

08000c40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f7ff ff29 	bl	8000aa0 <__NVIC_SetPriorityGrouping>
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b086      	sub	sp, #24
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	60b9      	str	r1, [r7, #8]
 8000c60:	607a      	str	r2, [r7, #4]
 8000c62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c68:	f7ff ff3e 	bl	8000ae8 <__NVIC_GetPriorityGrouping>
 8000c6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	68b9      	ldr	r1, [r7, #8]
 8000c72:	6978      	ldr	r0, [r7, #20]
 8000c74:	f7ff ff8e 	bl	8000b94 <NVIC_EncodePriority>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c7e:	4611      	mov	r1, r2
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff ff5d 	bl	8000b40 <__NVIC_SetPriority>
}
 8000c86:	bf00      	nop
 8000c88:	3718      	adds	r7, #24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	4603      	mov	r3, r0
 8000c96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff ff31 	bl	8000b04 <__NVIC_EnableIRQ>
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b082      	sub	sp, #8
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f7ff ffa2 	bl	8000bfc <SysTick_Config>
 8000cb8:	4603      	mov	r3, r0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b084      	sub	sp, #16
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d101      	bne.n	8000cd8 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	e037      	b.n	8000d48 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2202      	movs	r2, #2
 8000cdc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000cee:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000cf2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000cfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	68db      	ldr	r3, [r3, #12]
 8000d02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	695b      	ldr	r3, [r3, #20]
 8000d0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	69db      	ldr	r3, [r3, #28]
 8000d1a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d1c:	68fa      	ldr	r2, [r7, #12]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f000 f9bc 	bl	80010a8 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2200      	movs	r2, #0
 8000d34:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2201      	movs	r2, #1
 8000d3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2200      	movs	r2, #0
 8000d42:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000d46:	2300      	movs	r3, #0
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
 8000d5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d101      	bne.n	8000d70 <HAL_DMA_Start_IT+0x20>
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	e04a      	b.n	8000e06 <HAL_DMA_Start_IT+0xb6>
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	2201      	movs	r2, #1
 8000d74:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d13a      	bne.n	8000df8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	2202      	movs	r2, #2
 8000d86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f022 0201 	bic.w	r2, r2, #1
 8000d9e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	68b9      	ldr	r1, [r7, #8]
 8000da6:	68f8      	ldr	r0, [r7, #12]
 8000da8:	f000 f950 	bl	800104c <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d008      	beq.n	8000dc6 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f042 020e 	orr.w	r2, r2, #14
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	e00f      	b.n	8000de6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f042 020a 	orr.w	r2, r2, #10
 8000dd4:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f022 0204 	bic.w	r2, r2, #4
 8000de4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f042 0201 	orr.w	r2, r2, #1
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	e005      	b.n	8000e04 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000e00:	2302      	movs	r3, #2
 8000e02:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8000e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3718      	adds	r7, #24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	b083      	sub	sp, #12
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d101      	bne.n	8000e20 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	e02e      	b.n	8000e7e <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d008      	beq.n	8000e3c <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2204      	movs	r2, #4
 8000e2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2200      	movs	r2, #0
 8000e34:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	e020      	b.n	8000e7e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f022 020e 	bic.w	r2, r2, #14
 8000e4a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f022 0201 	bic.w	r2, r2, #1
 8000e5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e64:	2101      	movs	r1, #1
 8000e66:	fa01 f202 	lsl.w	r2, r1, r2
 8000e6a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2201      	movs	r2, #1
 8000e70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2200      	movs	r2, #0
 8000e78:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b084      	sub	sp, #16
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e92:	2300      	movs	r3, #0
 8000e94:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d005      	beq.n	8000eac <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2204      	movs	r2, #4
 8000ea4:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	73fb      	strb	r3, [r7, #15]
 8000eaa:	e027      	b.n	8000efc <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f022 020e 	bic.w	r2, r2, #14
 8000eba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f022 0201 	bic.w	r2, r2, #1
 8000eca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eda:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d003      	beq.n	8000efc <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	4798      	blx	r3
    }
  }
  return status;
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b084      	sub	sp, #16
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f22:	2204      	movs	r2, #4
 8000f24:	409a      	lsls	r2, r3
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d024      	beq.n	8000f78 <HAL_DMA_IRQHandler+0x72>
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	f003 0304 	and.w	r3, r3, #4
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d01f      	beq.n	8000f78 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f003 0320 	and.w	r3, r3, #32
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d107      	bne.n	8000f56 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f022 0204 	bic.w	r2, r2, #4
 8000f54:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f5e:	2104      	movs	r1, #4
 8000f60:	fa01 f202 	lsl.w	r2, r1, r2
 8000f64:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d06a      	beq.n	8001044 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000f76:	e065      	b.n	8001044 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7c:	2202      	movs	r2, #2
 8000f7e:	409a      	lsls	r2, r3
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	4013      	ands	r3, r2
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d02c      	beq.n	8000fe2 <HAL_DMA_IRQHandler+0xdc>
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d027      	beq.n	8000fe2 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 0320 	and.w	r3, r3, #32
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d10b      	bne.n	8000fb8 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f022 020a 	bic.w	r2, r2, #10
 8000fae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fc0:	2102      	movs	r1, #2
 8000fc2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d035      	beq.n	8001044 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000fe0:	e030      	b.n	8001044 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	2208      	movs	r2, #8
 8000fe8:	409a      	lsls	r2, r3
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	4013      	ands	r3, r2
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d028      	beq.n	8001044 <HAL_DMA_IRQHandler+0x13e>
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	f003 0308 	and.w	r3, r3, #8
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d023      	beq.n	8001044 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f022 020e 	bic.w	r2, r2, #14
 800100a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001014:	2101      	movs	r1, #1
 8001016:	fa01 f202 	lsl.w	r2, r1, r2
 800101a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2201      	movs	r2, #1
 8001020:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2201      	movs	r2, #1
 8001026:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	2b00      	cmp	r3, #0
 8001038:	d004      	beq.n	8001044 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	4798      	blx	r3
    }
  }
}
 8001042:	e7ff      	b.n	8001044 <HAL_DMA_IRQHandler+0x13e>
 8001044:	bf00      	nop
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
 8001058:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001062:	2101      	movs	r1, #1
 8001064:	fa01 f202 	lsl.w	r2, r1, r2
 8001068:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	683a      	ldr	r2, [r7, #0]
 8001070:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	2b10      	cmp	r3, #16
 8001078:	d108      	bne.n	800108c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	68ba      	ldr	r2, [r7, #8]
 8001088:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800108a:	e007      	b.n	800109c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	68ba      	ldr	r2, [r7, #8]
 8001092:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	60da      	str	r2, [r3, #12]
}
 800109c:	bf00      	nop
 800109e:	3714      	adds	r7, #20
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b14      	ldr	r3, [pc, #80]	; (8001108 <DMA_CalcBaseAndBitshift+0x60>)
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d80f      	bhi.n	80010dc <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	461a      	mov	r2, r3
 80010c2:	4b12      	ldr	r3, [pc, #72]	; (800110c <DMA_CalcBaseAndBitshift+0x64>)
 80010c4:	4413      	add	r3, r2
 80010c6:	4a12      	ldr	r2, [pc, #72]	; (8001110 <DMA_CalcBaseAndBitshift+0x68>)
 80010c8:	fba2 2303 	umull	r2, r3, r2, r3
 80010cc:	091b      	lsrs	r3, r3, #4
 80010ce:	009a      	lsls	r2, r3, #2
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a0f      	ldr	r2, [pc, #60]	; (8001114 <DMA_CalcBaseAndBitshift+0x6c>)
 80010d8:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80010da:	e00e      	b.n	80010fa <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <DMA_CalcBaseAndBitshift+0x70>)
 80010e4:	4413      	add	r3, r2
 80010e6:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <DMA_CalcBaseAndBitshift+0x68>)
 80010e8:	fba2 2303 	umull	r2, r3, r2, r3
 80010ec:	091b      	lsrs	r3, r3, #4
 80010ee:	009a      	lsls	r2, r3, #2
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a09      	ldr	r2, [pc, #36]	; (800111c <DMA_CalcBaseAndBitshift+0x74>)
 80010f8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	40020407 	.word	0x40020407
 800110c:	bffdfff8 	.word	0xbffdfff8
 8001110:	cccccccd 	.word	0xcccccccd
 8001114:	40020000 	.word	0x40020000
 8001118:	bffdfbf8 	.word	0xbffdfbf8
 800111c:	40020400 	.word	0x40020400

08001120 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001120:	b480      	push	{r7}
 8001122:	b087      	sub	sp, #28
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800112e:	e160      	b.n	80013f2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	2101      	movs	r1, #1
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	fa01 f303 	lsl.w	r3, r1, r3
 800113c:	4013      	ands	r3, r2
 800113e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2b00      	cmp	r3, #0
 8001144:	f000 8152 	beq.w	80013ec <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 0303 	and.w	r3, r3, #3
 8001150:	2b01      	cmp	r3, #1
 8001152:	d005      	beq.n	8001160 <HAL_GPIO_Init+0x40>
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 0303 	and.w	r3, r3, #3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d130      	bne.n	80011c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	2203      	movs	r2, #3
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4013      	ands	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	68da      	ldr	r2, [r3, #12]
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	4313      	orrs	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001196:	2201      	movs	r2, #1
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	4013      	ands	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	091b      	lsrs	r3, r3, #4
 80011ac:	f003 0201 	and.w	r2, r3, #1
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 0303 	and.w	r3, r3, #3
 80011ca:	2b03      	cmp	r3, #3
 80011cc:	d017      	beq.n	80011fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	2203      	movs	r2, #3
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	43db      	mvns	r3, r3
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	4013      	ands	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	689a      	ldr	r2, [r3, #8]
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f003 0303 	and.w	r3, r3, #3
 8001206:	2b02      	cmp	r3, #2
 8001208:	d123      	bne.n	8001252 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	08da      	lsrs	r2, r3, #3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	3208      	adds	r2, #8
 8001212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001216:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	220f      	movs	r2, #15
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43db      	mvns	r3, r3
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	4013      	ands	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	691a      	ldr	r2, [r3, #16]
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	f003 0307 	and.w	r3, r3, #7
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	08da      	lsrs	r2, r3, #3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3208      	adds	r2, #8
 800124c:	6939      	ldr	r1, [r7, #16]
 800124e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	2203      	movs	r2, #3
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43db      	mvns	r3, r3
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	4013      	ands	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f003 0203 	and.w	r2, r3, #3
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800128e:	2b00      	cmp	r3, #0
 8001290:	f000 80ac 	beq.w	80013ec <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001294:	4b5e      	ldr	r3, [pc, #376]	; (8001410 <HAL_GPIO_Init+0x2f0>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	4a5d      	ldr	r2, [pc, #372]	; (8001410 <HAL_GPIO_Init+0x2f0>)
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	6193      	str	r3, [r2, #24]
 80012a0:	4b5b      	ldr	r3, [pc, #364]	; (8001410 <HAL_GPIO_Init+0x2f0>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012ac:	4a59      	ldr	r2, [pc, #356]	; (8001414 <HAL_GPIO_Init+0x2f4>)
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	089b      	lsrs	r3, r3, #2
 80012b2:	3302      	adds	r3, #2
 80012b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	f003 0303 	and.w	r3, r3, #3
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	220f      	movs	r2, #15
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4013      	ands	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012d6:	d025      	beq.n	8001324 <HAL_GPIO_Init+0x204>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a4f      	ldr	r2, [pc, #316]	; (8001418 <HAL_GPIO_Init+0x2f8>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d01f      	beq.n	8001320 <HAL_GPIO_Init+0x200>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a4e      	ldr	r2, [pc, #312]	; (800141c <HAL_GPIO_Init+0x2fc>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d019      	beq.n	800131c <HAL_GPIO_Init+0x1fc>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a4d      	ldr	r2, [pc, #308]	; (8001420 <HAL_GPIO_Init+0x300>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d013      	beq.n	8001318 <HAL_GPIO_Init+0x1f8>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a4c      	ldr	r2, [pc, #304]	; (8001424 <HAL_GPIO_Init+0x304>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d00d      	beq.n	8001314 <HAL_GPIO_Init+0x1f4>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a4b      	ldr	r2, [pc, #300]	; (8001428 <HAL_GPIO_Init+0x308>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d007      	beq.n	8001310 <HAL_GPIO_Init+0x1f0>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a4a      	ldr	r2, [pc, #296]	; (800142c <HAL_GPIO_Init+0x30c>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d101      	bne.n	800130c <HAL_GPIO_Init+0x1ec>
 8001308:	2306      	movs	r3, #6
 800130a:	e00c      	b.n	8001326 <HAL_GPIO_Init+0x206>
 800130c:	2307      	movs	r3, #7
 800130e:	e00a      	b.n	8001326 <HAL_GPIO_Init+0x206>
 8001310:	2305      	movs	r3, #5
 8001312:	e008      	b.n	8001326 <HAL_GPIO_Init+0x206>
 8001314:	2304      	movs	r3, #4
 8001316:	e006      	b.n	8001326 <HAL_GPIO_Init+0x206>
 8001318:	2303      	movs	r3, #3
 800131a:	e004      	b.n	8001326 <HAL_GPIO_Init+0x206>
 800131c:	2302      	movs	r3, #2
 800131e:	e002      	b.n	8001326 <HAL_GPIO_Init+0x206>
 8001320:	2301      	movs	r3, #1
 8001322:	e000      	b.n	8001326 <HAL_GPIO_Init+0x206>
 8001324:	2300      	movs	r3, #0
 8001326:	697a      	ldr	r2, [r7, #20]
 8001328:	f002 0203 	and.w	r2, r2, #3
 800132c:	0092      	lsls	r2, r2, #2
 800132e:	4093      	lsls	r3, r2
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	4313      	orrs	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001336:	4937      	ldr	r1, [pc, #220]	; (8001414 <HAL_GPIO_Init+0x2f4>)
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	089b      	lsrs	r3, r3, #2
 800133c:	3302      	adds	r3, #2
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001344:	4b3a      	ldr	r3, [pc, #232]	; (8001430 <HAL_GPIO_Init+0x310>)
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	43db      	mvns	r3, r3
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	4013      	ands	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	4313      	orrs	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001368:	4a31      	ldr	r2, [pc, #196]	; (8001430 <HAL_GPIO_Init+0x310>)
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800136e:	4b30      	ldr	r3, [pc, #192]	; (8001430 <HAL_GPIO_Init+0x310>)
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	43db      	mvns	r3, r3
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	4013      	ands	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4313      	orrs	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001392:	4a27      	ldr	r2, [pc, #156]	; (8001430 <HAL_GPIO_Init+0x310>)
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001398:	4b25      	ldr	r3, [pc, #148]	; (8001430 <HAL_GPIO_Init+0x310>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4013      	ands	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013bc:	4a1c      	ldr	r2, [pc, #112]	; (8001430 <HAL_GPIO_Init+0x310>)
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013c2:	4b1b      	ldr	r3, [pc, #108]	; (8001430 <HAL_GPIO_Init+0x310>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	43db      	mvns	r3, r3
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	4013      	ands	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013e6:	4a12      	ldr	r2, [pc, #72]	; (8001430 <HAL_GPIO_Init+0x310>)
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	3301      	adds	r3, #1
 80013f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	fa22 f303 	lsr.w	r3, r2, r3
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	f47f ae97 	bne.w	8001130 <HAL_GPIO_Init+0x10>
  }
}
 8001402:	bf00      	nop
 8001404:	bf00      	nop
 8001406:	371c      	adds	r7, #28
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	40021000 	.word	0x40021000
 8001414:	40010000 	.word	0x40010000
 8001418:	48000400 	.word	0x48000400
 800141c:	48000800 	.word	0x48000800
 8001420:	48000c00 	.word	0x48000c00
 8001424:	48001000 	.word	0x48001000
 8001428:	48001400 	.word	0x48001400
 800142c:	48001800 	.word	0x48001800
 8001430:	40010400 	.word	0x40010400

08001434 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	691a      	ldr	r2, [r3, #16]
 8001444:	887b      	ldrh	r3, [r7, #2]
 8001446:	4013      	ands	r3, r2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d002      	beq.n	8001452 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800144c:	2301      	movs	r3, #1
 800144e:	73fb      	strb	r3, [r7, #15]
 8001450:	e001      	b.n	8001456 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001452:	2300      	movs	r3, #0
 8001454:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001456:	7bfb      	ldrb	r3, [r7, #15]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	807b      	strh	r3, [r7, #2]
 8001470:	4613      	mov	r3, r2
 8001472:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001474:	787b      	ldrb	r3, [r7, #1]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800147a:	887a      	ldrh	r2, [r7, #2]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001480:	e002      	b.n	8001488 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001482:	887a      	ldrh	r2, [r7, #2]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	460b      	mov	r3, r1
 800149e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	695b      	ldr	r3, [r3, #20]
 80014a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014a6:	887a      	ldrh	r2, [r7, #2]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4013      	ands	r3, r2
 80014ac:	041a      	lsls	r2, r3, #16
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	43d9      	mvns	r1, r3
 80014b2:	887b      	ldrh	r3, [r7, #2]
 80014b4:	400b      	ands	r3, r1
 80014b6:	431a      	orrs	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	619a      	str	r2, [r3, #24]
}
 80014bc:	bf00      	nop
 80014be:	3714      	adds	r7, #20
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014d4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014d8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014de:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d102      	bne.n	80014ee <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	f001 b83a 	b.w	8002562 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014f2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f000 816f 	beq.w	80017e2 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001504:	4bb5      	ldr	r3, [pc, #724]	; (80017dc <HAL_RCC_OscConfig+0x314>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f003 030c 	and.w	r3, r3, #12
 800150c:	2b04      	cmp	r3, #4
 800150e:	d00c      	beq.n	800152a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001510:	4bb2      	ldr	r3, [pc, #712]	; (80017dc <HAL_RCC_OscConfig+0x314>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f003 030c 	and.w	r3, r3, #12
 8001518:	2b08      	cmp	r3, #8
 800151a:	d15c      	bne.n	80015d6 <HAL_RCC_OscConfig+0x10e>
 800151c:	4baf      	ldr	r3, [pc, #700]	; (80017dc <HAL_RCC_OscConfig+0x314>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001528:	d155      	bne.n	80015d6 <HAL_RCC_OscConfig+0x10e>
 800152a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800152e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001532:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001536:	fa93 f3a3 	rbit	r3, r3
 800153a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800153e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001542:	fab3 f383 	clz	r3, r3
 8001546:	b2db      	uxtb	r3, r3
 8001548:	095b      	lsrs	r3, r3, #5
 800154a:	b2db      	uxtb	r3, r3
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b01      	cmp	r3, #1
 8001554:	d102      	bne.n	800155c <HAL_RCC_OscConfig+0x94>
 8001556:	4ba1      	ldr	r3, [pc, #644]	; (80017dc <HAL_RCC_OscConfig+0x314>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	e015      	b.n	8001588 <HAL_RCC_OscConfig+0xc0>
 800155c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001560:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001564:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001568:	fa93 f3a3 	rbit	r3, r3
 800156c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001570:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001574:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001578:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800157c:	fa93 f3a3 	rbit	r3, r3
 8001580:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001584:	4b95      	ldr	r3, [pc, #596]	; (80017dc <HAL_RCC_OscConfig+0x314>)
 8001586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001588:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800158c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001590:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001594:	fa92 f2a2 	rbit	r2, r2
 8001598:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800159c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80015a0:	fab2 f282 	clz	r2, r2
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	f042 0220 	orr.w	r2, r2, #32
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	f002 021f 	and.w	r2, r2, #31
 80015b0:	2101      	movs	r1, #1
 80015b2:	fa01 f202 	lsl.w	r2, r1, r2
 80015b6:	4013      	ands	r3, r2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f000 8111 	beq.w	80017e0 <HAL_RCC_OscConfig+0x318>
 80015be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f040 8108 	bne.w	80017e0 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	f000 bfc6 	b.w	8002562 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015da:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015e6:	d106      	bne.n	80015f6 <HAL_RCC_OscConfig+0x12e>
 80015e8:	4b7c      	ldr	r3, [pc, #496]	; (80017dc <HAL_RCC_OscConfig+0x314>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a7b      	ldr	r2, [pc, #492]	; (80017dc <HAL_RCC_OscConfig+0x314>)
 80015ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f2:	6013      	str	r3, [r2, #0]
 80015f4:	e036      	b.n	8001664 <HAL_RCC_OscConfig+0x19c>
 80015f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015fa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d10c      	bne.n	8001620 <HAL_RCC_OscConfig+0x158>
 8001606:	4b75      	ldr	r3, [pc, #468]	; (80017dc <HAL_RCC_OscConfig+0x314>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a74      	ldr	r2, [pc, #464]	; (80017dc <HAL_RCC_OscConfig+0x314>)
 800160c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	4b72      	ldr	r3, [pc, #456]	; (80017dc <HAL_RCC_OscConfig+0x314>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a71      	ldr	r2, [pc, #452]	; (80017dc <HAL_RCC_OscConfig+0x314>)
 8001618:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	e021      	b.n	8001664 <HAL_RCC_OscConfig+0x19c>
 8001620:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001624:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001630:	d10c      	bne.n	800164c <HAL_RCC_OscConfig+0x184>
 8001632:	4b6a      	ldr	r3, [pc, #424]	; (80017dc <HAL_RCC_OscConfig+0x314>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a69      	ldr	r2, [pc, #420]	; (80017dc <HAL_RCC_OscConfig+0x314>)
 8001638:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	4b67      	ldr	r3, [pc, #412]	; (80017dc <HAL_RCC_OscConfig+0x314>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a66      	ldr	r2, [pc, #408]	; (80017dc <HAL_RCC_OscConfig+0x314>)
 8001644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	e00b      	b.n	8001664 <HAL_RCC_OscConfig+0x19c>
 800164c:	4b63      	ldr	r3, [pc, #396]	; (80017dc <HAL_RCC_OscConfig+0x314>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a62      	ldr	r2, [pc, #392]	; (80017dc <HAL_RCC_OscConfig+0x314>)
 8001652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001656:	6013      	str	r3, [r2, #0]
 8001658:	4b60      	ldr	r3, [pc, #384]	; (80017dc <HAL_RCC_OscConfig+0x314>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a5f      	ldr	r2, [pc, #380]	; (80017dc <HAL_RCC_OscConfig+0x314>)
 800165e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001662:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001664:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001668:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d059      	beq.n	8001728 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001674:	f7ff fa08 	bl	8000a88 <HAL_GetTick>
 8001678:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167c:	e00a      	b.n	8001694 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800167e:	f7ff fa03 	bl	8000a88 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b64      	cmp	r3, #100	; 0x64
 800168c:	d902      	bls.n	8001694 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	f000 bf67 	b.w	8002562 <HAL_RCC_OscConfig+0x109a>
 8001694:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001698:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80016a0:	fa93 f3a3 	rbit	r3, r3
 80016a4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80016a8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ac:	fab3 f383 	clz	r3, r3
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	095b      	lsrs	r3, r3, #5
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d102      	bne.n	80016c6 <HAL_RCC_OscConfig+0x1fe>
 80016c0:	4b46      	ldr	r3, [pc, #280]	; (80017dc <HAL_RCC_OscConfig+0x314>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	e015      	b.n	80016f2 <HAL_RCC_OscConfig+0x22a>
 80016c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016ca:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ce:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80016d2:	fa93 f3a3 	rbit	r3, r3
 80016d6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80016da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016de:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80016e2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80016e6:	fa93 f3a3 	rbit	r3, r3
 80016ea:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80016ee:	4b3b      	ldr	r3, [pc, #236]	; (80017dc <HAL_RCC_OscConfig+0x314>)
 80016f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016f6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80016fa:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80016fe:	fa92 f2a2 	rbit	r2, r2
 8001702:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001706:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800170a:	fab2 f282 	clz	r2, r2
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	f042 0220 	orr.w	r2, r2, #32
 8001714:	b2d2      	uxtb	r2, r2
 8001716:	f002 021f 	and.w	r2, r2, #31
 800171a:	2101      	movs	r1, #1
 800171c:	fa01 f202 	lsl.w	r2, r1, r2
 8001720:	4013      	ands	r3, r2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0ab      	beq.n	800167e <HAL_RCC_OscConfig+0x1b6>
 8001726:	e05c      	b.n	80017e2 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001728:	f7ff f9ae 	bl	8000a88 <HAL_GetTick>
 800172c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001730:	e00a      	b.n	8001748 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001732:	f7ff f9a9 	bl	8000a88 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b64      	cmp	r3, #100	; 0x64
 8001740:	d902      	bls.n	8001748 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	f000 bf0d 	b.w	8002562 <HAL_RCC_OscConfig+0x109a>
 8001748:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800174c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001750:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001754:	fa93 f3a3 	rbit	r3, r3
 8001758:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800175c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001760:	fab3 f383 	clz	r3, r3
 8001764:	b2db      	uxtb	r3, r3
 8001766:	095b      	lsrs	r3, r3, #5
 8001768:	b2db      	uxtb	r3, r3
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	b2db      	uxtb	r3, r3
 8001770:	2b01      	cmp	r3, #1
 8001772:	d102      	bne.n	800177a <HAL_RCC_OscConfig+0x2b2>
 8001774:	4b19      	ldr	r3, [pc, #100]	; (80017dc <HAL_RCC_OscConfig+0x314>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	e015      	b.n	80017a6 <HAL_RCC_OscConfig+0x2de>
 800177a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800177e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001782:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001786:	fa93 f3a3 	rbit	r3, r3
 800178a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800178e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001792:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001796:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800179a:	fa93 f3a3 	rbit	r3, r3
 800179e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <HAL_RCC_OscConfig+0x314>)
 80017a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017aa:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80017ae:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80017b2:	fa92 f2a2 	rbit	r2, r2
 80017b6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80017ba:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80017be:	fab2 f282 	clz	r2, r2
 80017c2:	b2d2      	uxtb	r2, r2
 80017c4:	f042 0220 	orr.w	r2, r2, #32
 80017c8:	b2d2      	uxtb	r2, r2
 80017ca:	f002 021f 	and.w	r2, r2, #31
 80017ce:	2101      	movs	r1, #1
 80017d0:	fa01 f202 	lsl.w	r2, r1, r2
 80017d4:	4013      	ands	r3, r2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1ab      	bne.n	8001732 <HAL_RCC_OscConfig+0x26a>
 80017da:	e002      	b.n	80017e2 <HAL_RCC_OscConfig+0x31a>
 80017dc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017e6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 817f 	beq.w	8001af6 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80017f8:	4ba7      	ldr	r3, [pc, #668]	; (8001a98 <HAL_RCC_OscConfig+0x5d0>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 030c 	and.w	r3, r3, #12
 8001800:	2b00      	cmp	r3, #0
 8001802:	d00c      	beq.n	800181e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001804:	4ba4      	ldr	r3, [pc, #656]	; (8001a98 <HAL_RCC_OscConfig+0x5d0>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 030c 	and.w	r3, r3, #12
 800180c:	2b08      	cmp	r3, #8
 800180e:	d173      	bne.n	80018f8 <HAL_RCC_OscConfig+0x430>
 8001810:	4ba1      	ldr	r3, [pc, #644]	; (8001a98 <HAL_RCC_OscConfig+0x5d0>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001818:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800181c:	d16c      	bne.n	80018f8 <HAL_RCC_OscConfig+0x430>
 800181e:	2302      	movs	r3, #2
 8001820:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001824:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001828:	fa93 f3a3 	rbit	r3, r3
 800182c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001830:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001834:	fab3 f383 	clz	r3, r3
 8001838:	b2db      	uxtb	r3, r3
 800183a:	095b      	lsrs	r3, r3, #5
 800183c:	b2db      	uxtb	r3, r3
 800183e:	f043 0301 	orr.w	r3, r3, #1
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2b01      	cmp	r3, #1
 8001846:	d102      	bne.n	800184e <HAL_RCC_OscConfig+0x386>
 8001848:	4b93      	ldr	r3, [pc, #588]	; (8001a98 <HAL_RCC_OscConfig+0x5d0>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	e013      	b.n	8001876 <HAL_RCC_OscConfig+0x3ae>
 800184e:	2302      	movs	r3, #2
 8001850:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001854:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001858:	fa93 f3a3 	rbit	r3, r3
 800185c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001860:	2302      	movs	r3, #2
 8001862:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001866:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800186a:	fa93 f3a3 	rbit	r3, r3
 800186e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001872:	4b89      	ldr	r3, [pc, #548]	; (8001a98 <HAL_RCC_OscConfig+0x5d0>)
 8001874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001876:	2202      	movs	r2, #2
 8001878:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800187c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001880:	fa92 f2a2 	rbit	r2, r2
 8001884:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001888:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800188c:	fab2 f282 	clz	r2, r2
 8001890:	b2d2      	uxtb	r2, r2
 8001892:	f042 0220 	orr.w	r2, r2, #32
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	f002 021f 	and.w	r2, r2, #31
 800189c:	2101      	movs	r1, #1
 800189e:	fa01 f202 	lsl.w	r2, r1, r2
 80018a2:	4013      	ands	r3, r2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d00a      	beq.n	80018be <HAL_RCC_OscConfig+0x3f6>
 80018a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d002      	beq.n	80018be <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	f000 be52 	b.w	8002562 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018be:	4b76      	ldr	r3, [pc, #472]	; (8001a98 <HAL_RCC_OscConfig+0x5d0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	21f8      	movs	r1, #248	; 0xf8
 80018d4:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d8:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80018dc:	fa91 f1a1 	rbit	r1, r1
 80018e0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80018e4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80018e8:	fab1 f181 	clz	r1, r1
 80018ec:	b2c9      	uxtb	r1, r1
 80018ee:	408b      	lsls	r3, r1
 80018f0:	4969      	ldr	r1, [pc, #420]	; (8001a98 <HAL_RCC_OscConfig+0x5d0>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018f6:	e0fe      	b.n	8001af6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	2b00      	cmp	r3, #0
 8001906:	f000 8088 	beq.w	8001a1a <HAL_RCC_OscConfig+0x552>
 800190a:	2301      	movs	r3, #1
 800190c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001910:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001914:	fa93 f3a3 	rbit	r3, r3
 8001918:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800191c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001920:	fab3 f383 	clz	r3, r3
 8001924:	b2db      	uxtb	r3, r3
 8001926:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800192a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	461a      	mov	r2, r3
 8001932:	2301      	movs	r3, #1
 8001934:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001936:	f7ff f8a7 	bl	8000a88 <HAL_GetTick>
 800193a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800193e:	e00a      	b.n	8001956 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001940:	f7ff f8a2 	bl	8000a88 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d902      	bls.n	8001956 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	f000 be06 	b.w	8002562 <HAL_RCC_OscConfig+0x109a>
 8001956:	2302      	movs	r3, #2
 8001958:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001960:	fa93 f3a3 	rbit	r3, r3
 8001964:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001968:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800196c:	fab3 f383 	clz	r3, r3
 8001970:	b2db      	uxtb	r3, r3
 8001972:	095b      	lsrs	r3, r3, #5
 8001974:	b2db      	uxtb	r3, r3
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	b2db      	uxtb	r3, r3
 800197c:	2b01      	cmp	r3, #1
 800197e:	d102      	bne.n	8001986 <HAL_RCC_OscConfig+0x4be>
 8001980:	4b45      	ldr	r3, [pc, #276]	; (8001a98 <HAL_RCC_OscConfig+0x5d0>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	e013      	b.n	80019ae <HAL_RCC_OscConfig+0x4e6>
 8001986:	2302      	movs	r3, #2
 8001988:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001990:	fa93 f3a3 	rbit	r3, r3
 8001994:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001998:	2302      	movs	r3, #2
 800199a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800199e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80019a2:	fa93 f3a3 	rbit	r3, r3
 80019a6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80019aa:	4b3b      	ldr	r3, [pc, #236]	; (8001a98 <HAL_RCC_OscConfig+0x5d0>)
 80019ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ae:	2202      	movs	r2, #2
 80019b0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80019b4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80019b8:	fa92 f2a2 	rbit	r2, r2
 80019bc:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80019c0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80019c4:	fab2 f282 	clz	r2, r2
 80019c8:	b2d2      	uxtb	r2, r2
 80019ca:	f042 0220 	orr.w	r2, r2, #32
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	f002 021f 	and.w	r2, r2, #31
 80019d4:	2101      	movs	r1, #1
 80019d6:	fa01 f202 	lsl.w	r2, r1, r2
 80019da:	4013      	ands	r3, r2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0af      	beq.n	8001940 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e0:	4b2d      	ldr	r3, [pc, #180]	; (8001a98 <HAL_RCC_OscConfig+0x5d0>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	21f8      	movs	r1, #248	; 0xf8
 80019f6:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fa:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80019fe:	fa91 f1a1 	rbit	r1, r1
 8001a02:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001a06:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001a0a:	fab1 f181 	clz	r1, r1
 8001a0e:	b2c9      	uxtb	r1, r1
 8001a10:	408b      	lsls	r3, r1
 8001a12:	4921      	ldr	r1, [pc, #132]	; (8001a98 <HAL_RCC_OscConfig+0x5d0>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	600b      	str	r3, [r1, #0]
 8001a18:	e06d      	b.n	8001af6 <HAL_RCC_OscConfig+0x62e>
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a20:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001a24:	fa93 f3a3 	rbit	r3, r3
 8001a28:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001a2c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a30:	fab3 f383 	clz	r3, r3
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a3a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	461a      	mov	r2, r3
 8001a42:	2300      	movs	r3, #0
 8001a44:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a46:	f7ff f81f 	bl	8000a88 <HAL_GetTick>
 8001a4a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a4e:	e00a      	b.n	8001a66 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a50:	f7ff f81a 	bl	8000a88 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d902      	bls.n	8001a66 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	f000 bd7e 	b.w	8002562 <HAL_RCC_OscConfig+0x109a>
 8001a66:	2302      	movs	r3, #2
 8001a68:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001a70:	fa93 f3a3 	rbit	r3, r3
 8001a74:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001a78:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a7c:	fab3 f383 	clz	r3, r3
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	095b      	lsrs	r3, r3, #5
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d105      	bne.n	8001a9c <HAL_RCC_OscConfig+0x5d4>
 8001a90:	4b01      	ldr	r3, [pc, #4]	; (8001a98 <HAL_RCC_OscConfig+0x5d0>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	e016      	b.n	8001ac4 <HAL_RCC_OscConfig+0x5fc>
 8001a96:	bf00      	nop
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001aa6:	fa93 f3a3 	rbit	r3, r3
 8001aaa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001aae:	2302      	movs	r3, #2
 8001ab0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001ab4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001ab8:	fa93 f3a3 	rbit	r3, r3
 8001abc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001ac0:	4bbf      	ldr	r3, [pc, #764]	; (8001dc0 <HAL_RCC_OscConfig+0x8f8>)
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001aca:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001ace:	fa92 f2a2 	rbit	r2, r2
 8001ad2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001ad6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001ada:	fab2 f282 	clz	r2, r2
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	f042 0220 	orr.w	r2, r2, #32
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	f002 021f 	and.w	r2, r2, #31
 8001aea:	2101      	movs	r1, #1
 8001aec:	fa01 f202 	lsl.w	r2, r1, r2
 8001af0:	4013      	ands	r3, r2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1ac      	bne.n	8001a50 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001af6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001afa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0308 	and.w	r3, r3, #8
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 8113 	beq.w	8001d32 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b10:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d07c      	beq.n	8001c16 <HAL_RCC_OscConfig+0x74e>
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001b26:	fa93 f3a3 	rbit	r3, r3
 8001b2a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001b2e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b32:	fab3 f383 	clz	r3, r3
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4ba2      	ldr	r3, [pc, #648]	; (8001dc4 <HAL_RCC_OscConfig+0x8fc>)
 8001b3c:	4413      	add	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	461a      	mov	r2, r3
 8001b42:	2301      	movs	r3, #1
 8001b44:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b46:	f7fe ff9f 	bl	8000a88 <HAL_GetTick>
 8001b4a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b4e:	e00a      	b.n	8001b66 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b50:	f7fe ff9a 	bl	8000a88 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d902      	bls.n	8001b66 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	f000 bcfe 	b.w	8002562 <HAL_RCC_OscConfig+0x109a>
 8001b66:	2302      	movs	r3, #2
 8001b68:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001b70:	fa93 f2a3 	rbit	r2, r3
 8001b74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b78:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001b86:	2202      	movs	r2, #2
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	fa93 f2a3 	rbit	r2, r3
 8001b98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ba6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001baa:	2202      	movs	r2, #2
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bb2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	fa93 f2a3 	rbit	r2, r3
 8001bbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bc0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001bc4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bc6:	4b7e      	ldr	r3, [pc, #504]	; (8001dc0 <HAL_RCC_OscConfig+0x8f8>)
 8001bc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001bd2:	2102      	movs	r1, #2
 8001bd4:	6019      	str	r1, [r3, #0]
 8001bd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bda:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	fa93 f1a3 	rbit	r1, r3
 8001be4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001be8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001bec:	6019      	str	r1, [r3, #0]
  return result;
 8001bee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bf2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	fab3 f383 	clz	r3, r3
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	f003 031f 	and.w	r3, r3, #31
 8001c08:	2101      	movs	r1, #1
 8001c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0e:	4013      	ands	r3, r2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d09d      	beq.n	8001b50 <HAL_RCC_OscConfig+0x688>
 8001c14:	e08d      	b.n	8001d32 <HAL_RCC_OscConfig+0x86a>
 8001c16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c1a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001c1e:	2201      	movs	r2, #1
 8001c20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c26:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	fa93 f2a3 	rbit	r2, r3
 8001c30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c34:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001c38:	601a      	str	r2, [r3, #0]
  return result;
 8001c3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c3e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001c42:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c44:	fab3 f383 	clz	r3, r3
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	4b5d      	ldr	r3, [pc, #372]	; (8001dc4 <HAL_RCC_OscConfig+0x8fc>)
 8001c4e:	4413      	add	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	461a      	mov	r2, r3
 8001c54:	2300      	movs	r3, #0
 8001c56:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c58:	f7fe ff16 	bl	8000a88 <HAL_GetTick>
 8001c5c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c60:	e00a      	b.n	8001c78 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c62:	f7fe ff11 	bl	8000a88 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d902      	bls.n	8001c78 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	f000 bc75 	b.w	8002562 <HAL_RCC_OscConfig+0x109a>
 8001c78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c7c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001c80:	2202      	movs	r2, #2
 8001c82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c88:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	fa93 f2a3 	rbit	r2, r3
 8001c92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c96:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001ca4:	2202      	movs	r2, #2
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	fa93 f2a3 	rbit	r2, r3
 8001cb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cc4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001cc8:	2202      	movs	r2, #2
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cd0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	fa93 f2a3 	rbit	r2, r3
 8001cda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cde:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001ce2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce4:	4b36      	ldr	r3, [pc, #216]	; (8001dc0 <HAL_RCC_OscConfig+0x8f8>)
 8001ce6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ce8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cec:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001cf0:	2102      	movs	r1, #2
 8001cf2:	6019      	str	r1, [r3, #0]
 8001cf4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cf8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	fa93 f1a3 	rbit	r1, r3
 8001d02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d06:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001d0a:	6019      	str	r1, [r3, #0]
  return result;
 8001d0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d10:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	fab3 f383 	clz	r3, r3
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	f003 031f 	and.w	r3, r3, #31
 8001d26:	2101      	movs	r1, #1
 8001d28:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d197      	bne.n	8001c62 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d36:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0304 	and.w	r3, r3, #4
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 81a5 	beq.w	8002092 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d4e:	4b1c      	ldr	r3, [pc, #112]	; (8001dc0 <HAL_RCC_OscConfig+0x8f8>)
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d116      	bne.n	8001d88 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d5a:	4b19      	ldr	r3, [pc, #100]	; (8001dc0 <HAL_RCC_OscConfig+0x8f8>)
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	4a18      	ldr	r2, [pc, #96]	; (8001dc0 <HAL_RCC_OscConfig+0x8f8>)
 8001d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d64:	61d3      	str	r3, [r2, #28]
 8001d66:	4b16      	ldr	r3, [pc, #88]	; (8001dc0 <HAL_RCC_OscConfig+0x8f8>)
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001d6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d80:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001d82:	2301      	movs	r3, #1
 8001d84:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d88:	4b0f      	ldr	r3, [pc, #60]	; (8001dc8 <HAL_RCC_OscConfig+0x900>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d121      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d94:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <HAL_RCC_OscConfig+0x900>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a0b      	ldr	r2, [pc, #44]	; (8001dc8 <HAL_RCC_OscConfig+0x900>)
 8001d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d9e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001da0:	f7fe fe72 	bl	8000a88 <HAL_GetTick>
 8001da4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da8:	e010      	b.n	8001dcc <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001daa:	f7fe fe6d 	bl	8000a88 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b64      	cmp	r3, #100	; 0x64
 8001db8:	d908      	bls.n	8001dcc <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e3d1      	b.n	8002562 <HAL_RCC_OscConfig+0x109a>
 8001dbe:	bf00      	nop
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	10908120 	.word	0x10908120
 8001dc8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dcc:	4b8d      	ldr	r3, [pc, #564]	; (8002004 <HAL_RCC_OscConfig+0xb3c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d0e8      	beq.n	8001daa <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ddc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d106      	bne.n	8001df6 <HAL_RCC_OscConfig+0x92e>
 8001de8:	4b87      	ldr	r3, [pc, #540]	; (8002008 <HAL_RCC_OscConfig+0xb40>)
 8001dea:	6a1b      	ldr	r3, [r3, #32]
 8001dec:	4a86      	ldr	r2, [pc, #536]	; (8002008 <HAL_RCC_OscConfig+0xb40>)
 8001dee:	f043 0301 	orr.w	r3, r3, #1
 8001df2:	6213      	str	r3, [r2, #32]
 8001df4:	e035      	b.n	8001e62 <HAL_RCC_OscConfig+0x99a>
 8001df6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dfa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10c      	bne.n	8001e20 <HAL_RCC_OscConfig+0x958>
 8001e06:	4b80      	ldr	r3, [pc, #512]	; (8002008 <HAL_RCC_OscConfig+0xb40>)
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	4a7f      	ldr	r2, [pc, #508]	; (8002008 <HAL_RCC_OscConfig+0xb40>)
 8001e0c:	f023 0301 	bic.w	r3, r3, #1
 8001e10:	6213      	str	r3, [r2, #32]
 8001e12:	4b7d      	ldr	r3, [pc, #500]	; (8002008 <HAL_RCC_OscConfig+0xb40>)
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	4a7c      	ldr	r2, [pc, #496]	; (8002008 <HAL_RCC_OscConfig+0xb40>)
 8001e18:	f023 0304 	bic.w	r3, r3, #4
 8001e1c:	6213      	str	r3, [r2, #32]
 8001e1e:	e020      	b.n	8001e62 <HAL_RCC_OscConfig+0x99a>
 8001e20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e24:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	2b05      	cmp	r3, #5
 8001e2e:	d10c      	bne.n	8001e4a <HAL_RCC_OscConfig+0x982>
 8001e30:	4b75      	ldr	r3, [pc, #468]	; (8002008 <HAL_RCC_OscConfig+0xb40>)
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	4a74      	ldr	r2, [pc, #464]	; (8002008 <HAL_RCC_OscConfig+0xb40>)
 8001e36:	f043 0304 	orr.w	r3, r3, #4
 8001e3a:	6213      	str	r3, [r2, #32]
 8001e3c:	4b72      	ldr	r3, [pc, #456]	; (8002008 <HAL_RCC_OscConfig+0xb40>)
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	4a71      	ldr	r2, [pc, #452]	; (8002008 <HAL_RCC_OscConfig+0xb40>)
 8001e42:	f043 0301 	orr.w	r3, r3, #1
 8001e46:	6213      	str	r3, [r2, #32]
 8001e48:	e00b      	b.n	8001e62 <HAL_RCC_OscConfig+0x99a>
 8001e4a:	4b6f      	ldr	r3, [pc, #444]	; (8002008 <HAL_RCC_OscConfig+0xb40>)
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	4a6e      	ldr	r2, [pc, #440]	; (8002008 <HAL_RCC_OscConfig+0xb40>)
 8001e50:	f023 0301 	bic.w	r3, r3, #1
 8001e54:	6213      	str	r3, [r2, #32]
 8001e56:	4b6c      	ldr	r3, [pc, #432]	; (8002008 <HAL_RCC_OscConfig+0xb40>)
 8001e58:	6a1b      	ldr	r3, [r3, #32]
 8001e5a:	4a6b      	ldr	r2, [pc, #428]	; (8002008 <HAL_RCC_OscConfig+0xb40>)
 8001e5c:	f023 0304 	bic.w	r3, r3, #4
 8001e60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e66:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f000 8081 	beq.w	8001f76 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e74:	f7fe fe08 	bl	8000a88 <HAL_GetTick>
 8001e78:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e7c:	e00b      	b.n	8001e96 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e7e:	f7fe fe03 	bl	8000a88 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e365      	b.n	8002562 <HAL_RCC_OscConfig+0x109a>
 8001e96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e9a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ea6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	fa93 f2a3 	rbit	r2, r3
 8001eb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eb4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ebe:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eca:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	fa93 f2a3 	rbit	r2, r3
 8001ed4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ed8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001edc:	601a      	str	r2, [r3, #0]
  return result;
 8001ede:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ee2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001ee6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee8:	fab3 f383 	clz	r3, r3
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	095b      	lsrs	r3, r3, #5
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	f043 0302 	orr.w	r3, r3, #2
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d102      	bne.n	8001f02 <HAL_RCC_OscConfig+0xa3a>
 8001efc:	4b42      	ldr	r3, [pc, #264]	; (8002008 <HAL_RCC_OscConfig+0xb40>)
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	e013      	b.n	8001f2a <HAL_RCC_OscConfig+0xa62>
 8001f02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f06:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f12:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	fa93 f2a3 	rbit	r2, r3
 8001f1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f20:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	4b38      	ldr	r3, [pc, #224]	; (8002008 <HAL_RCC_OscConfig+0xb40>)
 8001f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f2e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001f32:	2102      	movs	r1, #2
 8001f34:	6011      	str	r1, [r2, #0]
 8001f36:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f3a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001f3e:	6812      	ldr	r2, [r2, #0]
 8001f40:	fa92 f1a2 	rbit	r1, r2
 8001f44:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f48:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001f4c:	6011      	str	r1, [r2, #0]
  return result;
 8001f4e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f52:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001f56:	6812      	ldr	r2, [r2, #0]
 8001f58:	fab2 f282 	clz	r2, r2
 8001f5c:	b2d2      	uxtb	r2, r2
 8001f5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f62:	b2d2      	uxtb	r2, r2
 8001f64:	f002 021f 	and.w	r2, r2, #31
 8001f68:	2101      	movs	r1, #1
 8001f6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f6e:	4013      	ands	r3, r2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d084      	beq.n	8001e7e <HAL_RCC_OscConfig+0x9b6>
 8001f74:	e083      	b.n	800207e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f76:	f7fe fd87 	bl	8000a88 <HAL_GetTick>
 8001f7a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f7e:	e00b      	b.n	8001f98 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f80:	f7fe fd82 	bl	8000a88 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e2e4      	b.n	8002562 <HAL_RCC_OscConfig+0x109a>
 8001f98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f9c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fa8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	fa93 f2a3 	rbit	r2, r3
 8001fb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fb6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fc0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001fc4:	2202      	movs	r2, #2
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fcc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	fa93 f2a3 	rbit	r2, r3
 8001fd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fda:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001fde:	601a      	str	r2, [r3, #0]
  return result;
 8001fe0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fe4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001fe8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fea:	fab3 f383 	clz	r3, r3
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	095b      	lsrs	r3, r3, #5
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	f043 0302 	orr.w	r3, r3, #2
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d106      	bne.n	800200c <HAL_RCC_OscConfig+0xb44>
 8001ffe:	4b02      	ldr	r3, [pc, #8]	; (8002008 <HAL_RCC_OscConfig+0xb40>)
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	e017      	b.n	8002034 <HAL_RCC_OscConfig+0xb6c>
 8002004:	40007000 	.word	0x40007000
 8002008:	40021000 	.word	0x40021000
 800200c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002010:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002014:	2202      	movs	r2, #2
 8002016:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002018:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800201c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	fa93 f2a3 	rbit	r2, r3
 8002026:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800202a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	4bb3      	ldr	r3, [pc, #716]	; (8002300 <HAL_RCC_OscConfig+0xe38>)
 8002032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002034:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002038:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800203c:	2102      	movs	r1, #2
 800203e:	6011      	str	r1, [r2, #0]
 8002040:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002044:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002048:	6812      	ldr	r2, [r2, #0]
 800204a:	fa92 f1a2 	rbit	r1, r2
 800204e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002052:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002056:	6011      	str	r1, [r2, #0]
  return result;
 8002058:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800205c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002060:	6812      	ldr	r2, [r2, #0]
 8002062:	fab2 f282 	clz	r2, r2
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800206c:	b2d2      	uxtb	r2, r2
 800206e:	f002 021f 	and.w	r2, r2, #31
 8002072:	2101      	movs	r1, #1
 8002074:	fa01 f202 	lsl.w	r2, r1, r2
 8002078:	4013      	ands	r3, r2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d180      	bne.n	8001f80 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800207e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002082:	2b01      	cmp	r3, #1
 8002084:	d105      	bne.n	8002092 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002086:	4b9e      	ldr	r3, [pc, #632]	; (8002300 <HAL_RCC_OscConfig+0xe38>)
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	4a9d      	ldr	r2, [pc, #628]	; (8002300 <HAL_RCC_OscConfig+0xe38>)
 800208c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002090:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002092:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002096:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f000 825e 	beq.w	8002560 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020a4:	4b96      	ldr	r3, [pc, #600]	; (8002300 <HAL_RCC_OscConfig+0xe38>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f003 030c 	and.w	r3, r3, #12
 80020ac:	2b08      	cmp	r3, #8
 80020ae:	f000 821f 	beq.w	80024f0 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	2b02      	cmp	r3, #2
 80020c0:	f040 8170 	bne.w	80023a4 <HAL_RCC_OscConfig+0xedc>
 80020c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020c8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80020cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020d6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	fa93 f2a3 	rbit	r2, r3
 80020e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020e4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80020e8:	601a      	str	r2, [r3, #0]
  return result;
 80020ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ee:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80020f2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f4:	fab3 f383 	clz	r3, r3
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020fe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	461a      	mov	r2, r3
 8002106:	2300      	movs	r3, #0
 8002108:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210a:	f7fe fcbd 	bl	8000a88 <HAL_GetTick>
 800210e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002112:	e009      	b.n	8002128 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002114:	f7fe fcb8 	bl	8000a88 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e21c      	b.n	8002562 <HAL_RCC_OscConfig+0x109a>
 8002128:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800212c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002130:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002134:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002136:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800213a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	fa93 f2a3 	rbit	r2, r3
 8002144:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002148:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800214c:	601a      	str	r2, [r3, #0]
  return result;
 800214e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002152:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002156:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002158:	fab3 f383 	clz	r3, r3
 800215c:	b2db      	uxtb	r3, r3
 800215e:	095b      	lsrs	r3, r3, #5
 8002160:	b2db      	uxtb	r3, r3
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b01      	cmp	r3, #1
 800216a:	d102      	bne.n	8002172 <HAL_RCC_OscConfig+0xcaa>
 800216c:	4b64      	ldr	r3, [pc, #400]	; (8002300 <HAL_RCC_OscConfig+0xe38>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	e027      	b.n	80021c2 <HAL_RCC_OscConfig+0xcfa>
 8002172:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002176:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800217a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800217e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002180:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002184:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	fa93 f2a3 	rbit	r2, r3
 800218e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002192:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800219c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80021a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021aa:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	fa93 f2a3 	rbit	r2, r3
 80021b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021b8:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	4b50      	ldr	r3, [pc, #320]	; (8002300 <HAL_RCC_OscConfig+0xe38>)
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021c6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80021ca:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80021ce:	6011      	str	r1, [r2, #0]
 80021d0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021d4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80021d8:	6812      	ldr	r2, [r2, #0]
 80021da:	fa92 f1a2 	rbit	r1, r2
 80021de:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021e2:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80021e6:	6011      	str	r1, [r2, #0]
  return result;
 80021e8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021ec:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80021f0:	6812      	ldr	r2, [r2, #0]
 80021f2:	fab2 f282 	clz	r2, r2
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	f042 0220 	orr.w	r2, r2, #32
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	f002 021f 	and.w	r2, r2, #31
 8002202:	2101      	movs	r1, #1
 8002204:	fa01 f202 	lsl.w	r2, r1, r2
 8002208:	4013      	ands	r3, r2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d182      	bne.n	8002114 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800220e:	4b3c      	ldr	r3, [pc, #240]	; (8002300 <HAL_RCC_OscConfig+0xe38>)
 8002210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002212:	f023 020f 	bic.w	r2, r3, #15
 8002216:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800221a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002222:	4937      	ldr	r1, [pc, #220]	; (8002300 <HAL_RCC_OscConfig+0xe38>)
 8002224:	4313      	orrs	r3, r2
 8002226:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002228:	4b35      	ldr	r3, [pc, #212]	; (8002300 <HAL_RCC_OscConfig+0xe38>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002230:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002234:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6a19      	ldr	r1, [r3, #32]
 800223c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002240:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	69db      	ldr	r3, [r3, #28]
 8002248:	430b      	orrs	r3, r1
 800224a:	492d      	ldr	r1, [pc, #180]	; (8002300 <HAL_RCC_OscConfig+0xe38>)
 800224c:	4313      	orrs	r3, r2
 800224e:	604b      	str	r3, [r1, #4]
 8002250:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002254:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002258:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800225c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002262:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	fa93 f2a3 	rbit	r2, r3
 800226c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002270:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002274:	601a      	str	r2, [r3, #0]
  return result;
 8002276:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800227a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800227e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002280:	fab3 f383 	clz	r3, r3
 8002284:	b2db      	uxtb	r3, r3
 8002286:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800228a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	461a      	mov	r2, r3
 8002292:	2301      	movs	r3, #1
 8002294:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002296:	f7fe fbf7 	bl	8000a88 <HAL_GetTick>
 800229a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800229e:	e009      	b.n	80022b4 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022a0:	f7fe fbf2 	bl	8000a88 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e156      	b.n	8002562 <HAL_RCC_OscConfig+0x109a>
 80022b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022b8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80022bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022c6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	fa93 f2a3 	rbit	r2, r3
 80022d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022d4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80022d8:	601a      	str	r2, [r3, #0]
  return result;
 80022da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022de:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80022e2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022e4:	fab3 f383 	clz	r3, r3
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	095b      	lsrs	r3, r3, #5
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	f043 0301 	orr.w	r3, r3, #1
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d105      	bne.n	8002304 <HAL_RCC_OscConfig+0xe3c>
 80022f8:	4b01      	ldr	r3, [pc, #4]	; (8002300 <HAL_RCC_OscConfig+0xe38>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	e02a      	b.n	8002354 <HAL_RCC_OscConfig+0xe8c>
 80022fe:	bf00      	nop
 8002300:	40021000 	.word	0x40021000
 8002304:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002308:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800230c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002310:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002312:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002316:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	fa93 f2a3 	rbit	r2, r3
 8002320:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002324:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800232e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002332:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800233c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	fa93 f2a3 	rbit	r2, r3
 8002346:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800234a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	4b86      	ldr	r3, [pc, #536]	; (800256c <HAL_RCC_OscConfig+0x10a4>)
 8002352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002354:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002358:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800235c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002360:	6011      	str	r1, [r2, #0]
 8002362:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002366:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800236a:	6812      	ldr	r2, [r2, #0]
 800236c:	fa92 f1a2 	rbit	r1, r2
 8002370:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002374:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002378:	6011      	str	r1, [r2, #0]
  return result;
 800237a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800237e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002382:	6812      	ldr	r2, [r2, #0]
 8002384:	fab2 f282 	clz	r2, r2
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	f042 0220 	orr.w	r2, r2, #32
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	f002 021f 	and.w	r2, r2, #31
 8002394:	2101      	movs	r1, #1
 8002396:	fa01 f202 	lsl.w	r2, r1, r2
 800239a:	4013      	ands	r3, r2
 800239c:	2b00      	cmp	r3, #0
 800239e:	f43f af7f 	beq.w	80022a0 <HAL_RCC_OscConfig+0xdd8>
 80023a2:	e0dd      	b.n	8002560 <HAL_RCC_OscConfig+0x1098>
 80023a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023a8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80023ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023b6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	fa93 f2a3 	rbit	r2, r3
 80023c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023c4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80023c8:	601a      	str	r2, [r3, #0]
  return result;
 80023ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023ce:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80023d2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d4:	fab3 f383 	clz	r3, r3
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023de:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	461a      	mov	r2, r3
 80023e6:	2300      	movs	r3, #0
 80023e8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ea:	f7fe fb4d 	bl	8000a88 <HAL_GetTick>
 80023ee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023f2:	e009      	b.n	8002408 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023f4:	f7fe fb48 	bl	8000a88 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e0ac      	b.n	8002562 <HAL_RCC_OscConfig+0x109a>
 8002408:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800240c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002410:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002414:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002416:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800241a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	fa93 f2a3 	rbit	r2, r3
 8002424:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002428:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800242c:	601a      	str	r2, [r3, #0]
  return result;
 800242e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002432:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002436:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002438:	fab3 f383 	clz	r3, r3
 800243c:	b2db      	uxtb	r3, r3
 800243e:	095b      	lsrs	r3, r3, #5
 8002440:	b2db      	uxtb	r3, r3
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b01      	cmp	r3, #1
 800244a:	d102      	bne.n	8002452 <HAL_RCC_OscConfig+0xf8a>
 800244c:	4b47      	ldr	r3, [pc, #284]	; (800256c <HAL_RCC_OscConfig+0x10a4>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	e027      	b.n	80024a2 <HAL_RCC_OscConfig+0xfda>
 8002452:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002456:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800245a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800245e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002460:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002464:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	fa93 f2a3 	rbit	r2, r3
 800246e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002472:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800247c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002480:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800248a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	fa93 f2a3 	rbit	r2, r3
 8002494:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002498:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	4b33      	ldr	r3, [pc, #204]	; (800256c <HAL_RCC_OscConfig+0x10a4>)
 80024a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80024a6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80024aa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80024ae:	6011      	str	r1, [r2, #0]
 80024b0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80024b4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80024b8:	6812      	ldr	r2, [r2, #0]
 80024ba:	fa92 f1a2 	rbit	r1, r2
 80024be:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80024c2:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80024c6:	6011      	str	r1, [r2, #0]
  return result;
 80024c8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80024cc:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80024d0:	6812      	ldr	r2, [r2, #0]
 80024d2:	fab2 f282 	clz	r2, r2
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	f042 0220 	orr.w	r2, r2, #32
 80024dc:	b2d2      	uxtb	r2, r2
 80024de:	f002 021f 	and.w	r2, r2, #31
 80024e2:	2101      	movs	r1, #1
 80024e4:	fa01 f202 	lsl.w	r2, r1, r2
 80024e8:	4013      	ands	r3, r2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d182      	bne.n	80023f4 <HAL_RCC_OscConfig+0xf2c>
 80024ee:	e037      	b.n	8002560 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d101      	bne.n	8002504 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e02e      	b.n	8002562 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002504:	4b19      	ldr	r3, [pc, #100]	; (800256c <HAL_RCC_OscConfig+0x10a4>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800250c:	4b17      	ldr	r3, [pc, #92]	; (800256c <HAL_RCC_OscConfig+0x10a4>)
 800250e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002510:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002514:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002518:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800251c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002520:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	429a      	cmp	r2, r3
 800252a:	d117      	bne.n	800255c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800252c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002530:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002534:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002538:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002540:	429a      	cmp	r2, r3
 8002542:	d10b      	bne.n	800255c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002544:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002548:	f003 020f 	and.w	r2, r3, #15
 800254c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002550:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002558:	429a      	cmp	r2, r3
 800255a:	d001      	beq.n	8002560 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e000      	b.n	8002562 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40021000 	.word	0x40021000

08002570 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b09e      	sub	sp, #120	; 0x78
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800257a:	2300      	movs	r3, #0
 800257c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e162      	b.n	800284e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002588:	4b90      	ldr	r3, [pc, #576]	; (80027cc <HAL_RCC_ClockConfig+0x25c>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	429a      	cmp	r2, r3
 8002594:	d910      	bls.n	80025b8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002596:	4b8d      	ldr	r3, [pc, #564]	; (80027cc <HAL_RCC_ClockConfig+0x25c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f023 0207 	bic.w	r2, r3, #7
 800259e:	498b      	ldr	r1, [pc, #556]	; (80027cc <HAL_RCC_ClockConfig+0x25c>)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a6:	4b89      	ldr	r3, [pc, #548]	; (80027cc <HAL_RCC_ClockConfig+0x25c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d001      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e14a      	b.n	800284e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d008      	beq.n	80025d6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025c4:	4b82      	ldr	r3, [pc, #520]	; (80027d0 <HAL_RCC_ClockConfig+0x260>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	497f      	ldr	r1, [pc, #508]	; (80027d0 <HAL_RCC_ClockConfig+0x260>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 80dc 	beq.w	800279c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d13c      	bne.n	8002666 <HAL_RCC_ClockConfig+0xf6>
 80025ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025f0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025f4:	fa93 f3a3 	rbit	r3, r3
 80025f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80025fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fc:	fab3 f383 	clz	r3, r3
 8002600:	b2db      	uxtb	r3, r3
 8002602:	095b      	lsrs	r3, r3, #5
 8002604:	b2db      	uxtb	r3, r3
 8002606:	f043 0301 	orr.w	r3, r3, #1
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b01      	cmp	r3, #1
 800260e:	d102      	bne.n	8002616 <HAL_RCC_ClockConfig+0xa6>
 8002610:	4b6f      	ldr	r3, [pc, #444]	; (80027d0 <HAL_RCC_ClockConfig+0x260>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	e00f      	b.n	8002636 <HAL_RCC_ClockConfig+0xc6>
 8002616:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800261a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800261e:	fa93 f3a3 	rbit	r3, r3
 8002622:	667b      	str	r3, [r7, #100]	; 0x64
 8002624:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002628:	663b      	str	r3, [r7, #96]	; 0x60
 800262a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800262c:	fa93 f3a3 	rbit	r3, r3
 8002630:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002632:	4b67      	ldr	r3, [pc, #412]	; (80027d0 <HAL_RCC_ClockConfig+0x260>)
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002636:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800263a:	65ba      	str	r2, [r7, #88]	; 0x58
 800263c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800263e:	fa92 f2a2 	rbit	r2, r2
 8002642:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002644:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002646:	fab2 f282 	clz	r2, r2
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	f042 0220 	orr.w	r2, r2, #32
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	f002 021f 	and.w	r2, r2, #31
 8002656:	2101      	movs	r1, #1
 8002658:	fa01 f202 	lsl.w	r2, r1, r2
 800265c:	4013      	ands	r3, r2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d17b      	bne.n	800275a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e0f3      	b.n	800284e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	2b02      	cmp	r3, #2
 800266c:	d13c      	bne.n	80026e8 <HAL_RCC_ClockConfig+0x178>
 800266e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002672:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002674:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002676:	fa93 f3a3 	rbit	r3, r3
 800267a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800267c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800267e:	fab3 f383 	clz	r3, r3
 8002682:	b2db      	uxtb	r3, r3
 8002684:	095b      	lsrs	r3, r3, #5
 8002686:	b2db      	uxtb	r3, r3
 8002688:	f043 0301 	orr.w	r3, r3, #1
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b01      	cmp	r3, #1
 8002690:	d102      	bne.n	8002698 <HAL_RCC_ClockConfig+0x128>
 8002692:	4b4f      	ldr	r3, [pc, #316]	; (80027d0 <HAL_RCC_ClockConfig+0x260>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	e00f      	b.n	80026b8 <HAL_RCC_ClockConfig+0x148>
 8002698:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800269c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026a0:	fa93 f3a3 	rbit	r3, r3
 80026a4:	647b      	str	r3, [r7, #68]	; 0x44
 80026a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026aa:	643b      	str	r3, [r7, #64]	; 0x40
 80026ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026ae:	fa93 f3a3 	rbit	r3, r3
 80026b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026b4:	4b46      	ldr	r3, [pc, #280]	; (80027d0 <HAL_RCC_ClockConfig+0x260>)
 80026b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026bc:	63ba      	str	r2, [r7, #56]	; 0x38
 80026be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026c0:	fa92 f2a2 	rbit	r2, r2
 80026c4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80026c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026c8:	fab2 f282 	clz	r2, r2
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	f042 0220 	orr.w	r2, r2, #32
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	f002 021f 	and.w	r2, r2, #31
 80026d8:	2101      	movs	r1, #1
 80026da:	fa01 f202 	lsl.w	r2, r1, r2
 80026de:	4013      	ands	r3, r2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d13a      	bne.n	800275a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e0b2      	b.n	800284e <HAL_RCC_ClockConfig+0x2de>
 80026e8:	2302      	movs	r3, #2
 80026ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ee:	fa93 f3a3 	rbit	r3, r3
 80026f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80026f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f6:	fab3 f383 	clz	r3, r3
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	095b      	lsrs	r3, r3, #5
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	f043 0301 	orr.w	r3, r3, #1
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b01      	cmp	r3, #1
 8002708:	d102      	bne.n	8002710 <HAL_RCC_ClockConfig+0x1a0>
 800270a:	4b31      	ldr	r3, [pc, #196]	; (80027d0 <HAL_RCC_ClockConfig+0x260>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	e00d      	b.n	800272c <HAL_RCC_ClockConfig+0x1bc>
 8002710:	2302      	movs	r3, #2
 8002712:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002716:	fa93 f3a3 	rbit	r3, r3
 800271a:	627b      	str	r3, [r7, #36]	; 0x24
 800271c:	2302      	movs	r3, #2
 800271e:	623b      	str	r3, [r7, #32]
 8002720:	6a3b      	ldr	r3, [r7, #32]
 8002722:	fa93 f3a3 	rbit	r3, r3
 8002726:	61fb      	str	r3, [r7, #28]
 8002728:	4b29      	ldr	r3, [pc, #164]	; (80027d0 <HAL_RCC_ClockConfig+0x260>)
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	2202      	movs	r2, #2
 800272e:	61ba      	str	r2, [r7, #24]
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	fa92 f2a2 	rbit	r2, r2
 8002736:	617a      	str	r2, [r7, #20]
  return result;
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	fab2 f282 	clz	r2, r2
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	f042 0220 	orr.w	r2, r2, #32
 8002744:	b2d2      	uxtb	r2, r2
 8002746:	f002 021f 	and.w	r2, r2, #31
 800274a:	2101      	movs	r1, #1
 800274c:	fa01 f202 	lsl.w	r2, r1, r2
 8002750:	4013      	ands	r3, r2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e079      	b.n	800284e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800275a:	4b1d      	ldr	r3, [pc, #116]	; (80027d0 <HAL_RCC_ClockConfig+0x260>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f023 0203 	bic.w	r2, r3, #3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	491a      	ldr	r1, [pc, #104]	; (80027d0 <HAL_RCC_ClockConfig+0x260>)
 8002768:	4313      	orrs	r3, r2
 800276a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800276c:	f7fe f98c 	bl	8000a88 <HAL_GetTick>
 8002770:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002772:	e00a      	b.n	800278a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002774:	f7fe f988 	bl	8000a88 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002782:	4293      	cmp	r3, r2
 8002784:	d901      	bls.n	800278a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e061      	b.n	800284e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800278a:	4b11      	ldr	r3, [pc, #68]	; (80027d0 <HAL_RCC_ClockConfig+0x260>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f003 020c 	and.w	r2, r3, #12
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	429a      	cmp	r2, r3
 800279a:	d1eb      	bne.n	8002774 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800279c:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <HAL_RCC_ClockConfig+0x25c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d214      	bcs.n	80027d4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027aa:	4b08      	ldr	r3, [pc, #32]	; (80027cc <HAL_RCC_ClockConfig+0x25c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f023 0207 	bic.w	r2, r3, #7
 80027b2:	4906      	ldr	r1, [pc, #24]	; (80027cc <HAL_RCC_ClockConfig+0x25c>)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ba:	4b04      	ldr	r3, [pc, #16]	; (80027cc <HAL_RCC_ClockConfig+0x25c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0307 	and.w	r3, r3, #7
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d005      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e040      	b.n	800284e <HAL_RCC_ClockConfig+0x2de>
 80027cc:	40022000 	.word	0x40022000
 80027d0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0304 	and.w	r3, r3, #4
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d008      	beq.n	80027f2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027e0:	4b1d      	ldr	r3, [pc, #116]	; (8002858 <HAL_RCC_ClockConfig+0x2e8>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	491a      	ldr	r1, [pc, #104]	; (8002858 <HAL_RCC_ClockConfig+0x2e8>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0308 	and.w	r3, r3, #8
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d009      	beq.n	8002812 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027fe:	4b16      	ldr	r3, [pc, #88]	; (8002858 <HAL_RCC_ClockConfig+0x2e8>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	4912      	ldr	r1, [pc, #72]	; (8002858 <HAL_RCC_ClockConfig+0x2e8>)
 800280e:	4313      	orrs	r3, r2
 8002810:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002812:	f000 f829 	bl	8002868 <HAL_RCC_GetSysClockFreq>
 8002816:	4601      	mov	r1, r0
 8002818:	4b0f      	ldr	r3, [pc, #60]	; (8002858 <HAL_RCC_ClockConfig+0x2e8>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002820:	22f0      	movs	r2, #240	; 0xf0
 8002822:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	fa92 f2a2 	rbit	r2, r2
 800282a:	60fa      	str	r2, [r7, #12]
  return result;
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	fab2 f282 	clz	r2, r2
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	40d3      	lsrs	r3, r2
 8002836:	4a09      	ldr	r2, [pc, #36]	; (800285c <HAL_RCC_ClockConfig+0x2ec>)
 8002838:	5cd3      	ldrb	r3, [r2, r3]
 800283a:	fa21 f303 	lsr.w	r3, r1, r3
 800283e:	4a08      	ldr	r2, [pc, #32]	; (8002860 <HAL_RCC_ClockConfig+0x2f0>)
 8002840:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002842:	4b08      	ldr	r3, [pc, #32]	; (8002864 <HAL_RCC_ClockConfig+0x2f4>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f7fe f8da 	bl	8000a00 <HAL_InitTick>
  
  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3778      	adds	r7, #120	; 0x78
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	40021000 	.word	0x40021000
 800285c:	08005794 	.word	0x08005794
 8002860:	20000000 	.word	0x20000000
 8002864:	20000004 	.word	0x20000004

08002868 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002868:	b480      	push	{r7}
 800286a:	b087      	sub	sp, #28
 800286c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800286e:	2300      	movs	r3, #0
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	2300      	movs	r3, #0
 8002874:	60bb      	str	r3, [r7, #8]
 8002876:	2300      	movs	r3, #0
 8002878:	617b      	str	r3, [r7, #20]
 800287a:	2300      	movs	r3, #0
 800287c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800287e:	2300      	movs	r3, #0
 8002880:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002882:	4b1f      	ldr	r3, [pc, #124]	; (8002900 <HAL_RCC_GetSysClockFreq+0x98>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f003 030c 	and.w	r3, r3, #12
 800288e:	2b04      	cmp	r3, #4
 8002890:	d002      	beq.n	8002898 <HAL_RCC_GetSysClockFreq+0x30>
 8002892:	2b08      	cmp	r3, #8
 8002894:	d003      	beq.n	800289e <HAL_RCC_GetSysClockFreq+0x36>
 8002896:	e029      	b.n	80028ec <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002898:	4b1a      	ldr	r3, [pc, #104]	; (8002904 <HAL_RCC_GetSysClockFreq+0x9c>)
 800289a:	613b      	str	r3, [r7, #16]
      break;
 800289c:	e029      	b.n	80028f2 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	0c9b      	lsrs	r3, r3, #18
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	4a18      	ldr	r2, [pc, #96]	; (8002908 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028a8:	5cd3      	ldrb	r3, [r2, r3]
 80028aa:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80028ac:	4b14      	ldr	r3, [pc, #80]	; (8002900 <HAL_RCC_GetSysClockFreq+0x98>)
 80028ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b0:	f003 030f 	and.w	r3, r3, #15
 80028b4:	4a15      	ldr	r2, [pc, #84]	; (800290c <HAL_RCC_GetSysClockFreq+0xa4>)
 80028b6:	5cd3      	ldrb	r3, [r2, r3]
 80028b8:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d008      	beq.n	80028d6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80028c4:	4a0f      	ldr	r2, [pc, #60]	; (8002904 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	fb02 f303 	mul.w	r3, r2, r3
 80028d2:	617b      	str	r3, [r7, #20]
 80028d4:	e007      	b.n	80028e6 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80028d6:	4a0b      	ldr	r2, [pc, #44]	; (8002904 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	fbb2 f2f3 	udiv	r2, r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	fb02 f303 	mul.w	r3, r2, r3
 80028e4:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	613b      	str	r3, [r7, #16]
      break;
 80028ea:	e002      	b.n	80028f2 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028ec:	4b05      	ldr	r3, [pc, #20]	; (8002904 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028ee:	613b      	str	r3, [r7, #16]
      break;
 80028f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028f2:	693b      	ldr	r3, [r7, #16]
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	371c      	adds	r7, #28
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	40021000 	.word	0x40021000
 8002904:	007a1200 	.word	0x007a1200
 8002908:	080057ac 	.word	0x080057ac
 800290c:	080057bc 	.word	0x080057bc

08002910 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002914:	4b03      	ldr	r3, [pc, #12]	; (8002924 <HAL_RCC_GetHCLKFreq+0x14>)
 8002916:	681b      	ldr	r3, [r3, #0]
}
 8002918:	4618      	mov	r0, r3
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	20000000 	.word	0x20000000

08002928 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800292e:	f7ff ffef 	bl	8002910 <HAL_RCC_GetHCLKFreq>
 8002932:	4601      	mov	r1, r0
 8002934:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800293c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002940:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	fa92 f2a2 	rbit	r2, r2
 8002948:	603a      	str	r2, [r7, #0]
  return result;
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	fab2 f282 	clz	r2, r2
 8002950:	b2d2      	uxtb	r2, r2
 8002952:	40d3      	lsrs	r3, r2
 8002954:	4a04      	ldr	r2, [pc, #16]	; (8002968 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002956:	5cd3      	ldrb	r3, [r2, r3]
 8002958:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800295c:	4618      	mov	r0, r3
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40021000 	.word	0x40021000
 8002968:	080057a4 	.word	0x080057a4

0800296c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002972:	f7ff ffcd 	bl	8002910 <HAL_RCC_GetHCLKFreq>
 8002976:	4601      	mov	r1, r0
 8002978:	4b0b      	ldr	r3, [pc, #44]	; (80029a8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002980:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002984:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	fa92 f2a2 	rbit	r2, r2
 800298c:	603a      	str	r2, [r7, #0]
  return result;
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	fab2 f282 	clz	r2, r2
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	40d3      	lsrs	r3, r2
 8002998:	4a04      	ldr	r2, [pc, #16]	; (80029ac <HAL_RCC_GetPCLK2Freq+0x40>)
 800299a:	5cd3      	ldrb	r3, [r2, r3]
 800299c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80029a0:	4618      	mov	r0, r3
 80029a2:	3708      	adds	r7, #8
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40021000 	.word	0x40021000
 80029ac:	080057a4 	.word	0x080057a4

080029b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b092      	sub	sp, #72	; 0x48
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80029bc:	2300      	movs	r3, #0
 80029be:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80029c0:	2300      	movs	r3, #0
 80029c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f000 80d4 	beq.w	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029d4:	4b4e      	ldr	r3, [pc, #312]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029d6:	69db      	ldr	r3, [r3, #28]
 80029d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10e      	bne.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029e0:	4b4b      	ldr	r3, [pc, #300]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e2:	69db      	ldr	r3, [r3, #28]
 80029e4:	4a4a      	ldr	r2, [pc, #296]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ea:	61d3      	str	r3, [r2, #28]
 80029ec:	4b48      	ldr	r3, [pc, #288]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ee:	69db      	ldr	r3, [r3, #28]
 80029f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f4:	60bb      	str	r3, [r7, #8]
 80029f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029f8:	2301      	movs	r3, #1
 80029fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029fe:	4b45      	ldr	r3, [pc, #276]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d118      	bne.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a0a:	4b42      	ldr	r3, [pc, #264]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a41      	ldr	r2, [pc, #260]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a14:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a16:	f7fe f837 	bl	8000a88 <HAL_GetTick>
 8002a1a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a1c:	e008      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a1e:	f7fe f833 	bl	8000a88 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b64      	cmp	r3, #100	; 0x64
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e1d6      	b.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a30:	4b38      	ldr	r3, [pc, #224]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d0f0      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a3c:	4b34      	ldr	r3, [pc, #208]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a44:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 8084 	beq.w	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d07c      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a5c:	4b2c      	ldr	r3, [pc, #176]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a6a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a6e:	fa93 f3a3 	rbit	r3, r3
 8002a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a76:	fab3 f383 	clz	r3, r3
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	4b26      	ldr	r3, [pc, #152]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a80:	4413      	add	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	461a      	mov	r2, r3
 8002a86:	2301      	movs	r3, #1
 8002a88:	6013      	str	r3, [r2, #0]
 8002a8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a8e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a92:	fa93 f3a3 	rbit	r3, r3
 8002a96:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a9a:	fab3 f383 	clz	r3, r3
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	4b1d      	ldr	r3, [pc, #116]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002aa4:	4413      	add	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	2300      	movs	r3, #0
 8002aac:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002aae:	4a18      	ldr	r2, [pc, #96]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ab2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d04b      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002abe:	f7fd ffe3 	bl	8000a88 <HAL_GetTick>
 8002ac2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac4:	e00a      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ac6:	f7fd ffdf 	bl	8000a88 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e180      	b.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002adc:	2302      	movs	r3, #2
 8002ade:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae2:	fa93 f3a3 	rbit	r3, r3
 8002ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae8:	2302      	movs	r3, #2
 8002aea:	623b      	str	r3, [r7, #32]
 8002aec:	6a3b      	ldr	r3, [r7, #32]
 8002aee:	fa93 f3a3 	rbit	r3, r3
 8002af2:	61fb      	str	r3, [r7, #28]
  return result;
 8002af4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af6:	fab3 f383 	clz	r3, r3
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	095b      	lsrs	r3, r3, #5
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	f043 0302 	orr.w	r3, r3, #2
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d108      	bne.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002b0a:	4b01      	ldr	r3, [pc, #4]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	e00d      	b.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002b10:	40021000 	.word	0x40021000
 8002b14:	40007000 	.word	0x40007000
 8002b18:	10908100 	.word	0x10908100
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	fa93 f3a3 	rbit	r3, r3
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	4b9a      	ldr	r3, [pc, #616]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	613a      	str	r2, [r7, #16]
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	fa92 f2a2 	rbit	r2, r2
 8002b36:	60fa      	str	r2, [r7, #12]
  return result;
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	fab2 f282 	clz	r2, r2
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	f002 021f 	and.w	r2, r2, #31
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b50:	4013      	ands	r3, r2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0b7      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002b56:	4b8f      	ldr	r3, [pc, #572]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	498c      	ldr	r1, [pc, #560]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b68:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d105      	bne.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b70:	4b88      	ldr	r3, [pc, #544]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b72:	69db      	ldr	r3, [r3, #28]
 8002b74:	4a87      	ldr	r2, [pc, #540]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b7a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d008      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b88:	4b82      	ldr	r3, [pc, #520]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8c:	f023 0203 	bic.w	r2, r3, #3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	497f      	ldr	r1, [pc, #508]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d008      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ba6:	4b7b      	ldr	r3, [pc, #492]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	4978      	ldr	r1, [pc, #480]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d008      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bc4:	4b73      	ldr	r3, [pc, #460]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	4970      	ldr	r1, [pc, #448]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0320 	and.w	r3, r3, #32
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d008      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002be2:	4b6c      	ldr	r3, [pc, #432]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	f023 0210 	bic.w	r2, r3, #16
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	4969      	ldr	r1, [pc, #420]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d008      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002c00:	4b64      	ldr	r3, [pc, #400]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c0c:	4961      	ldr	r1, [pc, #388]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d008      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c1e:	4b5d      	ldr	r3, [pc, #372]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	f023 0220 	bic.w	r2, r3, #32
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	495a      	ldr	r1, [pc, #360]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d008      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c3c:	4b55      	ldr	r3, [pc, #340]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c40:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c48:	4952      	ldr	r1, [pc, #328]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d008      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c5a:	4b4e      	ldr	r3, [pc, #312]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	494b      	ldr	r1, [pc, #300]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0310 	and.w	r3, r3, #16
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d008      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c78:	4b46      	ldr	r3, [pc, #280]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	4943      	ldr	r1, [pc, #268]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d008      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c96:	4b3f      	ldr	r3, [pc, #252]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca2:	493c      	ldr	r1, [pc, #240]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d008      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002cb4:	4b37      	ldr	r3, [pc, #220]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc0:	4934      	ldr	r1, [pc, #208]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d008      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002cd2:	4b30      	ldr	r3, [pc, #192]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cde:	492d      	ldr	r1, [pc, #180]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d008      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002cf0:	4b28      	ldr	r3, [pc, #160]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cfc:	4925      	ldr	r1, [pc, #148]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d008      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002d0e:	4b21      	ldr	r3, [pc, #132]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	491e      	ldr	r1, [pc, #120]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d008      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002d2c:	4b19      	ldr	r3, [pc, #100]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d30:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d38:	4916      	ldr	r1, [pc, #88]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d008      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002d4a:	4b12      	ldr	r3, [pc, #72]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d56:	490f      	ldr	r1, [pc, #60]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d008      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002d68:	4b0a      	ldr	r3, [pc, #40]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d74:	4907      	ldr	r1, [pc, #28]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00c      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002d86:	4b03      	ldr	r3, [pc, #12]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	e002      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002d92:	bf00      	nop
 8002d94:	40021000 	.word	0x40021000
 8002d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d9a:	4913      	ldr	r1, [pc, #76]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d008      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002dac:	4b0e      	ldr	r3, [pc, #56]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002db8:	490b      	ldr	r1, [pc, #44]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d008      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002dca:	4b07      	ldr	r3, [pc, #28]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dd6:	4904      	ldr	r1, [pc, #16]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3748      	adds	r7, #72	; 0x48
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40021000 	.word	0x40021000

08002dec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e049      	b.n	8002e92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d106      	bne.n	8002e18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7fd fc8a 	bl	800072c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3304      	adds	r3, #4
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4610      	mov	r0, r2
 8002e2c:	f000 fac8 	bl	80033c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
	...

08002e9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d001      	beq.n	8002eb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e04f      	b.n	8002f54 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f042 0201 	orr.w	r2, r2, #1
 8002eca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a23      	ldr	r2, [pc, #140]	; (8002f60 <HAL_TIM_Base_Start_IT+0xc4>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d01d      	beq.n	8002f12 <HAL_TIM_Base_Start_IT+0x76>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ede:	d018      	beq.n	8002f12 <HAL_TIM_Base_Start_IT+0x76>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a1f      	ldr	r2, [pc, #124]	; (8002f64 <HAL_TIM_Base_Start_IT+0xc8>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d013      	beq.n	8002f12 <HAL_TIM_Base_Start_IT+0x76>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a1e      	ldr	r2, [pc, #120]	; (8002f68 <HAL_TIM_Base_Start_IT+0xcc>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d00e      	beq.n	8002f12 <HAL_TIM_Base_Start_IT+0x76>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a1c      	ldr	r2, [pc, #112]	; (8002f6c <HAL_TIM_Base_Start_IT+0xd0>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d009      	beq.n	8002f12 <HAL_TIM_Base_Start_IT+0x76>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a1b      	ldr	r2, [pc, #108]	; (8002f70 <HAL_TIM_Base_Start_IT+0xd4>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d004      	beq.n	8002f12 <HAL_TIM_Base_Start_IT+0x76>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a19      	ldr	r2, [pc, #100]	; (8002f74 <HAL_TIM_Base_Start_IT+0xd8>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d115      	bne.n	8002f3e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	4b17      	ldr	r3, [pc, #92]	; (8002f78 <HAL_TIM_Base_Start_IT+0xdc>)
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2b06      	cmp	r3, #6
 8002f22:	d015      	beq.n	8002f50 <HAL_TIM_Base_Start_IT+0xb4>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f2a:	d011      	beq.n	8002f50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 0201 	orr.w	r2, r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f3c:	e008      	b.n	8002f50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f042 0201 	orr.w	r2, r2, #1
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	e000      	b.n	8002f52 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3714      	adds	r7, #20
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	40012c00 	.word	0x40012c00
 8002f64:	40000400 	.word	0x40000400
 8002f68:	40000800 	.word	0x40000800
 8002f6c:	40013400 	.word	0x40013400
 8002f70:	40014000 	.word	0x40014000
 8002f74:	40015000 	.word	0x40015000
 8002f78:	00010007 	.word	0x00010007

08002f7c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 0201 	bic.w	r2, r2, #1
 8002f92:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6a1a      	ldr	r2, [r3, #32]
 8002f9a:	f241 1311 	movw	r3, #4369	; 0x1111
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10f      	bne.n	8002fc4 <HAL_TIM_Base_Stop_IT+0x48>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6a1a      	ldr	r2, [r3, #32]
 8002faa:	f240 4344 	movw	r3, #1092	; 0x444
 8002fae:	4013      	ands	r3, r2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d107      	bne.n	8002fc4 <HAL_TIM_Base_Stop_IT+0x48>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 0201 	bic.w	r2, r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b084      	sub	sp, #16
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d020      	beq.n	800303e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d01b      	beq.n	800303e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f06f 0202 	mvn.w	r2, #2
 800300e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	f003 0303 	and.w	r3, r3, #3
 8003020:	2b00      	cmp	r3, #0
 8003022:	d003      	beq.n	800302c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 f9ad 	bl	8003384 <HAL_TIM_IC_CaptureCallback>
 800302a:	e005      	b.n	8003038 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f99f 	bl	8003370 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f9b0 	bl	8003398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	2b00      	cmp	r3, #0
 8003046:	d020      	beq.n	800308a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f003 0304 	and.w	r3, r3, #4
 800304e:	2b00      	cmp	r3, #0
 8003050:	d01b      	beq.n	800308a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f06f 0204 	mvn.w	r2, #4
 800305a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2202      	movs	r2, #2
 8003060:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 f987 	bl	8003384 <HAL_TIM_IC_CaptureCallback>
 8003076:	e005      	b.n	8003084 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 f979 	bl	8003370 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f98a 	bl	8003398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	f003 0308 	and.w	r3, r3, #8
 8003090:	2b00      	cmp	r3, #0
 8003092:	d020      	beq.n	80030d6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b00      	cmp	r3, #0
 800309c:	d01b      	beq.n	80030d6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f06f 0208 	mvn.w	r2, #8
 80030a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2204      	movs	r2, #4
 80030ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	f003 0303 	and.w	r3, r3, #3
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d003      	beq.n	80030c4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 f961 	bl	8003384 <HAL_TIM_IC_CaptureCallback>
 80030c2:	e005      	b.n	80030d0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 f953 	bl	8003370 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f964 	bl	8003398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	f003 0310 	and.w	r3, r3, #16
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d020      	beq.n	8003122 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f003 0310 	and.w	r3, r3, #16
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d01b      	beq.n	8003122 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f06f 0210 	mvn.w	r2, #16
 80030f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2208      	movs	r2, #8
 80030f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	69db      	ldr	r3, [r3, #28]
 8003100:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f93b 	bl	8003384 <HAL_TIM_IC_CaptureCallback>
 800310e:	e005      	b.n	800311c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 f92d 	bl	8003370 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f93e 	bl	8003398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00c      	beq.n	8003146 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d007      	beq.n	8003146 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f06f 0201 	mvn.w	r2, #1
 800313e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f002 fa0f 	bl	8005564 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00c      	beq.n	800316a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003156:	2b00      	cmp	r3, #0
 8003158:	d007      	beq.n	800316a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003162:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 fb05 	bl	8003774 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00c      	beq.n	800318e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800317a:	2b00      	cmp	r3, #0
 800317c:	d007      	beq.n	800318e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003186:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 fafd 	bl	8003788 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00c      	beq.n	80031b2 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d007      	beq.n	80031b2 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 f8fd 	bl	80033ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	f003 0320 	and.w	r3, r3, #32
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00c      	beq.n	80031d6 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f003 0320 	and.w	r3, r3, #32
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d007      	beq.n	80031d6 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f06f 0220 	mvn.w	r2, #32
 80031ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 fac5 	bl	8003760 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031d6:	bf00      	nop
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b084      	sub	sp, #16
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
 80031e6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031e8:	2300      	movs	r3, #0
 80031ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d101      	bne.n	80031fa <HAL_TIM_ConfigClockSource+0x1c>
 80031f6:	2302      	movs	r3, #2
 80031f8:	e0b6      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x18a>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2202      	movs	r2, #2
 8003206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003218:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800321c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003224:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003236:	d03e      	beq.n	80032b6 <HAL_TIM_ConfigClockSource+0xd8>
 8003238:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800323c:	f200 8087 	bhi.w	800334e <HAL_TIM_ConfigClockSource+0x170>
 8003240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003244:	f000 8086 	beq.w	8003354 <HAL_TIM_ConfigClockSource+0x176>
 8003248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800324c:	d87f      	bhi.n	800334e <HAL_TIM_ConfigClockSource+0x170>
 800324e:	2b70      	cmp	r3, #112	; 0x70
 8003250:	d01a      	beq.n	8003288 <HAL_TIM_ConfigClockSource+0xaa>
 8003252:	2b70      	cmp	r3, #112	; 0x70
 8003254:	d87b      	bhi.n	800334e <HAL_TIM_ConfigClockSource+0x170>
 8003256:	2b60      	cmp	r3, #96	; 0x60
 8003258:	d050      	beq.n	80032fc <HAL_TIM_ConfigClockSource+0x11e>
 800325a:	2b60      	cmp	r3, #96	; 0x60
 800325c:	d877      	bhi.n	800334e <HAL_TIM_ConfigClockSource+0x170>
 800325e:	2b50      	cmp	r3, #80	; 0x50
 8003260:	d03c      	beq.n	80032dc <HAL_TIM_ConfigClockSource+0xfe>
 8003262:	2b50      	cmp	r3, #80	; 0x50
 8003264:	d873      	bhi.n	800334e <HAL_TIM_ConfigClockSource+0x170>
 8003266:	2b40      	cmp	r3, #64	; 0x40
 8003268:	d058      	beq.n	800331c <HAL_TIM_ConfigClockSource+0x13e>
 800326a:	2b40      	cmp	r3, #64	; 0x40
 800326c:	d86f      	bhi.n	800334e <HAL_TIM_ConfigClockSource+0x170>
 800326e:	2b30      	cmp	r3, #48	; 0x30
 8003270:	d064      	beq.n	800333c <HAL_TIM_ConfigClockSource+0x15e>
 8003272:	2b30      	cmp	r3, #48	; 0x30
 8003274:	d86b      	bhi.n	800334e <HAL_TIM_ConfigClockSource+0x170>
 8003276:	2b20      	cmp	r3, #32
 8003278:	d060      	beq.n	800333c <HAL_TIM_ConfigClockSource+0x15e>
 800327a:	2b20      	cmp	r3, #32
 800327c:	d867      	bhi.n	800334e <HAL_TIM_ConfigClockSource+0x170>
 800327e:	2b00      	cmp	r3, #0
 8003280:	d05c      	beq.n	800333c <HAL_TIM_ConfigClockSource+0x15e>
 8003282:	2b10      	cmp	r3, #16
 8003284:	d05a      	beq.n	800333c <HAL_TIM_ConfigClockSource+0x15e>
 8003286:	e062      	b.n	800334e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6818      	ldr	r0, [r3, #0]
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	6899      	ldr	r1, [r3, #8]
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	f000 f9b6 	bl	8003608 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032aa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68ba      	ldr	r2, [r7, #8]
 80032b2:	609a      	str	r2, [r3, #8]
      break;
 80032b4:	e04f      	b.n	8003356 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6818      	ldr	r0, [r3, #0]
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	6899      	ldr	r1, [r3, #8]
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	f000 f99f 	bl	8003608 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689a      	ldr	r2, [r3, #8]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032d8:	609a      	str	r2, [r3, #8]
      break;
 80032da:	e03c      	b.n	8003356 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6818      	ldr	r0, [r3, #0]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	6859      	ldr	r1, [r3, #4]
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	461a      	mov	r2, r3
 80032ea:	f000 f913 	bl	8003514 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2150      	movs	r1, #80	; 0x50
 80032f4:	4618      	mov	r0, r3
 80032f6:	f000 f96c 	bl	80035d2 <TIM_ITRx_SetConfig>
      break;
 80032fa:	e02c      	b.n	8003356 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6818      	ldr	r0, [r3, #0]
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	6859      	ldr	r1, [r3, #4]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	461a      	mov	r2, r3
 800330a:	f000 f932 	bl	8003572 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2160      	movs	r1, #96	; 0x60
 8003314:	4618      	mov	r0, r3
 8003316:	f000 f95c 	bl	80035d2 <TIM_ITRx_SetConfig>
      break;
 800331a:	e01c      	b.n	8003356 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6818      	ldr	r0, [r3, #0]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	6859      	ldr	r1, [r3, #4]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	461a      	mov	r2, r3
 800332a:	f000 f8f3 	bl	8003514 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2140      	movs	r1, #64	; 0x40
 8003334:	4618      	mov	r0, r3
 8003336:	f000 f94c 	bl	80035d2 <TIM_ITRx_SetConfig>
      break;
 800333a:	e00c      	b.n	8003356 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4619      	mov	r1, r3
 8003346:	4610      	mov	r0, r2
 8003348:	f000 f943 	bl	80035d2 <TIM_ITRx_SetConfig>
      break;
 800334c:	e003      	b.n	8003356 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	73fb      	strb	r3, [r7, #15]
      break;
 8003352:	e000      	b.n	8003356 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003354:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003366:	7bfb      	ldrb	r3, [r7, #15]
}
 8003368:	4618      	mov	r0, r3
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a48      	ldr	r2, [pc, #288]	; (80034f4 <TIM_Base_SetConfig+0x134>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d013      	beq.n	8003400 <TIM_Base_SetConfig+0x40>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033de:	d00f      	beq.n	8003400 <TIM_Base_SetConfig+0x40>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a45      	ldr	r2, [pc, #276]	; (80034f8 <TIM_Base_SetConfig+0x138>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d00b      	beq.n	8003400 <TIM_Base_SetConfig+0x40>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a44      	ldr	r2, [pc, #272]	; (80034fc <TIM_Base_SetConfig+0x13c>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d007      	beq.n	8003400 <TIM_Base_SetConfig+0x40>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a43      	ldr	r2, [pc, #268]	; (8003500 <TIM_Base_SetConfig+0x140>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d003      	beq.n	8003400 <TIM_Base_SetConfig+0x40>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a42      	ldr	r2, [pc, #264]	; (8003504 <TIM_Base_SetConfig+0x144>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d108      	bne.n	8003412 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003406:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	4313      	orrs	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a37      	ldr	r2, [pc, #220]	; (80034f4 <TIM_Base_SetConfig+0x134>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d01f      	beq.n	800345a <TIM_Base_SetConfig+0x9a>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003420:	d01b      	beq.n	800345a <TIM_Base_SetConfig+0x9a>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a34      	ldr	r2, [pc, #208]	; (80034f8 <TIM_Base_SetConfig+0x138>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d017      	beq.n	800345a <TIM_Base_SetConfig+0x9a>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a33      	ldr	r2, [pc, #204]	; (80034fc <TIM_Base_SetConfig+0x13c>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d013      	beq.n	800345a <TIM_Base_SetConfig+0x9a>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a32      	ldr	r2, [pc, #200]	; (8003500 <TIM_Base_SetConfig+0x140>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d00f      	beq.n	800345a <TIM_Base_SetConfig+0x9a>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a32      	ldr	r2, [pc, #200]	; (8003508 <TIM_Base_SetConfig+0x148>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d00b      	beq.n	800345a <TIM_Base_SetConfig+0x9a>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a31      	ldr	r2, [pc, #196]	; (800350c <TIM_Base_SetConfig+0x14c>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d007      	beq.n	800345a <TIM_Base_SetConfig+0x9a>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a30      	ldr	r2, [pc, #192]	; (8003510 <TIM_Base_SetConfig+0x150>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d003      	beq.n	800345a <TIM_Base_SetConfig+0x9a>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a2b      	ldr	r2, [pc, #172]	; (8003504 <TIM_Base_SetConfig+0x144>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d108      	bne.n	800346c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003460:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	4313      	orrs	r3, r2
 800346a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	4313      	orrs	r3, r2
 8003478:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a18      	ldr	r2, [pc, #96]	; (80034f4 <TIM_Base_SetConfig+0x134>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d013      	beq.n	80034c0 <TIM_Base_SetConfig+0x100>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a19      	ldr	r2, [pc, #100]	; (8003500 <TIM_Base_SetConfig+0x140>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d00f      	beq.n	80034c0 <TIM_Base_SetConfig+0x100>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a19      	ldr	r2, [pc, #100]	; (8003508 <TIM_Base_SetConfig+0x148>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d00b      	beq.n	80034c0 <TIM_Base_SetConfig+0x100>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a18      	ldr	r2, [pc, #96]	; (800350c <TIM_Base_SetConfig+0x14c>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d007      	beq.n	80034c0 <TIM_Base_SetConfig+0x100>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a17      	ldr	r2, [pc, #92]	; (8003510 <TIM_Base_SetConfig+0x150>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d003      	beq.n	80034c0 <TIM_Base_SetConfig+0x100>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a12      	ldr	r2, [pc, #72]	; (8003504 <TIM_Base_SetConfig+0x144>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d103      	bne.n	80034c8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	691a      	ldr	r2, [r3, #16]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d105      	bne.n	80034e6 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	f023 0201 	bic.w	r2, r3, #1
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	611a      	str	r2, [r3, #16]
  }
}
 80034e6:	bf00      	nop
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	40012c00 	.word	0x40012c00
 80034f8:	40000400 	.word	0x40000400
 80034fc:	40000800 	.word	0x40000800
 8003500:	40013400 	.word	0x40013400
 8003504:	40015000 	.word	0x40015000
 8003508:	40014000 	.word	0x40014000
 800350c:	40014400 	.word	0x40014400
 8003510:	40014800 	.word	0x40014800

08003514 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003514:	b480      	push	{r7}
 8003516:	b087      	sub	sp, #28
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	f023 0201 	bic.w	r2, r3, #1
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800353e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	011b      	lsls	r3, r3, #4
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	4313      	orrs	r3, r2
 8003548:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f023 030a 	bic.w	r3, r3, #10
 8003550:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	4313      	orrs	r3, r2
 8003558:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	621a      	str	r2, [r3, #32]
}
 8003566:	bf00      	nop
 8003568:	371c      	adds	r7, #28
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003572:	b480      	push	{r7}
 8003574:	b087      	sub	sp, #28
 8003576:	af00      	add	r7, sp, #0
 8003578:	60f8      	str	r0, [r7, #12]
 800357a:	60b9      	str	r1, [r7, #8]
 800357c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6a1b      	ldr	r3, [r3, #32]
 8003588:	f023 0210 	bic.w	r2, r3, #16
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800359c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	031b      	lsls	r3, r3, #12
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	011b      	lsls	r3, r3, #4
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	621a      	str	r2, [r3, #32]
}
 80035c6:	bf00      	nop
 80035c8:	371c      	adds	r7, #28
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr

080035d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035d2:	b480      	push	{r7}
 80035d4:	b085      	sub	sp, #20
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
 80035da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	f043 0307 	orr.w	r3, r3, #7
 80035f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	609a      	str	r2, [r3, #8]
}
 80035fc:	bf00      	nop
 80035fe:	3714      	adds	r7, #20
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003608:	b480      	push	{r7}
 800360a:	b087      	sub	sp, #28
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
 8003614:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003622:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	021a      	lsls	r2, r3, #8
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	431a      	orrs	r2, r3
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	4313      	orrs	r3, r2
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	4313      	orrs	r3, r2
 8003634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	609a      	str	r2, [r3, #8]
}
 800363c:	bf00      	nop
 800363e:	371c      	adds	r7, #28
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003658:	2b01      	cmp	r3, #1
 800365a:	d101      	bne.n	8003660 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800365c:	2302      	movs	r3, #2
 800365e:	e06d      	b.n	800373c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2202      	movs	r2, #2
 800366c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a30      	ldr	r2, [pc, #192]	; (8003748 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d009      	beq.n	800369e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a2f      	ldr	r2, [pc, #188]	; (800374c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d004      	beq.n	800369e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a2d      	ldr	r2, [pc, #180]	; (8003750 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d108      	bne.n	80036b0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80036a4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	4313      	orrs	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a1e      	ldr	r2, [pc, #120]	; (8003748 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d01d      	beq.n	8003710 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036dc:	d018      	beq.n	8003710 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a1c      	ldr	r2, [pc, #112]	; (8003754 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d013      	beq.n	8003710 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a1a      	ldr	r2, [pc, #104]	; (8003758 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d00e      	beq.n	8003710 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a15      	ldr	r2, [pc, #84]	; (800374c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d009      	beq.n	8003710 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a16      	ldr	r2, [pc, #88]	; (800375c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d004      	beq.n	8003710 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a11      	ldr	r2, [pc, #68]	; (8003750 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d10c      	bne.n	800372a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003716:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	68ba      	ldr	r2, [r7, #8]
 800371e:	4313      	orrs	r3, r2
 8003720:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3714      	adds	r7, #20
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	40012c00 	.word	0x40012c00
 800374c:	40013400 	.word	0x40013400
 8003750:	40015000 	.word	0x40015000
 8003754:	40000400 	.word	0x40000400
 8003758:	40000800 	.word	0x40000800
 800375c:	40014000 	.word	0x40014000

08003760 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e040      	b.n	8003830 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d106      	bne.n	80037c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7fc ffda 	bl	8000778 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2224      	movs	r2, #36	; 0x24
 80037c8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 0201 	bic.w	r2, r2, #1
 80037d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d002      	beq.n	80037e8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 fd7c 	bl	80042e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 fba5 	bl	8003f38 <UART_SetConfig>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d101      	bne.n	80037f8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e01b      	b.n	8003830 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	685a      	ldr	r2, [r3, #4]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003806:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689a      	ldr	r2, [r3, #8]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003816:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f042 0201 	orr.w	r2, r2, #1
 8003826:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 fdfb 	bl	8004424 <UART_CheckIdleState>
 800382e:	4603      	mov	r3, r0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08a      	sub	sp, #40	; 0x28
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	4613      	mov	r3, r2
 8003844:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800384a:	2b20      	cmp	r3, #32
 800384c:	d165      	bne.n	800391a <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d002      	beq.n	800385a <HAL_UART_Transmit_DMA+0x22>
 8003854:	88fb      	ldrh	r3, [r7, #6]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e05e      	b.n	800391c <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	68ba      	ldr	r2, [r7, #8]
 8003862:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	88fa      	ldrh	r2, [r7, #6]
 8003868:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	88fa      	ldrh	r2, [r7, #6]
 8003870:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2221      	movs	r2, #33	; 0x21
 8003880:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003886:	2b00      	cmp	r3, #0
 8003888:	d027      	beq.n	80038da <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388e:	4a25      	ldr	r2, [pc, #148]	; (8003924 <HAL_UART_Transmit_DMA+0xec>)
 8003890:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003896:	4a24      	ldr	r2, [pc, #144]	; (8003928 <HAL_UART_Transmit_DMA+0xf0>)
 8003898:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389e:	4a23      	ldr	r2, [pc, #140]	; (800392c <HAL_UART_Transmit_DMA+0xf4>)
 80038a0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a6:	2200      	movs	r2, #0
 80038a8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038b2:	4619      	mov	r1, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	3328      	adds	r3, #40	; 0x28
 80038ba:	461a      	mov	r2, r3
 80038bc:	88fb      	ldrh	r3, [r7, #6]
 80038be:	f7fd fa47 	bl	8000d50 <HAL_DMA_Start_IT>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d008      	beq.n	80038da <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2210      	movs	r2, #16
 80038cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2220      	movs	r2, #32
 80038d4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e020      	b.n	800391c <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2240      	movs	r2, #64	; 0x40
 80038e0:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	3308      	adds	r3, #8
 80038e8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	e853 3f00 	ldrex	r3, [r3]
 80038f0:	613b      	str	r3, [r7, #16]
   return(result);
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038f8:	627b      	str	r3, [r7, #36]	; 0x24
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	3308      	adds	r3, #8
 8003900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003902:	623a      	str	r2, [r7, #32]
 8003904:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003906:	69f9      	ldr	r1, [r7, #28]
 8003908:	6a3a      	ldr	r2, [r7, #32]
 800390a:	e841 2300 	strex	r3, r2, [r1]
 800390e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1e5      	bne.n	80038e2 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8003916:	2300      	movs	r3, #0
 8003918:	e000      	b.n	800391c <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800391a:	2302      	movs	r3, #2
  }
}
 800391c:	4618      	mov	r0, r3
 800391e:	3728      	adds	r7, #40	; 0x28
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	080048a5 	.word	0x080048a5
 8003928:	08004939 	.word	0x08004939
 800392c:	08004ab9 	.word	0x08004ab9

08003930 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b0ba      	sub	sp, #232	; 0xe8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003956:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800395a:	f640 030f 	movw	r3, #2063	; 0x80f
 800395e:	4013      	ands	r3, r2
 8003960:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003964:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003968:	2b00      	cmp	r3, #0
 800396a:	d115      	bne.n	8003998 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800396c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003970:	f003 0320 	and.w	r3, r3, #32
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00f      	beq.n	8003998 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800397c:	f003 0320 	and.w	r3, r3, #32
 8003980:	2b00      	cmp	r3, #0
 8003982:	d009      	beq.n	8003998 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 82ab 	beq.w	8003ee4 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	4798      	blx	r3
      }
      return;
 8003996:	e2a5      	b.n	8003ee4 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003998:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800399c:	2b00      	cmp	r3, #0
 800399e:	f000 8117 	beq.w	8003bd0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80039a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d106      	bne.n	80039bc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80039ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80039b2:	4b85      	ldr	r3, [pc, #532]	; (8003bc8 <HAL_UART_IRQHandler+0x298>)
 80039b4:	4013      	ands	r3, r2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f000 810a 	beq.w	8003bd0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80039bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039c0:	f003 0301 	and.w	r3, r3, #1
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d011      	beq.n	80039ec <HAL_UART_IRQHandler+0xbc>
 80039c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00b      	beq.n	80039ec <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2201      	movs	r2, #1
 80039da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039e2:	f043 0201 	orr.w	r2, r3, #1
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d011      	beq.n	8003a1c <HAL_UART_IRQHandler+0xec>
 80039f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00b      	beq.n	8003a1c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2202      	movs	r2, #2
 8003a0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a12:	f043 0204 	orr.w	r2, r3, #4
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d011      	beq.n	8003a4c <HAL_UART_IRQHandler+0x11c>
 8003a28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00b      	beq.n	8003a4c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2204      	movs	r2, #4
 8003a3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a42:	f043 0202 	orr.w	r2, r3, #2
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a50:	f003 0308 	and.w	r3, r3, #8
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d017      	beq.n	8003a88 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a5c:	f003 0320 	and.w	r3, r3, #32
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d105      	bne.n	8003a70 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003a64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a68:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00b      	beq.n	8003a88 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2208      	movs	r2, #8
 8003a76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a7e:	f043 0208 	orr.w	r2, r3, #8
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d012      	beq.n	8003aba <HAL_UART_IRQHandler+0x18a>
 8003a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00c      	beq.n	8003aba <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003aa8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ab0:	f043 0220 	orr.w	r2, r3, #32
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 8211 	beq.w	8003ee8 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aca:	f003 0320 	and.w	r3, r3, #32
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00d      	beq.n	8003aee <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ad6:	f003 0320 	and.w	r3, r3, #32
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d007      	beq.n	8003aee <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d003      	beq.n	8003aee <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003af4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b02:	2b40      	cmp	r3, #64	; 0x40
 8003b04:	d005      	beq.n	8003b12 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003b06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b0a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d04f      	beq.n	8003bb2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 fe62 	bl	80047dc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b22:	2b40      	cmp	r3, #64	; 0x40
 8003b24:	d141      	bne.n	8003baa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	3308      	adds	r3, #8
 8003b2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b34:	e853 3f00 	ldrex	r3, [r3]
 8003b38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003b3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	3308      	adds	r3, #8
 8003b4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b62:	e841 2300 	strex	r3, r2, [r1]
 8003b66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1d9      	bne.n	8003b26 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d013      	beq.n	8003ba2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b7e:	4a13      	ldr	r2, [pc, #76]	; (8003bcc <HAL_UART_IRQHandler+0x29c>)
 8003b80:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7fd f97f 	bl	8000e8a <HAL_DMA_Abort_IT>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d017      	beq.n	8003bc2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003b9c:	4610      	mov	r0, r2
 8003b9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ba0:	e00f      	b.n	8003bc2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f9be 	bl	8003f24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ba8:	e00b      	b.n	8003bc2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f9ba 	bl	8003f24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb0:	e007      	b.n	8003bc2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f9b6 	bl	8003f24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003bc0:	e192      	b.n	8003ee8 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc2:	bf00      	nop
    return;
 8003bc4:	e190      	b.n	8003ee8 <HAL_UART_IRQHandler+0x5b8>
 8003bc6:	bf00      	nop
 8003bc8:	04000120 	.word	0x04000120
 8003bcc:	08004b37 	.word	0x08004b37

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	f040 814b 	bne.w	8003e70 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bde:	f003 0310 	and.w	r3, r3, #16
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f000 8144 	beq.w	8003e70 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bec:	f003 0310 	and.w	r3, r3, #16
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 813d 	beq.w	8003e70 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2210      	movs	r2, #16
 8003bfc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c08:	2b40      	cmp	r3, #64	; 0x40
 8003c0a:	f040 80b5 	bne.w	8003d78 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c1a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f000 8164 	beq.w	8003eec <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003c2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	f080 815c 	bcs.w	8003eec <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c3a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	2b20      	cmp	r3, #32
 8003c46:	f000 8086 	beq.w	8003d56 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c56:	e853 3f00 	ldrex	r3, [r3]
 8003c5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003c74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003c78:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c80:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c84:	e841 2300 	strex	r3, r2, [r1]
 8003c88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1da      	bne.n	8003c4a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	3308      	adds	r3, #8
 8003c9a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c9e:	e853 3f00 	ldrex	r3, [r3]
 8003ca2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003ca4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ca6:	f023 0301 	bic.w	r3, r3, #1
 8003caa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	3308      	adds	r3, #8
 8003cb4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003cb8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003cbc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cbe:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003cc0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003cc4:	e841 2300 	strex	r3, r2, [r1]
 8003cc8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003cca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1e1      	bne.n	8003c94 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	3308      	adds	r3, #8
 8003cd6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cda:	e853 3f00 	ldrex	r3, [r3]
 8003cde:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003ce0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ce2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ce6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	3308      	adds	r3, #8
 8003cf0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003cf4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003cf6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003cfa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003cfc:	e841 2300 	strex	r3, r2, [r1]
 8003d00:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1e3      	bne.n	8003cd0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d1e:	e853 3f00 	ldrex	r3, [r3]
 8003d22:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d26:	f023 0310 	bic.w	r3, r3, #16
 8003d2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	461a      	mov	r2, r3
 8003d34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d38:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d3a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d40:	e841 2300 	strex	r3, r2, [r1]
 8003d44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1e4      	bne.n	8003d16 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7fd f85c 	bl	8000e0e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2202      	movs	r2, #2
 8003d5a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	4619      	mov	r1, r3
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f001 fc9b 	bl	80056ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d76:	e0b9      	b.n	8003eec <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 80ab 	beq.w	8003ef0 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003d9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f000 80a6 	beq.w	8003ef0 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dac:	e853 3f00 	ldrex	r3, [r3]
 8003db0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003db4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003db8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003dc6:	647b      	str	r3, [r7, #68]	; 0x44
 8003dc8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003dcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dce:	e841 2300 	strex	r3, r2, [r1]
 8003dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1e4      	bne.n	8003da4 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	3308      	adds	r3, #8
 8003de0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de4:	e853 3f00 	ldrex	r3, [r3]
 8003de8:	623b      	str	r3, [r7, #32]
   return(result);
 8003dea:	6a3b      	ldr	r3, [r7, #32]
 8003dec:	f023 0301 	bic.w	r3, r3, #1
 8003df0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	3308      	adds	r3, #8
 8003dfa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003dfe:	633a      	str	r2, [r7, #48]	; 0x30
 8003e00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e06:	e841 2300 	strex	r3, r2, [r1]
 8003e0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1e3      	bne.n	8003dda <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2220      	movs	r2, #32
 8003e16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	e853 3f00 	ldrex	r3, [r3]
 8003e32:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f023 0310 	bic.w	r3, r3, #16
 8003e3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	461a      	mov	r2, r3
 8003e44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003e48:	61fb      	str	r3, [r7, #28]
 8003e4a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4c:	69b9      	ldr	r1, [r7, #24]
 8003e4e:	69fa      	ldr	r2, [r7, #28]
 8003e50:	e841 2300 	strex	r3, r2, [r1]
 8003e54:	617b      	str	r3, [r7, #20]
   return(result);
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1e4      	bne.n	8003e26 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e66:	4619      	mov	r1, r3
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f001 fc1f 	bl	80056ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e6e:	e03f      	b.n	8003ef0 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00e      	beq.n	8003e9a <HAL_UART_IRQHandler+0x56a>
 8003e7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d008      	beq.n	8003e9a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003e90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 fe8f 	bl	8004bb6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e98:	e02d      	b.n	8003ef6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00e      	beq.n	8003ec4 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003ea6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d008      	beq.n	8003ec4 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d01c      	beq.n	8003ef4 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	4798      	blx	r3
    }
    return;
 8003ec2:	e017      	b.n	8003ef4 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d012      	beq.n	8003ef6 <HAL_UART_IRQHandler+0x5c6>
 8003ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00c      	beq.n	8003ef6 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 fe40 	bl	8004b62 <UART_EndTransmit_IT>
    return;
 8003ee2:	e008      	b.n	8003ef6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003ee4:	bf00      	nop
 8003ee6:	e006      	b.n	8003ef6 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003ee8:	bf00      	nop
 8003eea:	e004      	b.n	8003ef6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003eec:	bf00      	nop
 8003eee:	e002      	b.n	8003ef6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003ef0:	bf00      	nop
 8003ef2:	e000      	b.n	8003ef6 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003ef4:	bf00      	nop
  }

}
 8003ef6:	37e8      	adds	r7, #232	; 0xe8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b088      	sub	sp, #32
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f40:	2300      	movs	r3, #0
 8003f42:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	431a      	orrs	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	69db      	ldr	r3, [r3, #28]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	4b92      	ldr	r3, [pc, #584]	; (80041ac <UART_SetConfig+0x274>)
 8003f64:	4013      	ands	r3, r2
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	6812      	ldr	r2, [r2, #0]
 8003f6a:	6979      	ldr	r1, [r7, #20]
 8003f6c:	430b      	orrs	r3, r1
 8003f6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	68da      	ldr	r2, [r3, #12]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a1b      	ldr	r3, [r3, #32]
 8003f90:	697a      	ldr	r2, [r7, #20]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a80      	ldr	r2, [pc, #512]	; (80041b0 <UART_SetConfig+0x278>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d120      	bne.n	8003ff6 <UART_SetConfig+0xbe>
 8003fb4:	4b7f      	ldr	r3, [pc, #508]	; (80041b4 <UART_SetConfig+0x27c>)
 8003fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb8:	f003 0303 	and.w	r3, r3, #3
 8003fbc:	2b03      	cmp	r3, #3
 8003fbe:	d817      	bhi.n	8003ff0 <UART_SetConfig+0xb8>
 8003fc0:	a201      	add	r2, pc, #4	; (adr r2, 8003fc8 <UART_SetConfig+0x90>)
 8003fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc6:	bf00      	nop
 8003fc8:	08003fd9 	.word	0x08003fd9
 8003fcc:	08003fe5 	.word	0x08003fe5
 8003fd0:	08003feb 	.word	0x08003feb
 8003fd4:	08003fdf 	.word	0x08003fdf
 8003fd8:	2301      	movs	r3, #1
 8003fda:	77fb      	strb	r3, [r7, #31]
 8003fdc:	e0b5      	b.n	800414a <UART_SetConfig+0x212>
 8003fde:	2302      	movs	r3, #2
 8003fe0:	77fb      	strb	r3, [r7, #31]
 8003fe2:	e0b2      	b.n	800414a <UART_SetConfig+0x212>
 8003fe4:	2304      	movs	r3, #4
 8003fe6:	77fb      	strb	r3, [r7, #31]
 8003fe8:	e0af      	b.n	800414a <UART_SetConfig+0x212>
 8003fea:	2308      	movs	r3, #8
 8003fec:	77fb      	strb	r3, [r7, #31]
 8003fee:	e0ac      	b.n	800414a <UART_SetConfig+0x212>
 8003ff0:	2310      	movs	r3, #16
 8003ff2:	77fb      	strb	r3, [r7, #31]
 8003ff4:	e0a9      	b.n	800414a <UART_SetConfig+0x212>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a6f      	ldr	r2, [pc, #444]	; (80041b8 <UART_SetConfig+0x280>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d124      	bne.n	800404a <UART_SetConfig+0x112>
 8004000:	4b6c      	ldr	r3, [pc, #432]	; (80041b4 <UART_SetConfig+0x27c>)
 8004002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004004:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004008:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800400c:	d011      	beq.n	8004032 <UART_SetConfig+0xfa>
 800400e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004012:	d817      	bhi.n	8004044 <UART_SetConfig+0x10c>
 8004014:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004018:	d011      	beq.n	800403e <UART_SetConfig+0x106>
 800401a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800401e:	d811      	bhi.n	8004044 <UART_SetConfig+0x10c>
 8004020:	2b00      	cmp	r3, #0
 8004022:	d003      	beq.n	800402c <UART_SetConfig+0xf4>
 8004024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004028:	d006      	beq.n	8004038 <UART_SetConfig+0x100>
 800402a:	e00b      	b.n	8004044 <UART_SetConfig+0x10c>
 800402c:	2300      	movs	r3, #0
 800402e:	77fb      	strb	r3, [r7, #31]
 8004030:	e08b      	b.n	800414a <UART_SetConfig+0x212>
 8004032:	2302      	movs	r3, #2
 8004034:	77fb      	strb	r3, [r7, #31]
 8004036:	e088      	b.n	800414a <UART_SetConfig+0x212>
 8004038:	2304      	movs	r3, #4
 800403a:	77fb      	strb	r3, [r7, #31]
 800403c:	e085      	b.n	800414a <UART_SetConfig+0x212>
 800403e:	2308      	movs	r3, #8
 8004040:	77fb      	strb	r3, [r7, #31]
 8004042:	e082      	b.n	800414a <UART_SetConfig+0x212>
 8004044:	2310      	movs	r3, #16
 8004046:	77fb      	strb	r3, [r7, #31]
 8004048:	e07f      	b.n	800414a <UART_SetConfig+0x212>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a5b      	ldr	r2, [pc, #364]	; (80041bc <UART_SetConfig+0x284>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d124      	bne.n	800409e <UART_SetConfig+0x166>
 8004054:	4b57      	ldr	r3, [pc, #348]	; (80041b4 <UART_SetConfig+0x27c>)
 8004056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004058:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800405c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004060:	d011      	beq.n	8004086 <UART_SetConfig+0x14e>
 8004062:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004066:	d817      	bhi.n	8004098 <UART_SetConfig+0x160>
 8004068:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800406c:	d011      	beq.n	8004092 <UART_SetConfig+0x15a>
 800406e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004072:	d811      	bhi.n	8004098 <UART_SetConfig+0x160>
 8004074:	2b00      	cmp	r3, #0
 8004076:	d003      	beq.n	8004080 <UART_SetConfig+0x148>
 8004078:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800407c:	d006      	beq.n	800408c <UART_SetConfig+0x154>
 800407e:	e00b      	b.n	8004098 <UART_SetConfig+0x160>
 8004080:	2300      	movs	r3, #0
 8004082:	77fb      	strb	r3, [r7, #31]
 8004084:	e061      	b.n	800414a <UART_SetConfig+0x212>
 8004086:	2302      	movs	r3, #2
 8004088:	77fb      	strb	r3, [r7, #31]
 800408a:	e05e      	b.n	800414a <UART_SetConfig+0x212>
 800408c:	2304      	movs	r3, #4
 800408e:	77fb      	strb	r3, [r7, #31]
 8004090:	e05b      	b.n	800414a <UART_SetConfig+0x212>
 8004092:	2308      	movs	r3, #8
 8004094:	77fb      	strb	r3, [r7, #31]
 8004096:	e058      	b.n	800414a <UART_SetConfig+0x212>
 8004098:	2310      	movs	r3, #16
 800409a:	77fb      	strb	r3, [r7, #31]
 800409c:	e055      	b.n	800414a <UART_SetConfig+0x212>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a47      	ldr	r2, [pc, #284]	; (80041c0 <UART_SetConfig+0x288>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d124      	bne.n	80040f2 <UART_SetConfig+0x1ba>
 80040a8:	4b42      	ldr	r3, [pc, #264]	; (80041b4 <UART_SetConfig+0x27c>)
 80040aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ac:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80040b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040b4:	d011      	beq.n	80040da <UART_SetConfig+0x1a2>
 80040b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040ba:	d817      	bhi.n	80040ec <UART_SetConfig+0x1b4>
 80040bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040c0:	d011      	beq.n	80040e6 <UART_SetConfig+0x1ae>
 80040c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040c6:	d811      	bhi.n	80040ec <UART_SetConfig+0x1b4>
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d003      	beq.n	80040d4 <UART_SetConfig+0x19c>
 80040cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040d0:	d006      	beq.n	80040e0 <UART_SetConfig+0x1a8>
 80040d2:	e00b      	b.n	80040ec <UART_SetConfig+0x1b4>
 80040d4:	2300      	movs	r3, #0
 80040d6:	77fb      	strb	r3, [r7, #31]
 80040d8:	e037      	b.n	800414a <UART_SetConfig+0x212>
 80040da:	2302      	movs	r3, #2
 80040dc:	77fb      	strb	r3, [r7, #31]
 80040de:	e034      	b.n	800414a <UART_SetConfig+0x212>
 80040e0:	2304      	movs	r3, #4
 80040e2:	77fb      	strb	r3, [r7, #31]
 80040e4:	e031      	b.n	800414a <UART_SetConfig+0x212>
 80040e6:	2308      	movs	r3, #8
 80040e8:	77fb      	strb	r3, [r7, #31]
 80040ea:	e02e      	b.n	800414a <UART_SetConfig+0x212>
 80040ec:	2310      	movs	r3, #16
 80040ee:	77fb      	strb	r3, [r7, #31]
 80040f0:	e02b      	b.n	800414a <UART_SetConfig+0x212>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a33      	ldr	r2, [pc, #204]	; (80041c4 <UART_SetConfig+0x28c>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d124      	bne.n	8004146 <UART_SetConfig+0x20e>
 80040fc:	4b2d      	ldr	r3, [pc, #180]	; (80041b4 <UART_SetConfig+0x27c>)
 80040fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004100:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004104:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004108:	d011      	beq.n	800412e <UART_SetConfig+0x1f6>
 800410a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800410e:	d817      	bhi.n	8004140 <UART_SetConfig+0x208>
 8004110:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004114:	d011      	beq.n	800413a <UART_SetConfig+0x202>
 8004116:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800411a:	d811      	bhi.n	8004140 <UART_SetConfig+0x208>
 800411c:	2b00      	cmp	r3, #0
 800411e:	d003      	beq.n	8004128 <UART_SetConfig+0x1f0>
 8004120:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004124:	d006      	beq.n	8004134 <UART_SetConfig+0x1fc>
 8004126:	e00b      	b.n	8004140 <UART_SetConfig+0x208>
 8004128:	2300      	movs	r3, #0
 800412a:	77fb      	strb	r3, [r7, #31]
 800412c:	e00d      	b.n	800414a <UART_SetConfig+0x212>
 800412e:	2302      	movs	r3, #2
 8004130:	77fb      	strb	r3, [r7, #31]
 8004132:	e00a      	b.n	800414a <UART_SetConfig+0x212>
 8004134:	2304      	movs	r3, #4
 8004136:	77fb      	strb	r3, [r7, #31]
 8004138:	e007      	b.n	800414a <UART_SetConfig+0x212>
 800413a:	2308      	movs	r3, #8
 800413c:	77fb      	strb	r3, [r7, #31]
 800413e:	e004      	b.n	800414a <UART_SetConfig+0x212>
 8004140:	2310      	movs	r3, #16
 8004142:	77fb      	strb	r3, [r7, #31]
 8004144:	e001      	b.n	800414a <UART_SetConfig+0x212>
 8004146:	2310      	movs	r3, #16
 8004148:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004152:	d16b      	bne.n	800422c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8004154:	7ffb      	ldrb	r3, [r7, #31]
 8004156:	2b08      	cmp	r3, #8
 8004158:	d838      	bhi.n	80041cc <UART_SetConfig+0x294>
 800415a:	a201      	add	r2, pc, #4	; (adr r2, 8004160 <UART_SetConfig+0x228>)
 800415c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004160:	08004185 	.word	0x08004185
 8004164:	0800418d 	.word	0x0800418d
 8004168:	08004195 	.word	0x08004195
 800416c:	080041cd 	.word	0x080041cd
 8004170:	0800419b 	.word	0x0800419b
 8004174:	080041cd 	.word	0x080041cd
 8004178:	080041cd 	.word	0x080041cd
 800417c:	080041cd 	.word	0x080041cd
 8004180:	080041a3 	.word	0x080041a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004184:	f7fe fbd0 	bl	8002928 <HAL_RCC_GetPCLK1Freq>
 8004188:	61b8      	str	r0, [r7, #24]
        break;
 800418a:	e024      	b.n	80041d6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800418c:	f7fe fbee 	bl	800296c <HAL_RCC_GetPCLK2Freq>
 8004190:	61b8      	str	r0, [r7, #24]
        break;
 8004192:	e020      	b.n	80041d6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004194:	4b0c      	ldr	r3, [pc, #48]	; (80041c8 <UART_SetConfig+0x290>)
 8004196:	61bb      	str	r3, [r7, #24]
        break;
 8004198:	e01d      	b.n	80041d6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800419a:	f7fe fb65 	bl	8002868 <HAL_RCC_GetSysClockFreq>
 800419e:	61b8      	str	r0, [r7, #24]
        break;
 80041a0:	e019      	b.n	80041d6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041a6:	61bb      	str	r3, [r7, #24]
        break;
 80041a8:	e015      	b.n	80041d6 <UART_SetConfig+0x29e>
 80041aa:	bf00      	nop
 80041ac:	efff69f3 	.word	0xefff69f3
 80041b0:	40013800 	.word	0x40013800
 80041b4:	40021000 	.word	0x40021000
 80041b8:	40004400 	.word	0x40004400
 80041bc:	40004800 	.word	0x40004800
 80041c0:	40004c00 	.word	0x40004c00
 80041c4:	40005000 	.word	0x40005000
 80041c8:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80041cc:	2300      	movs	r3, #0
 80041ce:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	77bb      	strb	r3, [r7, #30]
        break;
 80041d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d073      	beq.n	80042c4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	005a      	lsls	r2, r3, #1
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	085b      	lsrs	r3, r3, #1
 80041e6:	441a      	add	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	2b0f      	cmp	r3, #15
 80041f6:	d916      	bls.n	8004226 <UART_SetConfig+0x2ee>
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041fe:	d212      	bcs.n	8004226 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	b29b      	uxth	r3, r3
 8004204:	f023 030f 	bic.w	r3, r3, #15
 8004208:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	085b      	lsrs	r3, r3, #1
 800420e:	b29b      	uxth	r3, r3
 8004210:	f003 0307 	and.w	r3, r3, #7
 8004214:	b29a      	uxth	r2, r3
 8004216:	89fb      	ldrh	r3, [r7, #14]
 8004218:	4313      	orrs	r3, r2
 800421a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	89fa      	ldrh	r2, [r7, #14]
 8004222:	60da      	str	r2, [r3, #12]
 8004224:	e04e      	b.n	80042c4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	77bb      	strb	r3, [r7, #30]
 800422a:	e04b      	b.n	80042c4 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800422c:	7ffb      	ldrb	r3, [r7, #31]
 800422e:	2b08      	cmp	r3, #8
 8004230:	d827      	bhi.n	8004282 <UART_SetConfig+0x34a>
 8004232:	a201      	add	r2, pc, #4	; (adr r2, 8004238 <UART_SetConfig+0x300>)
 8004234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004238:	0800425d 	.word	0x0800425d
 800423c:	08004265 	.word	0x08004265
 8004240:	0800426d 	.word	0x0800426d
 8004244:	08004283 	.word	0x08004283
 8004248:	08004273 	.word	0x08004273
 800424c:	08004283 	.word	0x08004283
 8004250:	08004283 	.word	0x08004283
 8004254:	08004283 	.word	0x08004283
 8004258:	0800427b 	.word	0x0800427b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800425c:	f7fe fb64 	bl	8002928 <HAL_RCC_GetPCLK1Freq>
 8004260:	61b8      	str	r0, [r7, #24]
        break;
 8004262:	e013      	b.n	800428c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004264:	f7fe fb82 	bl	800296c <HAL_RCC_GetPCLK2Freq>
 8004268:	61b8      	str	r0, [r7, #24]
        break;
 800426a:	e00f      	b.n	800428c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800426c:	4b1b      	ldr	r3, [pc, #108]	; (80042dc <UART_SetConfig+0x3a4>)
 800426e:	61bb      	str	r3, [r7, #24]
        break;
 8004270:	e00c      	b.n	800428c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004272:	f7fe faf9 	bl	8002868 <HAL_RCC_GetSysClockFreq>
 8004276:	61b8      	str	r0, [r7, #24]
        break;
 8004278:	e008      	b.n	800428c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800427a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800427e:	61bb      	str	r3, [r7, #24]
        break;
 8004280:	e004      	b.n	800428c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004282:	2300      	movs	r3, #0
 8004284:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	77bb      	strb	r3, [r7, #30]
        break;
 800428a:	bf00      	nop
    }

    if (pclk != 0U)
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d018      	beq.n	80042c4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	085a      	lsrs	r2, r3, #1
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	441a      	add	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	2b0f      	cmp	r3, #15
 80042aa:	d909      	bls.n	80042c0 <UART_SetConfig+0x388>
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042b2:	d205      	bcs.n	80042c0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	60da      	str	r2, [r3, #12]
 80042be:	e001      	b.n	80042c4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80042d0:	7fbb      	ldrb	r3, [r7, #30]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3720      	adds	r7, #32
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	007a1200 	.word	0x007a1200

080042e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	f003 0308 	and.w	r3, r3, #8
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00a      	beq.n	800430a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	430a      	orrs	r2, r1
 8004308:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00a      	beq.n	800432c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	430a      	orrs	r2, r1
 800432a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00a      	beq.n	800434e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	430a      	orrs	r2, r1
 800434c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	f003 0304 	and.w	r3, r3, #4
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00a      	beq.n	8004370 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	430a      	orrs	r2, r1
 800436e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004374:	f003 0310 	and.w	r3, r3, #16
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00a      	beq.n	8004392 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	430a      	orrs	r2, r1
 8004390:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004396:	f003 0320 	and.w	r3, r3, #32
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00a      	beq.n	80043b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	430a      	orrs	r2, r1
 80043b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d01a      	beq.n	80043f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	430a      	orrs	r2, r1
 80043d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043de:	d10a      	bne.n	80043f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00a      	beq.n	8004418 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	430a      	orrs	r2, r1
 8004416:	605a      	str	r2, [r3, #4]
  }
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b098      	sub	sp, #96	; 0x60
 8004428:	af02      	add	r7, sp, #8
 800442a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004434:	f7fc fb28 	bl	8000a88 <HAL_GetTick>
 8004438:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0308 	and.w	r3, r3, #8
 8004444:	2b08      	cmp	r3, #8
 8004446:	d12e      	bne.n	80044a6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004448:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800444c:	9300      	str	r3, [sp, #0]
 800444e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004450:	2200      	movs	r2, #0
 8004452:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f88c 	bl	8004574 <UART_WaitOnFlagUntilTimeout>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d021      	beq.n	80044a6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800446a:	e853 3f00 	ldrex	r3, [r3]
 800446e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004472:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004476:	653b      	str	r3, [r7, #80]	; 0x50
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	461a      	mov	r2, r3
 800447e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004480:	647b      	str	r3, [r7, #68]	; 0x44
 8004482:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004484:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004486:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004488:	e841 2300 	strex	r3, r2, [r1]
 800448c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800448e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1e6      	bne.n	8004462 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2220      	movs	r2, #32
 8004498:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e062      	b.n	800456c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0304 	and.w	r3, r3, #4
 80044b0:	2b04      	cmp	r3, #4
 80044b2:	d149      	bne.n	8004548 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044bc:	2200      	movs	r2, #0
 80044be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f856 	bl	8004574 <UART_WaitOnFlagUntilTimeout>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d03c      	beq.n	8004548 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d6:	e853 3f00 	ldrex	r3, [r3]
 80044da:	623b      	str	r3, [r7, #32]
   return(result);
 80044dc:	6a3b      	ldr	r3, [r7, #32]
 80044de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	461a      	mov	r2, r3
 80044ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ec:	633b      	str	r3, [r7, #48]	; 0x30
 80044ee:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044f4:	e841 2300 	strex	r3, r2, [r1]
 80044f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1e6      	bne.n	80044ce <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	3308      	adds	r3, #8
 8004506:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	e853 3f00 	ldrex	r3, [r3]
 800450e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f023 0301 	bic.w	r3, r3, #1
 8004516:	64bb      	str	r3, [r7, #72]	; 0x48
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	3308      	adds	r3, #8
 800451e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004520:	61fa      	str	r2, [r7, #28]
 8004522:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004524:	69b9      	ldr	r1, [r7, #24]
 8004526:	69fa      	ldr	r2, [r7, #28]
 8004528:	e841 2300 	strex	r3, r2, [r1]
 800452c:	617b      	str	r3, [r7, #20]
   return(result);
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1e5      	bne.n	8004500 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2220      	movs	r2, #32
 8004538:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e011      	b.n	800456c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2220      	movs	r2, #32
 800454c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2220      	movs	r2, #32
 8004552:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3758      	adds	r7, #88	; 0x58
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	603b      	str	r3, [r7, #0]
 8004580:	4613      	mov	r3, r2
 8004582:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004584:	e04f      	b.n	8004626 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800458c:	d04b      	beq.n	8004626 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800458e:	f7fc fa7b 	bl	8000a88 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	429a      	cmp	r2, r3
 800459c:	d302      	bcc.n	80045a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d101      	bne.n	80045a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e04e      	b.n	8004646 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0304 	and.w	r3, r3, #4
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d037      	beq.n	8004626 <UART_WaitOnFlagUntilTimeout+0xb2>
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	2b80      	cmp	r3, #128	; 0x80
 80045ba:	d034      	beq.n	8004626 <UART_WaitOnFlagUntilTimeout+0xb2>
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	2b40      	cmp	r3, #64	; 0x40
 80045c0:	d031      	beq.n	8004626 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	69db      	ldr	r3, [r3, #28]
 80045c8:	f003 0308 	and.w	r3, r3, #8
 80045cc:	2b08      	cmp	r3, #8
 80045ce:	d110      	bne.n	80045f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2208      	movs	r2, #8
 80045d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f000 f8ff 	bl	80047dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2208      	movs	r2, #8
 80045e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e029      	b.n	8004646 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	69db      	ldr	r3, [r3, #28]
 80045f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004600:	d111      	bne.n	8004626 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800460a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f000 f8e5 	bl	80047dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2220      	movs	r2, #32
 8004616:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e00f      	b.n	8004646 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	69da      	ldr	r2, [r3, #28]
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	4013      	ands	r3, r2
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	429a      	cmp	r2, r3
 8004634:	bf0c      	ite	eq
 8004636:	2301      	moveq	r3, #1
 8004638:	2300      	movne	r3, #0
 800463a:	b2db      	uxtb	r3, r3
 800463c:	461a      	mov	r2, r3
 800463e:	79fb      	ldrb	r3, [r7, #7]
 8004640:	429a      	cmp	r2, r3
 8004642:	d0a0      	beq.n	8004586 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
	...

08004650 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b096      	sub	sp, #88	; 0x58
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	4613      	mov	r3, r2
 800465c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	88fa      	ldrh	r2, [r7, #6]
 8004668:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2222      	movs	r2, #34	; 0x22
 8004678:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004680:	2b00      	cmp	r3, #0
 8004682:	d028      	beq.n	80046d6 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004688:	4a3e      	ldr	r2, [pc, #248]	; (8004784 <UART_Start_Receive_DMA+0x134>)
 800468a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004690:	4a3d      	ldr	r2, [pc, #244]	; (8004788 <UART_Start_Receive_DMA+0x138>)
 8004692:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004698:	4a3c      	ldr	r2, [pc, #240]	; (800478c <UART_Start_Receive_DMA+0x13c>)
 800469a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046a0:	2200      	movs	r2, #0
 80046a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	3324      	adds	r3, #36	; 0x24
 80046ae:	4619      	mov	r1, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b4:	461a      	mov	r2, r3
 80046b6:	88fb      	ldrh	r3, [r7, #6]
 80046b8:	f7fc fb4a 	bl	8000d50 <HAL_DMA_Start_IT>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d009      	beq.n	80046d6 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2210      	movs	r2, #16
 80046c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2220      	movs	r2, #32
 80046ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e051      	b.n	800477a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d018      	beq.n	8004710 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046e6:	e853 3f00 	ldrex	r3, [r3]
 80046ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046f2:	657b      	str	r3, [r7, #84]	; 0x54
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	461a      	mov	r2, r3
 80046fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80046fe:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004700:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004702:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004704:	e841 2300 	strex	r3, r2, [r1]
 8004708:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800470a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1e6      	bne.n	80046de <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	3308      	adds	r3, #8
 8004716:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471a:	e853 3f00 	ldrex	r3, [r3]
 800471e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004722:	f043 0301 	orr.w	r3, r3, #1
 8004726:	653b      	str	r3, [r7, #80]	; 0x50
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	3308      	adds	r3, #8
 800472e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004730:	637a      	str	r2, [r7, #52]	; 0x34
 8004732:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004734:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004736:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004738:	e841 2300 	strex	r3, r2, [r1]
 800473c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800473e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1e5      	bne.n	8004710 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	3308      	adds	r3, #8
 800474a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	e853 3f00 	ldrex	r3, [r3]
 8004752:	613b      	str	r3, [r7, #16]
   return(result);
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800475a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	3308      	adds	r3, #8
 8004762:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004764:	623a      	str	r2, [r7, #32]
 8004766:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004768:	69f9      	ldr	r1, [r7, #28]
 800476a:	6a3a      	ldr	r2, [r7, #32]
 800476c:	e841 2300 	strex	r3, r2, [r1]
 8004770:	61bb      	str	r3, [r7, #24]
   return(result);
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1e5      	bne.n	8004744 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3758      	adds	r7, #88	; 0x58
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	08004955 	.word	0x08004955
 8004788:	08004a7b 	.word	0x08004a7b
 800478c:	08004ab9 	.word	0x08004ab9

08004790 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004790:	b480      	push	{r7}
 8004792:	b089      	sub	sp, #36	; 0x24
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	e853 3f00 	ldrex	r3, [r3]
 80047a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80047ac:	61fb      	str	r3, [r7, #28]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	461a      	mov	r2, r3
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	61bb      	str	r3, [r7, #24]
 80047b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ba:	6979      	ldr	r1, [r7, #20]
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	e841 2300 	strex	r3, r2, [r1]
 80047c2:	613b      	str	r3, [r7, #16]
   return(result);
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1e6      	bne.n	8004798 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2220      	movs	r2, #32
 80047ce:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80047d0:	bf00      	nop
 80047d2:	3724      	adds	r7, #36	; 0x24
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047dc:	b480      	push	{r7}
 80047de:	b095      	sub	sp, #84	; 0x54
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ec:	e853 3f00 	ldrex	r3, [r3]
 80047f0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80047f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	461a      	mov	r2, r3
 8004800:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004802:	643b      	str	r3, [r7, #64]	; 0x40
 8004804:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004806:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004808:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800480a:	e841 2300 	strex	r3, r2, [r1]
 800480e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1e6      	bne.n	80047e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	3308      	adds	r3, #8
 800481c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481e:	6a3b      	ldr	r3, [r7, #32]
 8004820:	e853 3f00 	ldrex	r3, [r3]
 8004824:	61fb      	str	r3, [r7, #28]
   return(result);
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	f023 0301 	bic.w	r3, r3, #1
 800482c:	64bb      	str	r3, [r7, #72]	; 0x48
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	3308      	adds	r3, #8
 8004834:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004836:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004838:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800483c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800483e:	e841 2300 	strex	r3, r2, [r1]
 8004842:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1e5      	bne.n	8004816 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800484e:	2b01      	cmp	r3, #1
 8004850:	d118      	bne.n	8004884 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	e853 3f00 	ldrex	r3, [r3]
 800485e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	f023 0310 	bic.w	r3, r3, #16
 8004866:	647b      	str	r3, [r7, #68]	; 0x44
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	461a      	mov	r2, r3
 800486e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004870:	61bb      	str	r3, [r7, #24]
 8004872:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004874:	6979      	ldr	r1, [r7, #20]
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	e841 2300 	strex	r3, r2, [r1]
 800487c:	613b      	str	r3, [r7, #16]
   return(result);
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1e6      	bne.n	8004852 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2220      	movs	r2, #32
 8004888:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004898:	bf00      	nop
 800489a:	3754      	adds	r7, #84	; 0x54
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b090      	sub	sp, #64	; 0x40
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	2b20      	cmp	r3, #32
 80048b8:	d037      	beq.n	800492a <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 80048ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048bc:	2200      	movs	r2, #0
 80048be:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80048c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	3308      	adds	r3, #8
 80048c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	e853 3f00 	ldrex	r3, [r3]
 80048d0:	623b      	str	r3, [r7, #32]
   return(result);
 80048d2:	6a3b      	ldr	r3, [r7, #32]
 80048d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80048da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	3308      	adds	r3, #8
 80048e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048e2:	633a      	str	r2, [r7, #48]	; 0x30
 80048e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048ea:	e841 2300 	strex	r3, r2, [r1]
 80048ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1e5      	bne.n	80048c2 <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80048f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	e853 3f00 	ldrex	r3, [r3]
 8004902:	60fb      	str	r3, [r7, #12]
   return(result);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800490a:	637b      	str	r3, [r7, #52]	; 0x34
 800490c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	461a      	mov	r2, r3
 8004912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004914:	61fb      	str	r3, [r7, #28]
 8004916:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004918:	69b9      	ldr	r1, [r7, #24]
 800491a:	69fa      	ldr	r2, [r7, #28]
 800491c:	e841 2300 	strex	r3, r2, [r1]
 8004920:	617b      	str	r3, [r7, #20]
   return(result);
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1e6      	bne.n	80048f6 <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004928:	e002      	b.n	8004930 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 800492a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800492c:	f000 fed6 	bl	80056dc <HAL_UART_TxCpltCallback>
}
 8004930:	bf00      	nop
 8004932:	3740      	adds	r7, #64	; 0x40
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004944:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f7ff fad8 	bl	8003efc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800494c:	bf00      	nop
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b09c      	sub	sp, #112	; 0x70
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004960:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	2b20      	cmp	r3, #32
 8004968:	d071      	beq.n	8004a4e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800496a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800496c:	2200      	movs	r2, #0
 800496e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800497a:	e853 3f00 	ldrex	r3, [r3]
 800497e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004980:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004982:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004986:	66bb      	str	r3, [r7, #104]	; 0x68
 8004988:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	461a      	mov	r2, r3
 800498e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004990:	65bb      	str	r3, [r7, #88]	; 0x58
 8004992:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004994:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004996:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004998:	e841 2300 	strex	r3, r2, [r1]
 800499c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800499e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1e6      	bne.n	8004972 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	3308      	adds	r3, #8
 80049aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ae:	e853 3f00 	ldrex	r3, [r3]
 80049b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049b6:	f023 0301 	bic.w	r3, r3, #1
 80049ba:	667b      	str	r3, [r7, #100]	; 0x64
 80049bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	3308      	adds	r3, #8
 80049c2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80049c4:	647a      	str	r2, [r7, #68]	; 0x44
 80049c6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049cc:	e841 2300 	strex	r3, r2, [r1]
 80049d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1e5      	bne.n	80049a4 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	3308      	adds	r3, #8
 80049de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e2:	e853 3f00 	ldrex	r3, [r3]
 80049e6:	623b      	str	r3, [r7, #32]
   return(result);
 80049e8:	6a3b      	ldr	r3, [r7, #32]
 80049ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049ee:	663b      	str	r3, [r7, #96]	; 0x60
 80049f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	3308      	adds	r3, #8
 80049f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80049f8:	633a      	str	r2, [r7, #48]	; 0x30
 80049fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a00:	e841 2300 	strex	r3, r2, [r1]
 8004a04:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1e5      	bne.n	80049d8 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a0e:	2220      	movs	r2, #32
 8004a10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d118      	bne.n	8004a4e <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	e853 3f00 	ldrex	r3, [r3]
 8004a28:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f023 0310 	bic.w	r3, r3, #16
 8004a30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	461a      	mov	r2, r3
 8004a38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a3a:	61fb      	str	r3, [r7, #28]
 8004a3c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3e:	69b9      	ldr	r1, [r7, #24]
 8004a40:	69fa      	ldr	r2, [r7, #28]
 8004a42:	e841 2300 	strex	r3, r2, [r1]
 8004a46:	617b      	str	r3, [r7, #20]
   return(result);
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1e6      	bne.n	8004a1c <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a50:	2200      	movs	r2, #0
 8004a52:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d107      	bne.n	8004a6c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a5e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004a62:	4619      	mov	r1, r3
 8004a64:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004a66:	f000 fe21 	bl	80056ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004a6a:	e002      	b.n	8004a72 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004a6c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004a6e:	f000 fe01 	bl	8005674 <HAL_UART_RxCpltCallback>
}
 8004a72:	bf00      	nop
 8004a74:	3770      	adds	r7, #112	; 0x70
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b084      	sub	sp, #16
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a86:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d109      	bne.n	8004aaa <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004a9c:	085b      	lsrs	r3, r3, #1
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f000 fe02 	bl	80056ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004aa8:	e002      	b.n	8004ab0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f7ff fa30 	bl	8003f10 <HAL_UART_RxHalfCpltCallback>
}
 8004ab0:	bf00      	nop
 8004ab2:	3710      	adds	r7, #16
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b086      	sub	sp, #24
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004aca:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ade:	2b80      	cmp	r3, #128	; 0x80
 8004ae0:	d109      	bne.n	8004af6 <UART_DMAError+0x3e>
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	2b21      	cmp	r3, #33	; 0x21
 8004ae6:	d106      	bne.n	8004af6 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8004af0:	6978      	ldr	r0, [r7, #20]
 8004af2:	f7ff fe4d 	bl	8004790 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b00:	2b40      	cmp	r3, #64	; 0x40
 8004b02:	d109      	bne.n	8004b18 <UART_DMAError+0x60>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2b22      	cmp	r3, #34	; 0x22
 8004b08:	d106      	bne.n	8004b18 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8004b12:	6978      	ldr	r0, [r7, #20]
 8004b14:	f7ff fe62 	bl	80047dc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b1e:	f043 0210 	orr.w	r2, r3, #16
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b28:	6978      	ldr	r0, [r7, #20]
 8004b2a:	f7ff f9fb 	bl	8003f24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b2e:	bf00      	nop
 8004b30:	3718      	adds	r7, #24
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b084      	sub	sp, #16
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	f7ff f9e5 	bl	8003f24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b5a:	bf00      	nop
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b088      	sub	sp, #32
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	e853 3f00 	ldrex	r3, [r3]
 8004b76:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b7e:	61fb      	str	r3, [r7, #28]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	461a      	mov	r2, r3
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	61bb      	str	r3, [r7, #24]
 8004b8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8c:	6979      	ldr	r1, [r7, #20]
 8004b8e:	69ba      	ldr	r2, [r7, #24]
 8004b90:	e841 2300 	strex	r3, r2, [r1]
 8004b94:	613b      	str	r3, [r7, #16]
   return(result);
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1e6      	bne.n	8004b6a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2220      	movs	r2, #32
 8004ba0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 fd97 	bl	80056dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bae:	bf00      	nop
 8004bb0:	3720      	adds	r7, #32
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b083      	sub	sp, #12
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004bbe:	bf00      	nop
 8004bc0:	370c      	adds	r7, #12
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b08c      	sub	sp, #48	; 0x30
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	60f8      	str	r0, [r7, #12]
 8004bd2:	60b9      	str	r1, [r7, #8]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bde:	2b20      	cmp	r3, #32
 8004be0:	d142      	bne.n	8004c68 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d002      	beq.n	8004bee <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8004be8:	88fb      	ldrh	r3, [r7, #6]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e03b      	b.n	8004c6a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004bfe:	88fb      	ldrh	r3, [r7, #6]
 8004c00:	461a      	mov	r2, r3
 8004c02:	68b9      	ldr	r1, [r7, #8]
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f7ff fd23 	bl	8004650 <UART_Start_Receive_DMA>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004c10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d124      	bne.n	8004c62 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d11d      	bne.n	8004c5c <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2210      	movs	r2, #16
 8004c26:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	e853 3f00 	ldrex	r3, [r3]
 8004c34:	617b      	str	r3, [r7, #20]
   return(result);
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	f043 0310 	orr.w	r3, r3, #16
 8004c3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	461a      	mov	r2, r3
 8004c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c46:	627b      	str	r3, [r7, #36]	; 0x24
 8004c48:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4a:	6a39      	ldr	r1, [r7, #32]
 8004c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c4e:	e841 2300 	strex	r3, r2, [r1]
 8004c52:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1e6      	bne.n	8004c28 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8004c5a:	e002      	b.n	8004c62 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8004c62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004c66:	e000      	b.n	8004c6a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004c68:	2302      	movs	r3, #2
  }
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3730      	adds	r7, #48	; 0x30
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
	...

08004c74 <myAtoUi>:
    {"po", "po - program the OTP data\r\n", programOTPData}
};

static char dbgChoice[10];

uint32_t myAtoUi(const uint8_t *str) {
 8004c74:	b480      	push	{r7}
 8004c76:	b087      	sub	sp, #28
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
    uint32_t i = 0u;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	617b      	str	r3, [r7, #20]
    uint32_t result = 0u;
 8004c80:	2300      	movs	r3, #0
 8004c82:	613b      	str	r3, [r7, #16]

    // Convert characters to integer
    while (str[i] >= '0' && str[i] <= '9') {
 8004c84:	e011      	b.n	8004caa <myAtoUi+0x36>
        int digit = str[i] - '0';
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	3b30      	subs	r3, #48	; 0x30
 8004c90:	60fb      	str	r3, [r7, #12]

        result = result * 10 + digit;
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	4613      	mov	r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	4413      	add	r3, r2
 8004c9a:	005b      	lsls	r3, r3, #1
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	613b      	str	r3, [r7, #16]
        i++;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	617b      	str	r3, [r7, #20]
    while (str[i] >= '0' && str[i] <= '9') {
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	4413      	add	r3, r2
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	2b2f      	cmp	r3, #47	; 0x2f
 8004cb4:	d905      	bls.n	8004cc2 <myAtoUi+0x4e>
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	4413      	add	r3, r2
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	2b39      	cmp	r3, #57	; 0x39
 8004cc0:	d9e1      	bls.n	8004c86 <myAtoUi+0x12>
    }

    if (str[i] != '\0' )
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d005      	beq.n	8004cda <myAtoUi+0x66>
    {
    	fInvalidCommand = 1u;
 8004cce:	4b06      	ldr	r3, [pc, #24]	; (8004ce8 <myAtoUi+0x74>)
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	701a      	strb	r2, [r3, #0]
    	result = 0xFFFFFFFFu;
 8004cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8004cd8:	613b      	str	r3, [r7, #16]
    }

    return result;
 8004cda:	693b      	ldr	r3, [r7, #16]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	371c      	adds	r7, #28
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	200011c2 	.word	0x200011c2

08004cec <setConditionsFor>:

static void setConditionsFor(uint8_t reqAction)
{//Note: make sure ALIGN and PWRDOWN are set to Low
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	71fb      	strb	r3, [r7, #7]
	if ( eProgOTP == reqAction )
 8004cf6:	79fb      	ldrb	r3, [r7, #7]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d10c      	bne.n	8004d16 <setConditionsFor+0x2a>
	{
		HAL_GPIO_WritePin(pPROG_GPIO_Port, pPROG_Pin, GPIO_PIN_SET);
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d02:	480d      	ldr	r0, [pc, #52]	; (8004d38 <setConditionsFor+0x4c>)
 8004d04:	f7fc fbae 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pVPP_GPIO_Port, pVPP_Pin, GPIO_PIN_SET);
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d0e:	480a      	ldr	r0, [pc, #40]	; (8004d38 <setConditionsFor+0x4c>)
 8004d10:	f7fc fba8 	bl	8001464 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(pPROG_GPIO_Port, pPROG_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(pVPP_GPIO_Port, pVPP_Pin, GPIO_PIN_RESET);
	}
}
 8004d14:	e00b      	b.n	8004d2e <setConditionsFor+0x42>
		HAL_GPIO_WritePin(pPROG_GPIO_Port, pPROG_Pin, GPIO_PIN_RESET);
 8004d16:	2200      	movs	r2, #0
 8004d18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d1c:	4806      	ldr	r0, [pc, #24]	; (8004d38 <setConditionsFor+0x4c>)
 8004d1e:	f7fc fba1 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pVPP_GPIO_Port, pVPP_Pin, GPIO_PIN_RESET);
 8004d22:	2200      	movs	r2, #0
 8004d24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d28:	4803      	ldr	r0, [pc, #12]	; (8004d38 <setConditionsFor+0x4c>)
 8004d2a:	f7fc fb9b 	bl	8001464 <HAL_GPIO_WritePin>
}
 8004d2e:	bf00      	nop
 8004d30:	3708      	adds	r7, #8
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	48000c00 	.word	0x48000c00

08004d3c <getEncVal>:

static void getEncVal( void )
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
	uint8_t encResolutionOTPVal = (otpData[read][dat][4+8*2]<<1) + otpData[read][dat][4+9*2]; //bits 9 and 8 contain the resolution configuration
 8004d42:	4b1a      	ldr	r3, [pc, #104]	; (8004dac <getEncVal+0x70>)
 8004d44:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004d48:	005b      	lsls	r3, r3, #1
 8004d4a:	b2da      	uxtb	r2, r3
 8004d4c:	4b17      	ldr	r3, [pc, #92]	; (8004dac <getEncVal+0x70>)
 8004d4e:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8004d52:	4413      	add	r3, r2
 8004d54:	71fb      	strb	r3, [r7, #7]
	setConditionsFor(eReadEncVal);
 8004d56:	2001      	movs	r0, #1
 8004d58:	f7ff ffc8 	bl	8004cec <setConditionsFor>
	ssiMode = read;
 8004d5c:	4b14      	ldr	r3, [pc, #80]	; (8004db0 <getEncVal+0x74>)
 8004d5e:	2200      	movs	r2, #0
 8004d60:	701a      	strb	r2, [r3, #0]

	cOtpClk = &encData[clk][0];
 8004d62:	4b14      	ldr	r3, [pc, #80]	; (8004db4 <getEncVal+0x78>)
 8004d64:	4a14      	ldr	r2, [pc, #80]	; (8004db8 <getEncVal+0x7c>)
 8004d66:	601a      	str	r2, [r3, #0]
	cOtpData = &encData[dat][0];
 8004d68:	4b14      	ldr	r3, [pc, #80]	; (8004dbc <getEncVal+0x80>)
 8004d6a:	4a15      	ldr	r2, [pc, #84]	; (8004dc0 <getEncVal+0x84>)
 8004d6c:	601a      	str	r2, [r3, #0]
	ssiClkEdgesNb = 2u/*first falling edge*/ + encResolution[encResolutionOTPVal]*2u + 1u/*rising edge at the end*/;
 8004d6e:	79fb      	ldrb	r3, [r7, #7]
 8004d70:	4a14      	ldr	r2, [pc, #80]	; (8004dc4 <getEncVal+0x88>)
 8004d72:	5cd3      	ldrb	r3, [r2, r3]
 8004d74:	3301      	adds	r3, #1
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	b2da      	uxtb	r2, r3
 8004d80:	4b11      	ldr	r3, [pc, #68]	; (8004dc8 <getEncVal+0x8c>)
 8004d82:	701a      	strb	r2, [r3, #0]

	fWaitSSITransfer  = 1u;
 8004d84:	4b11      	ldr	r3, [pc, #68]	; (8004dcc <getEncVal+0x90>)
 8004d86:	2201      	movs	r2, #1
 8004d88:	701a      	strb	r2, [r3, #0]
	fParseSSIRxData = 1u;
 8004d8a:	4b11      	ldr	r3, [pc, #68]	; (8004dd0 <getEncVal+0x94>)
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, ssiNCS_Pin, GPIO_PIN_RESET);
 8004d90:	2200      	movs	r2, #0
 8004d92:	2120      	movs	r1, #32
 8004d94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d98:	f7fc fb64 	bl	8001464 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim1);
 8004d9c:	480d      	ldr	r0, [pc, #52]	; (8004dd4 <getEncVal+0x98>)
 8004d9e:	f7fe f87d 	bl	8002e9c <HAL_TIM_Base_Start_IT>

}
 8004da2:	bf00      	nop
 8004da4:	3708      	adds	r7, #8
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	20000094 	.word	0x20000094
 8004db0:	200011b3 	.word	0x200011b3
 8004db4:	200011b4 	.word	0x200011b4
 8004db8:	2000004c 	.word	0x2000004c
 8004dbc:	200011b8 	.word	0x200011b8
 8004dc0:	2000006f 	.word	0x2000006f
 8004dc4:	2000000c 	.word	0x2000000c
 8004dc8:	200011bc 	.word	0x200011bc
 8004dcc:	200011c0 	.word	0x200011c0
 8004dd0:	200011c1 	.word	0x200011c1
 8004dd4:	20000820 	.word	0x20000820

08004dd8 <getOTPVal>:

static void getOTPVal( void )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	af00      	add	r7, sp, #0
	setConditionsFor(eReadEncVal);
 8004ddc:	2001      	movs	r0, #1
 8004dde:	f7ff ff85 	bl	8004cec <setConditionsFor>
	ssiMode = read;
 8004de2:	4b0d      	ldr	r3, [pc, #52]	; (8004e18 <getOTPVal+0x40>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	701a      	strb	r2, [r3, #0]

	cOtpClk = &otpData[read][clk][0];
 8004de8:	4b0c      	ldr	r3, [pc, #48]	; (8004e1c <getOTPVal+0x44>)
 8004dea:	4a0d      	ldr	r2, [pc, #52]	; (8004e20 <getOTPVal+0x48>)
 8004dec:	601a      	str	r2, [r3, #0]
	cOtpData = &otpData[read][dat][0];
 8004dee:	4b0d      	ldr	r3, [pc, #52]	; (8004e24 <getOTPVal+0x4c>)
 8004df0:	4a0d      	ldr	r2, [pc, #52]	; (8004e28 <getOTPVal+0x50>)
 8004df2:	601a      	str	r2, [r3, #0]
	ssiClkEdgesNb = NB_OF_CLK_EDGES;
 8004df4:	4b0d      	ldr	r3, [pc, #52]	; (8004e2c <getOTPVal+0x54>)
 8004df6:	2248      	movs	r2, #72	; 0x48
 8004df8:	701a      	strb	r2, [r3, #0]

	fWaitSSITransfer  = 1u;
 8004dfa:	4b0d      	ldr	r3, [pc, #52]	; (8004e30 <getOTPVal+0x58>)
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, ssiNCS_Pin, GPIO_PIN_RESET);
 8004e00:	2200      	movs	r2, #0
 8004e02:	2120      	movs	r1, #32
 8004e04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e08:	f7fc fb2c 	bl	8001464 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim1);
 8004e0c:	4809      	ldr	r0, [pc, #36]	; (8004e34 <getOTPVal+0x5c>)
 8004e0e:	f7fe f845 	bl	8002e9c <HAL_TIM_Base_Start_IT>
}
 8004e12:	bf00      	nop
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	200011b3 	.word	0x200011b3
 8004e1c:	200011b4 	.word	0x200011b4
 8004e20:	20000094 	.word	0x20000094
 8004e24:	200011b8 	.word	0x200011b8
 8004e28:	200000dc 	.word	0x200000dc
 8004e2c:	200011bc 	.word	0x200011bc
 8004e30:	200011c0 	.word	0x200011c0
 8004e34:	20000820 	.word	0x20000820

08004e38 <setOTPField>:

static void setOTPField( void )
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b086      	sub	sp, #24
 8004e3c:	af00      	add	r7, sp, #0
	uint8_t lIdx = 0u;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	75fb      	strb	r3, [r7, #23]
	uint8_t lBitPosVal = 0u;
 8004e42:	2300      	movs	r3, #0
 8004e44:	75bb      	strb	r3, [r7, #22]
	uint32_t lOTPval = 0u;
 8004e46:	2300      	movs	r3, #0
 8004e48:	613b      	str	r3, [r7, #16]
	uint8_t lOTPvalBits[16] = {0,};
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	603b      	str	r3, [r7, #0]
 8004e4e:	1d3b      	adds	r3, r7, #4
 8004e50:	2200      	movs	r2, #0
 8004e52:	601a      	str	r2, [r3, #0]
 8004e54:	605a      	str	r2, [r3, #4]
 8004e56:	609a      	str	r2, [r3, #8]

	//read bit number (max 2 digits)
	lIdx = 3u;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	75fb      	strb	r3, [r7, #23]
	while ( (lIdx < 7u) && (uartRxBuf[lIdx] != ',') )
 8004e5c:	e00c      	b.n	8004e78 <setOTPField+0x40>
	{
		lBitPosVal = lBitPosVal << 1;
 8004e5e:	7dbb      	ldrb	r3, [r7, #22]
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	75bb      	strb	r3, [r7, #22]
		lBitPosVal += uartRxBuf[2+lIdx];
 8004e64:	7dfb      	ldrb	r3, [r7, #23]
 8004e66:	3302      	adds	r3, #2
 8004e68:	4a2e      	ldr	r2, [pc, #184]	; (8004f24 <setOTPField+0xec>)
 8004e6a:	5cd2      	ldrb	r2, [r2, r3]
 8004e6c:	7dbb      	ldrb	r3, [r7, #22]
 8004e6e:	4413      	add	r3, r2
 8004e70:	75bb      	strb	r3, [r7, #22]
		lIdx++;
 8004e72:	7dfb      	ldrb	r3, [r7, #23]
 8004e74:	3301      	adds	r3, #1
 8004e76:	75fb      	strb	r3, [r7, #23]
	while ( (lIdx < 7u) && (uartRxBuf[lIdx] != ',') )
 8004e78:	7dfb      	ldrb	r3, [r7, #23]
 8004e7a:	2b06      	cmp	r3, #6
 8004e7c:	d804      	bhi.n	8004e88 <setOTPField+0x50>
 8004e7e:	7dfb      	ldrb	r3, [r7, #23]
 8004e80:	4a28      	ldr	r2, [pc, #160]	; (8004f24 <setOTPField+0xec>)
 8004e82:	5cd3      	ldrb	r3, [r2, r3]
 8004e84:	2b2c      	cmp	r3, #44	; 0x2c
 8004e86:	d1ea      	bne.n	8004e5e <setOTPField+0x26>
	}
	if ( lIdx <= 5u )
 8004e88:	7dfb      	ldrb	r3, [r7, #23]
 8004e8a:	2b05      	cmp	r3, #5
 8004e8c:	d846      	bhi.n	8004f1c <setOTPField+0xe4>
	{//bit number was OK (max 2 digits)
		if ( lBitPosVal < 16u )
 8004e8e:	7dbb      	ldrb	r3, [r7, #22]
 8004e90:	2b0f      	cmp	r3, #15
 8004e92:	d840      	bhi.n	8004f16 <setOTPField+0xde>
		{//bit position value is valid
			//convert value from hex string to INT
			lOTPval = myAtoUi(&uartRxBuf[lIdx]);
 8004e94:	7dfb      	ldrb	r3, [r7, #23]
 8004e96:	4a23      	ldr	r2, [pc, #140]	; (8004f24 <setOTPField+0xec>)
 8004e98:	4413      	add	r3, r2
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7ff feea 	bl	8004c74 <myAtoUi>
 8004ea0:	6138      	str	r0, [r7, #16]
			if ( 0u == fInvalidCommand )
 8004ea2:	4b21      	ldr	r3, [pc, #132]	; (8004f28 <setOTPField+0xf0>)
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d138      	bne.n	8004f1c <setOTPField+0xe4>
			{//Conversion successful
				if ( OTPDataRanges[lBitPosVal] >= lOTPval )
 8004eaa:	7dbb      	ldrb	r3, [r7, #22]
 8004eac:	4a1f      	ldr	r2, [pc, #124]	; (8004f2c <setOTPField+0xf4>)
 8004eae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d830      	bhi.n	8004f1c <setOTPField+0xe4>
				{//value is in range
					//update the otpData buffer used for writing
					lIdx = 0u;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	75fb      	strb	r3, [r7, #23]
					while (0u != lOTPval)
 8004ebe:	e010      	b.n	8004ee2 <setOTPField+0xaa>
					{
						lIdx++;
 8004ec0:	7dfb      	ldrb	r3, [r7, #23]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	75fb      	strb	r3, [r7, #23]
						lOTPvalBits[lIdx-1] = lOTPval % 2;
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	b2da      	uxtb	r2, r3
 8004eca:	7dfb      	ldrb	r3, [r7, #23]
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	f002 0201 	and.w	r2, r2, #1
 8004ed2:	b2d2      	uxtb	r2, r2
 8004ed4:	3318      	adds	r3, #24
 8004ed6:	443b      	add	r3, r7
 8004ed8:	f803 2c18 	strb.w	r2, [r3, #-24]
						lOTPval >>= 1;
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	085b      	lsrs	r3, r3, #1
 8004ee0:	613b      	str	r3, [r7, #16]
					while (0u != lOTPval)
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1eb      	bne.n	8004ec0 <setOTPField+0x88>
					}
					while (lIdx--)
 8004ee8:	e00f      	b.n	8004f0a <setOTPField+0xd2>
					{
						otpData[write][dat][4+2*lBitPosVal+lIdx] = lOTPvalBits[lIdx-1];
 8004eea:	7dfb      	ldrb	r3, [r7, #23]
 8004eec:	1e5a      	subs	r2, r3, #1
 8004eee:	7dbb      	ldrb	r3, [r7, #22]
 8004ef0:	3302      	adds	r3, #2
 8004ef2:	0059      	lsls	r1, r3, #1
 8004ef4:	7dfb      	ldrb	r3, [r7, #23]
 8004ef6:	440b      	add	r3, r1
 8004ef8:	3218      	adds	r2, #24
 8004efa:	443a      	add	r2, r7
 8004efc:	f812 1c18 	ldrb.w	r1, [r2, #-24]
 8004f00:	4a0b      	ldr	r2, [pc, #44]	; (8004f30 <setOTPField+0xf8>)
 8004f02:	4413      	add	r3, r2
 8004f04:	460a      	mov	r2, r1
 8004f06:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
					while (lIdx--)
 8004f0a:	7dfb      	ldrb	r3, [r7, #23]
 8004f0c:	1e5a      	subs	r2, r3, #1
 8004f0e:	75fa      	strb	r2, [r7, #23]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1ea      	bne.n	8004eea <setOTPField+0xb2>
		else
		{
			fInvalidCommand = 1u;
		}
	}
}
 8004f14:	e002      	b.n	8004f1c <setOTPField+0xe4>
			fInvalidCommand = 1u;
 8004f16:	4b04      	ldr	r3, [pc, #16]	; (8004f28 <setOTPField+0xf0>)
 8004f18:	2201      	movs	r2, #1
 8004f1a:	701a      	strb	r2, [r3, #0]
}
 8004f1c:	bf00      	nop
 8004f1e:	3718      	adds	r7, #24
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	200009a4 	.word	0x200009a4
 8004f28:	200011c2 	.word	0x200011c2
 8004f2c:	200001b4 	.word	0x200001b4
 8004f30:	20000094 	.word	0x20000094

08004f34 <programOTPData>:

static void programOTPData( void)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	af00      	add	r7, sp, #0
	setConditionsFor(eProgOTP);
 8004f38:	2000      	movs	r0, #0
 8004f3a:	f7ff fed7 	bl	8004cec <setConditionsFor>
	ssiMode = write;
 8004f3e:	4b0f      	ldr	r3, [pc, #60]	; (8004f7c <programOTPData+0x48>)
 8004f40:	2201      	movs	r2, #1
 8004f42:	701a      	strb	r2, [r3, #0]

	cOtpClk = &otpData[write][clk][0];
 8004f44:	4b0e      	ldr	r3, [pc, #56]	; (8004f80 <programOTPData+0x4c>)
 8004f46:	4a0f      	ldr	r2, [pc, #60]	; (8004f84 <programOTPData+0x50>)
 8004f48:	601a      	str	r2, [r3, #0]
	cOtpData = &otpData[write][dat][0];
 8004f4a:	4b0f      	ldr	r3, [pc, #60]	; (8004f88 <programOTPData+0x54>)
 8004f4c:	4a0f      	ldr	r2, [pc, #60]	; (8004f8c <programOTPData+0x58>)
 8004f4e:	601a      	str	r2, [r3, #0]
	ssiClkEdgesNb = NB_OF_CLK_EDGES;
 8004f50:	4b0f      	ldr	r3, [pc, #60]	; (8004f90 <programOTPData+0x5c>)
 8004f52:	2248      	movs	r2, #72	; 0x48
 8004f54:	701a      	strb	r2, [r3, #0]

	fWaitSSITransfer  = 1u;
 8004f56:	4b0f      	ldr	r3, [pc, #60]	; (8004f94 <programOTPData+0x60>)
 8004f58:	2201      	movs	r2, #1
 8004f5a:	701a      	strb	r2, [r3, #0]
	cntWaitOTPWriteStatusFlags = 1000u;
 8004f5c:	4b0e      	ldr	r3, [pc, #56]	; (8004f98 <programOTPData+0x64>)
 8004f5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f62:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, ssiNCS_Pin, GPIO_PIN_RESET);
 8004f64:	2200      	movs	r2, #0
 8004f66:	2120      	movs	r1, #32
 8004f68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f6c:	f7fc fa7a 	bl	8001464 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim1);
 8004f70:	480a      	ldr	r0, [pc, #40]	; (8004f9c <programOTPData+0x68>)
 8004f72:	f7fd ff93 	bl	8002e9c <HAL_TIM_Base_Start_IT>
}
 8004f76:	bf00      	nop
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	200011b3 	.word	0x200011b3
 8004f80:	200011b4 	.word	0x200011b4
 8004f84:	20000124 	.word	0x20000124
 8004f88:	200011b8 	.word	0x200011b8
 8004f8c:	2000016c 	.word	0x2000016c
 8004f90:	200011bc 	.word	0x200011bc
 8004f94:	200011c0 	.word	0x200011c0
 8004f98:	200011cc 	.word	0x200011cc
 8004f9c:	20000820 	.word	0x20000820

08004fa0 <prepareMenu>:

static uint16_t prepareMenu( void ) {
 8004fa0:	b4b0      	push	{r4, r5, r7}
 8004fa2:	b08b      	sub	sp, #44	; 0x2c
 8004fa4:	af00      	add	r7, sp, #0
	uint16_t lIdx = 0u;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t lIdxuMenu = 0u;
 8004faa:	2300      	movs	r3, #0
 8004fac:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t lIdxOtpMenu = 0u;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	847b      	strh	r3, [r7, #34]	; 0x22
	uint8_t lMenuItem = 0u;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint8_t encValDescr[] = "\r\nEncoder value: ";
 8004fb8:	4b9b      	ldr	r3, [pc, #620]	; (8005228 <prepareMenu+0x288>)
 8004fba:	f107 040c 	add.w	r4, r7, #12
 8004fbe:	461d      	mov	r5, r3
 8004fc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004fc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004fc4:	682b      	ldr	r3, [r5, #0]
 8004fc6:	8023      	strh	r3, [r4, #0]
	uint8_t encValTextRev[] = "65535";
 8004fc8:	4a98      	ldr	r2, [pc, #608]	; (800522c <prepareMenu+0x28c>)
 8004fca:	1d3b      	adds	r3, r7, #4
 8004fcc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004fd0:	6018      	str	r0, [r3, #0]
 8004fd2:	3304      	adds	r3, #4
 8004fd4:	8019      	strh	r1, [r3, #0]
	uint16_t lencVal = encVal;
 8004fd6:	4b96      	ldr	r3, [pc, #600]	; (8005230 <prepareMenu+0x290>)
 8004fd8:	881b      	ldrh	r3, [r3, #0]
 8004fda:	83fb      	strh	r3, [r7, #30]

	//copy encoder value
	for (/*lIdx already initialized above*/;lIdxuMenu<(sizeof(encValDescr)-1u); lIdxuMenu++)
 8004fdc:	e00a      	b.n	8004ff4 <prepareMenu+0x54>
	{
		uartMenu[lIdxuMenu] = encValDescr[lIdxuMenu];
 8004fde:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004fe0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004fe2:	3228      	adds	r2, #40	; 0x28
 8004fe4:	443a      	add	r2, r7
 8004fe6:	f812 1c1c 	ldrb.w	r1, [r2, #-28]
 8004fea:	4a92      	ldr	r2, [pc, #584]	; (8005234 <prepareMenu+0x294>)
 8004fec:	54d1      	strb	r1, [r2, r3]
	for (/*lIdx already initialized above*/;lIdxuMenu<(sizeof(encValDescr)-1u); lIdxuMenu++)
 8004fee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004ff4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ff6:	2b10      	cmp	r3, #16
 8004ff8:	d9f1      	bls.n	8004fde <prepareMenu+0x3e>
	}
	//get digits
	encValTextRev[0] = lencVal % 10u;
 8004ffa:	8bfa      	ldrh	r2, [r7, #30]
 8004ffc:	4b8e      	ldr	r3, [pc, #568]	; (8005238 <prepareMenu+0x298>)
 8004ffe:	fba3 1302 	umull	r1, r3, r3, r2
 8005002:	08d9      	lsrs	r1, r3, #3
 8005004:	460b      	mov	r3, r1
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	440b      	add	r3, r1
 800500a:	005b      	lsls	r3, r3, #1
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	b29b      	uxth	r3, r3
 8005010:	b2db      	uxtb	r3, r3
 8005012:	713b      	strb	r3, [r7, #4]
	lIdx = 1u;
 8005014:	2301      	movs	r3, #1
 8005016:	84fb      	strh	r3, [r7, #38]	; 0x26
	while (lencVal != 0u)
 8005018:	e018      	b.n	800504c <prepareMenu+0xac>
	{
		lencVal /= 10u;
 800501a:	8bfb      	ldrh	r3, [r7, #30]
 800501c:	4a86      	ldr	r2, [pc, #536]	; (8005238 <prepareMenu+0x298>)
 800501e:	fba2 2303 	umull	r2, r3, r2, r3
 8005022:	08db      	lsrs	r3, r3, #3
 8005024:	83fb      	strh	r3, [r7, #30]
		encValTextRev[lIdx++] = lencVal % 10u ;
 8005026:	8bfa      	ldrh	r2, [r7, #30]
 8005028:	4b83      	ldr	r3, [pc, #524]	; (8005238 <prepareMenu+0x298>)
 800502a:	fba3 1302 	umull	r1, r3, r3, r2
 800502e:	08d9      	lsrs	r1, r3, #3
 8005030:	460b      	mov	r3, r1
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	440b      	add	r3, r1
 8005036:	005b      	lsls	r3, r3, #1
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	b29a      	uxth	r2, r3
 800503c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800503e:	1c59      	adds	r1, r3, #1
 8005040:	84f9      	strh	r1, [r7, #38]	; 0x26
 8005042:	b2d2      	uxtb	r2, r2
 8005044:	3328      	adds	r3, #40	; 0x28
 8005046:	443b      	add	r3, r7
 8005048:	f803 2c24 	strb.w	r2, [r3, #-36]
	while (lencVal != 0u)
 800504c:	8bfb      	ldrh	r3, [r7, #30]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1e3      	bne.n	800501a <prepareMenu+0x7a>
	}
	//put encoder value digits in the buffer (in correct order from most significant digit to less significant one)
	while ( lIdx > 0u )
 8005052:	e00e      	b.n	8005072 <prepareMenu+0xd2>
	{
		uartMenu[lIdxuMenu++] = encValTextRev[lIdx--];
 8005054:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005056:	1e5a      	subs	r2, r3, #1
 8005058:	84fa      	strh	r2, [r7, #38]	; 0x26
 800505a:	4619      	mov	r1, r3
 800505c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800505e:	1c5a      	adds	r2, r3, #1
 8005060:	84ba      	strh	r2, [r7, #36]	; 0x24
 8005062:	461a      	mov	r2, r3
 8005064:	f101 0328 	add.w	r3, r1, #40	; 0x28
 8005068:	443b      	add	r3, r7
 800506a:	f813 1c24 	ldrb.w	r1, [r3, #-36]
 800506e:	4b71      	ldr	r3, [pc, #452]	; (8005234 <prepareMenu+0x294>)
 8005070:	5499      	strb	r1, [r3, r2]
	while ( lIdx > 0u )
 8005072:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1ed      	bne.n	8005054 <prepareMenu+0xb4>
	}
	uartMenu[lIdxuMenu++] = '\r';
 8005078:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800507a:	1c5a      	adds	r2, r3, #1
 800507c:	84ba      	strh	r2, [r7, #36]	; 0x24
 800507e:	461a      	mov	r2, r3
 8005080:	4b6c      	ldr	r3, [pc, #432]	; (8005234 <prepareMenu+0x294>)
 8005082:	210d      	movs	r1, #13
 8005084:	5499      	strb	r1, [r3, r2]
	uartMenu[lIdxuMenu++] = '\n';
 8005086:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005088:	1c5a      	adds	r2, r3, #1
 800508a:	84ba      	strh	r2, [r7, #36]	; 0x24
 800508c:	461a      	mov	r2, r3
 800508e:	4b69      	ldr	r3, [pc, #420]	; (8005234 <prepareMenu+0x294>)
 8005090:	210a      	movs	r1, #10
 8005092:	5499      	strb	r1, [r3, r2]

	//update actual OTP data according to the received data from device via SSI interface
	for ( lIdx = 0u; lIdx < 32u; lIdx++)
 8005094:	2300      	movs	r3, #0
 8005096:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005098:	e015      	b.n	80050c6 <prepareMenu+0x126>
	{
		menuOTPDescrActualData[lIdxOtpMenu]= '0' + otpData[read][dat][4+lIdx*2];
 800509a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800509c:	3302      	adds	r3, #2
 800509e:	005b      	lsls	r3, r3, #1
 80050a0:	4a66      	ldr	r2, [pc, #408]	; (800523c <prepareMenu+0x29c>)
 80050a2:	4413      	add	r3, r2
 80050a4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80050a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80050aa:	3230      	adds	r2, #48	; 0x30
 80050ac:	b2d1      	uxtb	r1, r2
 80050ae:	4a64      	ldr	r2, [pc, #400]	; (8005240 <prepareMenu+0x2a0>)
 80050b0:	54d1      	strb	r1, [r2, r3]
		lIdxOtpMenu += OTPDataElementsFormating[lIdx];
 80050b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80050b4:	4a63      	ldr	r2, [pc, #396]	; (8005244 <prepareMenu+0x2a4>)
 80050b6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80050ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80050bc:	4413      	add	r3, r2
 80050be:	847b      	strh	r3, [r7, #34]	; 0x22
	for ( lIdx = 0u; lIdx < 32u; lIdx++)
 80050c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80050c2:	3301      	adds	r3, #1
 80050c4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80050c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80050c8:	2b1f      	cmp	r3, #31
 80050ca:	d9e6      	bls.n	800509a <prepareMenu+0xfa>
	}
	lIdxOtpMenu=0u;
 80050cc:	2300      	movs	r3, #0
 80050ce:	847b      	strh	r3, [r7, #34]	; 0x22
	//update desired OTP data according to the received data from device via SSI interface
	for ( lIdx = 0u; lIdx < 32u; lIdx++)
 80050d0:	2300      	movs	r3, #0
 80050d2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80050d4:	e015      	b.n	8005102 <prepareMenu+0x162>
	{
		menuOTPDescrDesiredData[lIdxOtpMenu]= '0' + otpData[write][dat][4+lIdx*2];
 80050d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80050d8:	3302      	adds	r3, #2
 80050da:	005b      	lsls	r3, r3, #1
 80050dc:	4a57      	ldr	r2, [pc, #348]	; (800523c <prepareMenu+0x29c>)
 80050de:	4413      	add	r3, r2
 80050e0:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
 80050e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80050e6:	3230      	adds	r2, #48	; 0x30
 80050e8:	b2d1      	uxtb	r1, r2
 80050ea:	4a57      	ldr	r2, [pc, #348]	; (8005248 <prepareMenu+0x2a8>)
 80050ec:	54d1      	strb	r1, [r2, r3]
		lIdxOtpMenu += OTPDataElementsFormating[lIdx];
 80050ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80050f0:	4a54      	ldr	r2, [pc, #336]	; (8005244 <prepareMenu+0x2a4>)
 80050f2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80050f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80050f8:	4413      	add	r3, r2
 80050fa:	847b      	strh	r3, [r7, #34]	; 0x22
	for ( lIdx = 0u; lIdx < 32u; lIdx++)
 80050fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80050fe:	3301      	adds	r3, #1
 8005100:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005102:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005104:	2b1f      	cmp	r3, #31
 8005106:	d9e6      	bls.n	80050d6 <prepareMenu+0x136>
	}

	//copy OTP description
	for (lIdx = 0u; lIdx < sizeof(menuOTPDescrHeader); lIdx++)
 8005108:	2300      	movs	r3, #0
 800510a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800510c:	e00b      	b.n	8005126 <prepareMenu+0x186>
	{
		uartMenu[lIdxuMenu] = menuOTPDescrHeader[lIdx];
 800510e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005110:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005112:	494e      	ldr	r1, [pc, #312]	; (800524c <prepareMenu+0x2ac>)
 8005114:	5c89      	ldrb	r1, [r1, r2]
 8005116:	4a47      	ldr	r2, [pc, #284]	; (8005234 <prepareMenu+0x294>)
 8005118:	54d1      	strb	r1, [r2, r3]
		lIdxuMenu++;
 800511a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800511c:	3301      	adds	r3, #1
 800511e:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (lIdx = 0u; lIdx < sizeof(menuOTPDescrHeader); lIdx++)
 8005120:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005122:	3301      	adds	r3, #1
 8005124:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005126:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005128:	2b58      	cmp	r3, #88	; 0x58
 800512a:	d9f0      	bls.n	800510e <prepareMenu+0x16e>
	}
	for (lIdx = 0u; lIdx < sizeof(menuOTPDescrActualData); lIdx++)
 800512c:	2300      	movs	r3, #0
 800512e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005130:	e00b      	b.n	800514a <prepareMenu+0x1aa>
	{
		uartMenu[lIdxuMenu] = menuOTPDescrActualData[lIdx];
 8005132:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005134:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005136:	4942      	ldr	r1, [pc, #264]	; (8005240 <prepareMenu+0x2a0>)
 8005138:	5c89      	ldrb	r1, [r1, r2]
 800513a:	4a3e      	ldr	r2, [pc, #248]	; (8005234 <prepareMenu+0x294>)
 800513c:	54d1      	strb	r1, [r2, r3]
		lIdxuMenu++;
 800513e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005140:	3301      	adds	r3, #1
 8005142:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (lIdx = 0u; lIdx < sizeof(menuOTPDescrActualData); lIdx++)
 8005144:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005146:	3301      	adds	r3, #1
 8005148:	84fb      	strh	r3, [r7, #38]	; 0x26
 800514a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800514c:	2b57      	cmp	r3, #87	; 0x57
 800514e:	d9f0      	bls.n	8005132 <prepareMenu+0x192>
	}
	for (lIdx = 0u; lIdx < sizeof(menuOTPDescrDesiredData); lIdx++ )
 8005150:	2300      	movs	r3, #0
 8005152:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005154:	e00b      	b.n	800516e <prepareMenu+0x1ce>
	{
		uartMenu[lIdxuMenu] = menuOTPDescrDesiredData[lIdx];
 8005156:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005158:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800515a:	493b      	ldr	r1, [pc, #236]	; (8005248 <prepareMenu+0x2a8>)
 800515c:	5c89      	ldrb	r1, [r1, r2]
 800515e:	4a35      	ldr	r2, [pc, #212]	; (8005234 <prepareMenu+0x294>)
 8005160:	54d1      	strb	r1, [r2, r3]
		lIdxuMenu++;
 8005162:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005164:	3301      	adds	r3, #1
 8005166:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (lIdx = 0u; lIdx < sizeof(menuOTPDescrDesiredData); lIdx++ )
 8005168:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800516a:	3301      	adds	r3, #1
 800516c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800516e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005170:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 8005174:	d9ef      	bls.n	8005156 <prepareMenu+0x1b6>
	}

	//copy Menu items
    for (/*lMenuItem initialized above*/;lMenuItem<  menuSize; lMenuItem++) {
 8005176:	e01e      	b.n	80051b6 <prepareMenu+0x216>
    	for (lIdx = 0u; lIdx<sizeof(menu[lMenuItem].helpText); lIdx++)
 8005178:	2300      	movs	r3, #0
 800517a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800517c:	e013      	b.n	80051a6 <prepareMenu+0x206>
    	{
    		uartMenu[lIdxuMenu] = menu[lMenuItem].helpText[lIdx];
 800517e:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8005182:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005184:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005186:	4832      	ldr	r0, [pc, #200]	; (8005250 <prepareMenu+0x2b0>)
 8005188:	246c      	movs	r4, #108	; 0x6c
 800518a:	fb04 f101 	mul.w	r1, r4, r1
 800518e:	4401      	add	r1, r0
 8005190:	440a      	add	r2, r1
 8005192:	3202      	adds	r2, #2
 8005194:	7811      	ldrb	r1, [r2, #0]
 8005196:	4a27      	ldr	r2, [pc, #156]	; (8005234 <prepareMenu+0x294>)
 8005198:	54d1      	strb	r1, [r2, r3]
    		lIdxuMenu++;
 800519a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800519c:	3301      	adds	r3, #1
 800519e:	84bb      	strh	r3, [r7, #36]	; 0x24
    	for (lIdx = 0u; lIdx<sizeof(menu[lMenuItem].helpText); lIdx++)
 80051a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80051a2:	3301      	adds	r3, #1
 80051a4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80051a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80051a8:	2b63      	cmp	r3, #99	; 0x63
 80051aa:	d9e8      	bls.n	800517e <prepareMenu+0x1de>
    for (/*lMenuItem initialized above*/;lMenuItem<  menuSize; lMenuItem++) {
 80051ac:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80051b0:	3301      	adds	r3, #1
 80051b2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80051b6:	4b27      	ldr	r3, [pc, #156]	; (8005254 <prepareMenu+0x2b4>)
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80051be:	429a      	cmp	r2, r3
 80051c0:	d3da      	bcc.n	8005178 <prepareMenu+0x1d8>
    	}
    }
    if ( 1u == fInvalidCommand )
 80051c2:	4b25      	ldr	r3, [pc, #148]	; (8005258 <prepareMenu+0x2b8>)
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d115      	bne.n	80051f6 <prepareMenu+0x256>
    {//command NOK
    	fInvalidCommand = 0u;
 80051ca:	4b23      	ldr	r3, [pc, #140]	; (8005258 <prepareMenu+0x2b8>)
 80051cc:	2200      	movs	r2, #0
 80051ce:	701a      	strb	r2, [r3, #0]
    	for (lIdx=0u; lIdx<sizeof(mErrNOk); lIdx++)
 80051d0:	2300      	movs	r3, #0
 80051d2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80051d4:	e00b      	b.n	80051ee <prepareMenu+0x24e>
    	{
    		uartMenu[lIdxuMenu] = mErrNOk[lIdx];
 80051d6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80051d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80051da:	4920      	ldr	r1, [pc, #128]	; (800525c <prepareMenu+0x2bc>)
 80051dc:	5c89      	ldrb	r1, [r1, r2]
 80051de:	4a15      	ldr	r2, [pc, #84]	; (8005234 <prepareMenu+0x294>)
 80051e0:	54d1      	strb	r1, [r2, r3]
    		lIdxuMenu++;
 80051e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80051e4:	3301      	adds	r3, #1
 80051e6:	84bb      	strh	r3, [r7, #36]	; 0x24
    	for (lIdx=0u; lIdx<sizeof(mErrNOk); lIdx++)
 80051e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80051ea:	3301      	adds	r3, #1
 80051ec:	84fb      	strh	r3, [r7, #38]	; 0x26
 80051ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80051f0:	2b11      	cmp	r3, #17
 80051f2:	d9f0      	bls.n	80051d6 <prepareMenu+0x236>
 80051f4:	e015      	b.n	8005222 <prepareMenu+0x282>
    	}
    }
    else if ( 0u == fInvalidCommand)
 80051f6:	4b18      	ldr	r3, [pc, #96]	; (8005258 <prepareMenu+0x2b8>)
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d111      	bne.n	8005222 <prepareMenu+0x282>
    {//command OK
    	for (lIdx=0u; lIdx<sizeof(mErrOk); lIdx++)
 80051fe:	2300      	movs	r3, #0
 8005200:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005202:	e00b      	b.n	800521c <prepareMenu+0x27c>
    	{
    		uartMenu[lIdxuMenu] = mErrOk[lIdx];
 8005204:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005206:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005208:	4915      	ldr	r1, [pc, #84]	; (8005260 <prepareMenu+0x2c0>)
 800520a:	5c89      	ldrb	r1, [r1, r2]
 800520c:	4a09      	ldr	r2, [pc, #36]	; (8005234 <prepareMenu+0x294>)
 800520e:	54d1      	strb	r1, [r2, r3]
    		lIdxuMenu++;
 8005210:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005212:	3301      	adds	r3, #1
 8005214:	84bb      	strh	r3, [r7, #36]	; 0x24
    	for (lIdx=0u; lIdx<sizeof(mErrOk); lIdx++)
 8005216:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005218:	3301      	adds	r3, #1
 800521a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800521c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800521e:	2b1f      	cmp	r3, #31
 8005220:	d9f0      	bls.n	8005204 <prepareMenu+0x264>
    	}
    }else{/*no command was executed - nothing to print*/}

	for (lIdx=0u; lIdx<sizeof(mPrompt); lIdx++)
 8005222:	2300      	movs	r3, #0
 8005224:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005226:	e029      	b.n	800527c <prepareMenu+0x2dc>
 8005228:	08005778 	.word	0x08005778
 800522c:	0800578c 	.word	0x0800578c
 8005230:	200011c4 	.word	0x200011c4
 8005234:	200009b0 	.word	0x200009b0
 8005238:	cccccccd 	.word	0xcccccccd
 800523c:	20000094 	.word	0x20000094
 8005240:	20000290 	.word	0x20000290
 8005244:	200001f4 	.word	0x200001f4
 8005248:	200002e8 	.word	0x200002e8
 800524c:	20000234 	.word	0x20000234
 8005250:	20000654 	.word	0x20000654
 8005254:	200009ae 	.word	0x200009ae
 8005258:	200011c2 	.word	0x200011c2
 800525c:	20000030 	.word	0x20000030
 8005260:	20000010 	.word	0x20000010
	{
		uartMenu[lIdxuMenu] = mPrompt[lIdx];
 8005264:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005266:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005268:	4909      	ldr	r1, [pc, #36]	; (8005290 <prepareMenu+0x2f0>)
 800526a:	5c89      	ldrb	r1, [r1, r2]
 800526c:	4a09      	ldr	r2, [pc, #36]	; (8005294 <prepareMenu+0x2f4>)
 800526e:	54d1      	strb	r1, [r2, r3]
		lIdxuMenu++;
 8005270:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005272:	3301      	adds	r3, #1
 8005274:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (lIdx=0u; lIdx<sizeof(mPrompt); lIdx++)
 8005276:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005278:	3301      	adds	r3, #1
 800527a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800527c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800527e:	2b04      	cmp	r3, #4
 8005280:	d9f0      	bls.n	8005264 <prepareMenu+0x2c4>
	}

	return lIdxuMenu;
 8005282:	8cbb      	ldrh	r3, [r7, #36]	; 0x24

}
 8005284:	4618      	mov	r0, r3
 8005286:	372c      	adds	r7, #44	; 0x2c
 8005288:	46bd      	mov	sp, r7
 800528a:	bcb0      	pop	{r4, r5, r7}
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	20000044 	.word	0x20000044
 8005294:	200009b0 	.word	0x200009b0

08005298 <processChoice>:

static void processChoice(uint8_t choice[]) {
 8005298:	b590      	push	{r4, r7, lr}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
	uint8_t lIdx = 0u;
 80052a0:	2300      	movs	r3, #0
 80052a2:	73fb      	strb	r3, [r7, #15]
	uint8_t lMenuItem = 0u;
 80052a4:	2300      	movs	r3, #0
 80052a6:	73bb      	strb	r3, [r7, #14]
	uint8_t lFound = 0u;
 80052a8:	2300      	movs	r3, #0
 80052aa:	737b      	strb	r3, [r7, #13]

	for (/*lMenuItem initialized above*/; lMenuItem<menuSize; lMenuItem++)
 80052ac:	e031      	b.n	8005312 <processChoice+0x7a>
	{
		lFound = 1u;
 80052ae:	2301      	movs	r3, #1
 80052b0:	737b      	strb	r3, [r7, #13]
		for (lIdx = 0u; lIdx<sizeof(menu[lMenuItem].optionName); lIdx++)
 80052b2:	2300      	movs	r3, #0
 80052b4:	73fb      	strb	r3, [r7, #15]
 80052b6:	e01a      	b.n	80052ee <processChoice+0x56>
		{
			if (choice[lIdx] != menu[lMenuItem].optionName[lIdx])
 80052b8:	7bfb      	ldrb	r3, [r7, #15]
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	4413      	add	r3, r2
 80052be:	781a      	ldrb	r2, [r3, #0]
 80052c0:	7bb9      	ldrb	r1, [r7, #14]
 80052c2:	7bfb      	ldrb	r3, [r7, #15]
 80052c4:	4818      	ldr	r0, [pc, #96]	; (8005328 <processChoice+0x90>)
 80052c6:	246c      	movs	r4, #108	; 0x6c
 80052c8:	fb04 f101 	mul.w	r1, r4, r1
 80052cc:	4401      	add	r1, r0
 80052ce:	440b      	add	r3, r1
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d008      	beq.n	80052e8 <processChoice+0x50>
			{
				dbgChoice[lIdx] = choice[lIdx];
 80052d6:	7bfb      	ldrb	r3, [r7, #15]
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	441a      	add	r2, r3
 80052dc:	7bfb      	ldrb	r3, [r7, #15]
 80052de:	7811      	ldrb	r1, [r2, #0]
 80052e0:	4a12      	ldr	r2, [pc, #72]	; (800532c <processChoice+0x94>)
 80052e2:	54d1      	strb	r1, [r2, r3]
				lFound = 0u;
 80052e4:	2300      	movs	r3, #0
 80052e6:	737b      	strb	r3, [r7, #13]
		for (lIdx = 0u; lIdx<sizeof(menu[lMenuItem].optionName); lIdx++)
 80052e8:	7bfb      	ldrb	r3, [r7, #15]
 80052ea:	3301      	adds	r3, #1
 80052ec:	73fb      	strb	r3, [r7, #15]
 80052ee:	7bfb      	ldrb	r3, [r7, #15]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d9e1      	bls.n	80052b8 <processChoice+0x20>
			}
		}

		if ( 0u != lFound )
 80052f4:	7b7b      	ldrb	r3, [r7, #13]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d008      	beq.n	800530c <processChoice+0x74>
		{
			menu[lMenuItem].action();
 80052fa:	7bbb      	ldrb	r3, [r7, #14]
 80052fc:	4a0a      	ldr	r2, [pc, #40]	; (8005328 <processChoice+0x90>)
 80052fe:	216c      	movs	r1, #108	; 0x6c
 8005300:	fb01 f303 	mul.w	r3, r1, r3
 8005304:	4413      	add	r3, r2
 8005306:	3368      	adds	r3, #104	; 0x68
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4798      	blx	r3
	for (/*lMenuItem initialized above*/; lMenuItem<menuSize; lMenuItem++)
 800530c:	7bbb      	ldrb	r3, [r7, #14]
 800530e:	3301      	adds	r3, #1
 8005310:	73bb      	strb	r3, [r7, #14]
 8005312:	4b07      	ldr	r3, [pc, #28]	; (8005330 <processChoice+0x98>)
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	7bba      	ldrb	r2, [r7, #14]
 8005318:	429a      	cmp	r2, r3
 800531a:	d3c8      	bcc.n	80052ae <processChoice+0x16>
		}
	}
}
 800531c:	bf00      	nop
 800531e:	bf00      	nop
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	bd90      	pop	{r4, r7, pc}
 8005326:	bf00      	nop
 8005328:	20000654 	.word	0x20000654
 800532c:	200011d0 	.word	0x200011d0
 8005330:	200009ae 	.word	0x200009ae

08005334 <processSSIRxData>:

static void processSSIRxData( void )
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
	uint8_t lIdx = 0u;
 800533a:	2300      	movs	r3, #0
 800533c:	71fb      	strb	r3, [r7, #7]
	uint8_t bitNb = 0u;
 800533e:	2300      	movs	r3, #0
 8005340:	71bb      	strb	r3, [r7, #6]
	uint16_t lencVal = 0u;
 8005342:	2300      	movs	r3, #0
 8005344:	80bb      	strh	r3, [r7, #4]

	for (lIdx=0u;lIdx<ssiClkEdgesNb;lIdx+=2u)
 8005346:	2300      	movs	r3, #0
 8005348:	71fb      	strb	r3, [r7, #7]
 800534a:	e014      	b.n	8005376 <processSSIRxData+0x42>
	{
		lencVal |= cOtpData[lIdx]<<bitNb; //cOtpData has only 0's and 1's
 800534c:	4b11      	ldr	r3, [pc, #68]	; (8005394 <processSSIRxData+0x60>)
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	79fb      	ldrb	r3, [r7, #7]
 8005352:	4413      	add	r3, r2
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	461a      	mov	r2, r3
 8005358:	79bb      	ldrb	r3, [r7, #6]
 800535a:	fa02 f303 	lsl.w	r3, r2, r3
 800535e:	b21a      	sxth	r2, r3
 8005360:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005364:	4313      	orrs	r3, r2
 8005366:	b21b      	sxth	r3, r3
 8005368:	80bb      	strh	r3, [r7, #4]
		bitNb++;
 800536a:	79bb      	ldrb	r3, [r7, #6]
 800536c:	3301      	adds	r3, #1
 800536e:	71bb      	strb	r3, [r7, #6]
	for (lIdx=0u;lIdx<ssiClkEdgesNb;lIdx+=2u)
 8005370:	79fb      	ldrb	r3, [r7, #7]
 8005372:	3302      	adds	r3, #2
 8005374:	71fb      	strb	r3, [r7, #7]
 8005376:	4b08      	ldr	r3, [pc, #32]	; (8005398 <processSSIRxData+0x64>)
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	79fa      	ldrb	r2, [r7, #7]
 800537c:	429a      	cmp	r2, r3
 800537e:	d3e5      	bcc.n	800534c <processSSIRxData+0x18>
	}
	encVal = lencVal;
 8005380:	4a06      	ldr	r2, [pc, #24]	; (800539c <processSSIRxData+0x68>)
 8005382:	88bb      	ldrh	r3, [r7, #4]
 8005384:	8013      	strh	r3, [r2, #0]
}
 8005386:	bf00      	nop
 8005388:	370c      	adds	r7, #12
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	200011b8 	.word	0x200011b8
 8005398:	200011bc 	.word	0x200011bc
 800539c:	200011c4 	.word	0x200011c4

080053a0 <uInit>:



void uInit( void )
{
 80053a0:	b480      	push	{r7}
 80053a2:	af00      	add	r7, sp, #0
	menuSize = 4u;
 80053a4:	4b14      	ldr	r3, [pc, #80]	; (80053f8 <uInit+0x58>)
 80053a6:	2204      	movs	r2, #4
 80053a8:	701a      	strb	r2, [r3, #0]
	uState = eInit;
 80053aa:	4b14      	ldr	r3, [pc, #80]	; (80053fc <uInit+0x5c>)
 80053ac:	2200      	movs	r2, #0
 80053ae:	701a      	strb	r2, [r3, #0]

	fWaitSSITransfer = 0u;
 80053b0:	4b13      	ldr	r3, [pc, #76]	; (8005400 <uInit+0x60>)
 80053b2:	2200      	movs	r2, #0
 80053b4:	701a      	strb	r2, [r3, #0]
	fParseSSIRxData = 0u;
 80053b6:	4b13      	ldr	r3, [pc, #76]	; (8005404 <uInit+0x64>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	701a      	strb	r2, [r3, #0]

	ssiMode = read;
 80053bc:	4b12      	ldr	r3, [pc, #72]	; (8005408 <uInit+0x68>)
 80053be:	2200      	movs	r2, #0
 80053c0:	701a      	strb	r2, [r3, #0]
	ssiClkEdgesNb = 2u*32u;
 80053c2:	4b12      	ldr	r3, [pc, #72]	; (800540c <uInit+0x6c>)
 80053c4:	2240      	movs	r2, #64	; 0x40
 80053c6:	701a      	strb	r2, [r3, #0]
	fUARTRx = 0u;
 80053c8:	4b11      	ldr	r3, [pc, #68]	; (8005410 <uInit+0x70>)
 80053ca:	2200      	movs	r2, #0
 80053cc:	701a      	strb	r2, [r3, #0]
	cntWaitOTPWriteStatusFlags = 0u;
 80053ce:	4b11      	ldr	r3, [pc, #68]	; (8005414 <uInit+0x74>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	601a      	str	r2, [r3, #0]

	fInvalidCommand = 0xFFu;
 80053d4:	4b10      	ldr	r3, [pc, #64]	; (8005418 <uInit+0x78>)
 80053d6:	22ff      	movs	r2, #255	; 0xff
 80053d8:	701a      	strb	r2, [r3, #0]

	cOtpClk = &otpData[read][clk][0];
 80053da:	4b10      	ldr	r3, [pc, #64]	; (800541c <uInit+0x7c>)
 80053dc:	4a10      	ldr	r2, [pc, #64]	; (8005420 <uInit+0x80>)
 80053de:	601a      	str	r2, [r3, #0]
	cOtpData = &otpData[read][dat][0];
 80053e0:	4b10      	ldr	r3, [pc, #64]	; (8005424 <uInit+0x84>)
 80053e2:	4a11      	ldr	r2, [pc, #68]	; (8005428 <uInit+0x88>)
 80053e4:	601a      	str	r2, [r3, #0]

	iCnt = 0u;
 80053e6:	4b11      	ldr	r3, [pc, #68]	; (800542c <uInit+0x8c>)
 80053e8:	2200      	movs	r2, #0
 80053ea:	701a      	strb	r2, [r3, #0]
}
 80053ec:	bf00      	nop
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	200009ae 	.word	0x200009ae
 80053fc:	200011b0 	.word	0x200011b0
 8005400:	200011c0 	.word	0x200011c0
 8005404:	200011c1 	.word	0x200011c1
 8005408:	200011b3 	.word	0x200011b3
 800540c:	200011bc 	.word	0x200011bc
 8005410:	200011bd 	.word	0x200011bd
 8005414:	200011cc 	.word	0x200011cc
 8005418:	200011c2 	.word	0x200011c2
 800541c:	200011b4 	.word	0x200011b4
 8005420:	20000094 	.word	0x20000094
 8005424:	200011b8 	.word	0x200011b8
 8005428:	200000dc 	.word	0x200000dc
 800542c:	200009a0 	.word	0x200009a0

08005430 <uTask>:

void uTask( void ) {
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
	uint16_t uartDataSize = 0u;
 8005436:	2300      	movs	r3, #0
 8005438:	80fb      	strh	r3, [r7, #6]

	if ( timUARTRx > 0u )
 800543a:	4b40      	ldr	r3, [pc, #256]	; (800553c <uTask+0x10c>)
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00c      	beq.n	800545c <uTask+0x2c>
	{
		timUARTRx--;
 8005442:	4b3e      	ldr	r3, [pc, #248]	; (800553c <uTask+0x10c>)
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	3b01      	subs	r3, #1
 8005448:	b2da      	uxtb	r2, r3
 800544a:	4b3c      	ldr	r3, [pc, #240]	; (800553c <uTask+0x10c>)
 800544c:	701a      	strb	r2, [r3, #0]
		if ( 0u == timUARTRx )
 800544e:	4b3b      	ldr	r3, [pc, #236]	; (800553c <uTask+0x10c>)
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d102      	bne.n	800545c <uTask+0x2c>
		{//time just expired
			fUARTRx = 1u;
 8005456:	4b3a      	ldr	r3, [pc, #232]	; (8005540 <uTask+0x110>)
 8005458:	2201      	movs	r2, #1
 800545a:	701a      	strb	r2, [r3, #0]
		}
	}

	switch (uState)
 800545c:	4b39      	ldr	r3, [pc, #228]	; (8005544 <uTask+0x114>)
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	2b04      	cmp	r3, #4
 8005462:	d85e      	bhi.n	8005522 <uTask+0xf2>
 8005464:	a201      	add	r2, pc, #4	; (adr r2, 800546c <uTask+0x3c>)
 8005466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800546a:	bf00      	nop
 800546c:	08005481 	.word	0x08005481
 8005470:	0800549f 	.word	0x0800549f
 8005474:	080054e7 	.word	0x080054e7
 8005478:	080054cb 	.word	0x080054cb
 800547c:	08005503 	.word	0x08005503
	{
	case eInit:
		if ( iCnt > 200u )
 8005480:	4b31      	ldr	r3, [pc, #196]	; (8005548 <uTask+0x118>)
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	2bc8      	cmp	r3, #200	; 0xc8
 8005486:	d903      	bls.n	8005490 <uTask+0x60>
		{
			uState = eWaitChoiceActions; //in this state the menu will be sent over UART to the PC terminal application
 8005488:	4b2e      	ldr	r3, [pc, #184]	; (8005544 <uTask+0x114>)
 800548a:	2202      	movs	r2, #2
 800548c:	701a      	strb	r2, [r3, #0]
		}
		else iCnt++;

		break;
 800548e:	e051      	b.n	8005534 <uTask+0x104>
		else iCnt++;
 8005490:	4b2d      	ldr	r3, [pc, #180]	; (8005548 <uTask+0x118>)
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	3301      	adds	r3, #1
 8005496:	b2da      	uxtb	r2, r3
 8005498:	4b2b      	ldr	r3, [pc, #172]	; (8005548 <uTask+0x118>)
 800549a:	701a      	strb	r2, [r3, #0]
		break;
 800549c:	e04a      	b.n	8005534 <uTask+0x104>
	case eWaitRx:
		if ( 0u != fUARTRx )
 800549e:	4b28      	ldr	r3, [pc, #160]	; (8005540 <uTask+0x110>)
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d041      	beq.n	800552a <uTask+0xfa>
		{
			fUARTRx = 0u;
 80054a6:	4b26      	ldr	r3, [pc, #152]	; (8005540 <uTask+0x110>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	701a      	strb	r2, [r3, #0]
			processChoice(uartRxBuf);
 80054ac:	4827      	ldr	r0, [pc, #156]	; (800554c <uTask+0x11c>)
 80054ae:	f7ff fef3 	bl	8005298 <processChoice>
			if ( 0u == fWaitSSITransfer )
 80054b2:	4b27      	ldr	r3, [pc, #156]	; (8005550 <uTask+0x120>)
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d103      	bne.n	80054c2 <uTask+0x92>
			{//command does not start SSI transfer
				uState=eWaitChoiceActions;
 80054ba:	4b22      	ldr	r3, [pc, #136]	; (8005544 <uTask+0x114>)
 80054bc:	2202      	movs	r2, #2
 80054be:	701a      	strb	r2, [r3, #0]
			else
			{//SSI transfer started
				uState = eWaitSSITransfer;
			}
		}
		break;
 80054c0:	e033      	b.n	800552a <uTask+0xfa>
				uState = eWaitSSITransfer;
 80054c2:	4b20      	ldr	r3, [pc, #128]	; (8005544 <uTask+0x114>)
 80054c4:	2203      	movs	r2, #3
 80054c6:	701a      	strb	r2, [r3, #0]
		break;
 80054c8:	e02f      	b.n	800552a <uTask+0xfa>
	case eWaitSSITransfer:
		if ( 0u == fWaitSSITransfer )
 80054ca:	4b21      	ldr	r3, [pc, #132]	; (8005550 <uTask+0x120>)
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d12d      	bne.n	800552e <uTask+0xfe>
		{
			if ( 0u != fParseSSIRxData )
 80054d2:	4b20      	ldr	r3, [pc, #128]	; (8005554 <uTask+0x124>)
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d001      	beq.n	80054de <uTask+0xae>
			{
				processSSIRxData();
 80054da:	f7ff ff2b 	bl	8005334 <processSSIRxData>
			}
			uState=eWaitChoiceActions;
 80054de:	4b19      	ldr	r3, [pc, #100]	; (8005544 <uTask+0x114>)
 80054e0:	2202      	movs	r2, #2
 80054e2:	701a      	strb	r2, [r3, #0]
		}//else: wait some more
		break;
 80054e4:	e023      	b.n	800552e <uTask+0xfe>
	case eWaitChoiceActions:

		uartDataSize = prepareMenu();
 80054e6:	f7ff fd5b 	bl	8004fa0 <prepareMenu>
 80054ea:	4603      	mov	r3, r0
 80054ec:	80fb      	strh	r3, [r7, #6]
		HAL_UART_Transmit_DMA(&huart3, uartMenu, uartDataSize);
 80054ee:	88fb      	ldrh	r3, [r7, #6]
 80054f0:	461a      	mov	r2, r3
 80054f2:	4919      	ldr	r1, [pc, #100]	; (8005558 <uTask+0x128>)
 80054f4:	4819      	ldr	r0, [pc, #100]	; (800555c <uTask+0x12c>)
 80054f6:	f7fe f99f 	bl	8003838 <HAL_UART_Transmit_DMA>

		uState=eWaitTxEnd;
 80054fa:	4b12      	ldr	r3, [pc, #72]	; (8005544 <uTask+0x114>)
 80054fc:	2204      	movs	r2, #4
 80054fe:	701a      	strb	r2, [r3, #0]
		break;
 8005500:	e018      	b.n	8005534 <uTask+0x104>
	case eWaitTxEnd:
		if ( 0u != fUARTTx )
 8005502:	4b17      	ldr	r3, [pc, #92]	; (8005560 <uTask+0x130>)
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d013      	beq.n	8005532 <uTask+0x102>
		{
			fUARTTx = 0u;
 800550a:	4b15      	ldr	r3, [pc, #84]	; (8005560 <uTask+0x130>)
 800550c:	2200      	movs	r2, #0
 800550e:	701a      	strb	r2, [r3, #0]

			HAL_UARTEx_ReceiveToIdle_DMA(&huart3, uartRxBuf, sizeof(uartRxBuf));
 8005510:	220a      	movs	r2, #10
 8005512:	490e      	ldr	r1, [pc, #56]	; (800554c <uTask+0x11c>)
 8005514:	4811      	ldr	r0, [pc, #68]	; (800555c <uTask+0x12c>)
 8005516:	f7ff fb58 	bl	8004bca <HAL_UARTEx_ReceiveToIdle_DMA>
			uState=eWaitRx;
 800551a:	4b0a      	ldr	r3, [pc, #40]	; (8005544 <uTask+0x114>)
 800551c:	2201      	movs	r2, #1
 800551e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005520:	e007      	b.n	8005532 <uTask+0x102>
	default:
		uState = eInit;
 8005522:	4b08      	ldr	r3, [pc, #32]	; (8005544 <uTask+0x114>)
 8005524:	2200      	movs	r2, #0
 8005526:	701a      	strb	r2, [r3, #0]
		break;
 8005528:	e004      	b.n	8005534 <uTask+0x104>
		break;
 800552a:	bf00      	nop
 800552c:	e002      	b.n	8005534 <uTask+0x104>
		break;
 800552e:	bf00      	nop
 8005530:	e000      	b.n	8005534 <uTask+0x104>
		break;
 8005532:	bf00      	nop
	}

}
 8005534:	bf00      	nop
 8005536:	3708      	adds	r7, #8
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	200011be 	.word	0x200011be
 8005540:	200011bd 	.word	0x200011bd
 8005544:	200011b0 	.word	0x200011b0
 8005548:	200009a0 	.word	0x200009a0
 800554c:	200009a4 	.word	0x200009a4
 8005550:	200011c0 	.word	0x200011c0
 8005554:	200011c1 	.word	0x200011c1
 8005558:	200009b0 	.word	0x200009b0
 800555c:	2000086c 	.word	0x2000086c
 8005560:	200011bf 	.word	0x200011bf

08005564 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005564:	b590      	push	{r4, r7, lr}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, ssiClk_Pin, cOtpClk[tim1Tick]);
 800556c:	4b36      	ldr	r3, [pc, #216]	; (8005648 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	4b36      	ldr	r3, [pc, #216]	; (800564c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4413      	add	r3, r2
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	461a      	mov	r2, r3
 800557a:	2140      	movs	r1, #64	; 0x40
 800557c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005580:	f7fb ff70 	bl	8001464 <HAL_GPIO_WritePin>
	if (write == ssiMode)
 8005584:	4b32      	ldr	r3, [pc, #200]	; (8005650 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d10c      	bne.n	80055a6 <HAL_TIM_PeriodElapsedCallback+0x42>
	{
		HAL_GPIO_WritePin(GPIOA, ssiDIO_Pin, cOtpData[tim1Tick]);
 800558c:	4b31      	ldr	r3, [pc, #196]	; (8005654 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	4b2e      	ldr	r3, [pc, #184]	; (800564c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4413      	add	r3, r2
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	461a      	mov	r2, r3
 800559a:	2180      	movs	r1, #128	; 0x80
 800559c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80055a0:	f7fb ff60 	bl	8001464 <HAL_GPIO_WritePin>
 80055a4:	e00b      	b.n	80055be <HAL_TIM_PeriodElapsedCallback+0x5a>
	}
	else
	{
		cOtpData[tim1Tick] = HAL_GPIO_ReadPin(GPIOA, ssiDIO_Pin); //read on every edge but later use only the data sampled on falling edge
 80055a6:	4b2b      	ldr	r3, [pc, #172]	; (8005654 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	4b28      	ldr	r3, [pc, #160]	; (800564c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	18d4      	adds	r4, r2, r3
 80055b0:	2180      	movs	r1, #128	; 0x80
 80055b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80055b6:	f7fb ff3d 	bl	8001434 <HAL_GPIO_ReadPin>
 80055ba:	4603      	mov	r3, r0
 80055bc:	7023      	strb	r3, [r4, #0]
	}
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin); //led shows the TX status
 80055be:	2101      	movs	r1, #1
 80055c0:	4825      	ldr	r0, [pc, #148]	; (8005658 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80055c2:	f7fb ff67 	bl	8001494 <HAL_GPIO_TogglePin>

	if (tim1Tick< ssiClkEdgesNb)
 80055c6:	4b25      	ldr	r3, [pc, #148]	; (800565c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	461a      	mov	r2, r3
 80055cc:	4b1f      	ldr	r3, [pc, #124]	; (800564c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d905      	bls.n	80055e0 <HAL_TIM_PeriodElapsedCallback+0x7c>
	{
		tim1Tick++;
 80055d4:	4b1d      	ldr	r3, [pc, #116]	; (800564c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	3301      	adds	r3, #1
 80055da:	4a1c      	ldr	r2, [pc, #112]	; (800564c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80055dc:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOA, ssiNCS_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET); //led shows the TX status finished
			fWaitSSITransfer = 0u;
		}
	}
}
 80055de:	e02e      	b.n	800563e <HAL_TIM_PeriodElapsedCallback+0xda>
		if ( ( write == ssiMode ) && (cntWaitOTPWriteStatusFlags > 0u ) )
 80055e0:	4b1b      	ldr	r3, [pc, #108]	; (8005650 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d115      	bne.n	8005614 <HAL_TIM_PeriodElapsedCallback+0xb0>
 80055e8:	4b1d      	ldr	r3, [pc, #116]	; (8005660 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d011      	beq.n	8005614 <HAL_TIM_PeriodElapsedCallback+0xb0>
			if ( ( 0u == fLedMagHiToggled ) && ( 0u == fLedMagLoToggled ) )
 80055f0:	4b1c      	ldr	r3, [pc, #112]	; (8005664 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d109      	bne.n	800560c <HAL_TIM_PeriodElapsedCallback+0xa8>
 80055f8:	4b1b      	ldr	r3, [pc, #108]	; (8005668 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d105      	bne.n	800560c <HAL_TIM_PeriodElapsedCallback+0xa8>
				cntWaitOTPWriteStatusFlags--;
 8005600:	4b17      	ldr	r3, [pc, #92]	; (8005660 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	3b01      	subs	r3, #1
 8005606:	4a16      	ldr	r2, [pc, #88]	; (8005660 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8005608:	6013      	str	r3, [r2, #0]
			if ( ( 0u == fLedMagHiToggled ) && ( 0u == fLedMagLoToggled ) )
 800560a:	e018      	b.n	800563e <HAL_TIM_PeriodElapsedCallback+0xda>
				cntWaitOTPWriteStatusFlags = 0u;
 800560c:	4b14      	ldr	r3, [pc, #80]	; (8005660 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800560e:	2200      	movs	r2, #0
 8005610:	601a      	str	r2, [r3, #0]
			if ( ( 0u == fLedMagHiToggled ) && ( 0u == fLedMagLoToggled ) )
 8005612:	e014      	b.n	800563e <HAL_TIM_PeriodElapsedCallback+0xda>
			tim1Tick=0u;
 8005614:	4b0d      	ldr	r3, [pc, #52]	; (800564c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8005616:	2200      	movs	r2, #0
 8005618:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim1);
 800561a:	4814      	ldr	r0, [pc, #80]	; (800566c <HAL_TIM_PeriodElapsedCallback+0x108>)
 800561c:	f7fd fcae 	bl	8002f7c <HAL_TIM_Base_Stop_IT>
			HAL_GPIO_WritePin(GPIOA, ssiNCS_Pin, GPIO_PIN_SET);
 8005620:	2201      	movs	r2, #1
 8005622:	2120      	movs	r1, #32
 8005624:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005628:	f7fb ff1c 	bl	8001464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET); //led shows the TX status finished
 800562c:	2200      	movs	r2, #0
 800562e:	2101      	movs	r1, #1
 8005630:	4809      	ldr	r0, [pc, #36]	; (8005658 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8005632:	f7fb ff17 	bl	8001464 <HAL_GPIO_WritePin>
			fWaitSSITransfer = 0u;
 8005636:	4b0e      	ldr	r3, [pc, #56]	; (8005670 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8005638:	2200      	movs	r2, #0
 800563a:	701a      	strb	r2, [r3, #0]
}
 800563c:	e7ff      	b.n	800563e <HAL_TIM_PeriodElapsedCallback+0xda>
 800563e:	bf00      	nop
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	bd90      	pop	{r4, r7, pc}
 8005646:	bf00      	nop
 8005648:	200011b4 	.word	0x200011b4
 800564c:	200011c8 	.word	0x200011c8
 8005650:	200011b3 	.word	0x200011b3
 8005654:	200011b8 	.word	0x200011b8
 8005658:	48000400 	.word	0x48000400
 800565c:	200011bc 	.word	0x200011bc
 8005660:	200011cc 	.word	0x200011cc
 8005664:	200011b1 	.word	0x200011b1
 8005668:	200011b2 	.word	0x200011b2
 800566c:	20000820 	.word	0x20000820
 8005670:	200011c0 	.word	0x200011c0

08005674 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
	if ( USART3 == huart->Instance)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a07      	ldr	r2, [pc, #28]	; (80056a0 <HAL_UART_RxCpltCallback+0x2c>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d105      	bne.n	8005692 <HAL_UART_RxCpltCallback+0x1e>
	{
		fUARTRx = 1u;
 8005686:	4b07      	ldr	r3, [pc, #28]	; (80056a4 <HAL_UART_RxCpltCallback+0x30>)
 8005688:	2201      	movs	r2, #1
 800568a:	701a      	strb	r2, [r3, #0]
		timUARTRx = 0u;
 800568c:	4b06      	ldr	r3, [pc, #24]	; (80056a8 <HAL_UART_RxCpltCallback+0x34>)
 800568e:	2200      	movs	r2, #0
 8005690:	701a      	strb	r2, [r3, #0]
	}
}
 8005692:	bf00      	nop
 8005694:	370c      	adds	r7, #12
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	40004800 	.word	0x40004800
 80056a4:	200011bd 	.word	0x200011bd
 80056a8:	200011be 	.word	0x200011be

080056ac <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) //called when idle event happens after receiving a number of bytes less than SIZEOF(uartRxBuf) (the 3'RD parameter of HAL_UARTEx_ReceiveToIdle_DMA function
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	460b      	mov	r3, r1
 80056b6:	807b      	strh	r3, [r7, #2]
	if ( USART3 == huart->Instance)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a05      	ldr	r2, [pc, #20]	; (80056d4 <HAL_UARTEx_RxEventCallback+0x28>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d102      	bne.n	80056c8 <HAL_UARTEx_RxEventCallback+0x1c>
	{
		timUARTRx = 200u; //wait time until command is completely received
 80056c2:	4b05      	ldr	r3, [pc, #20]	; (80056d8 <HAL_UARTEx_RxEventCallback+0x2c>)
 80056c4:	22c8      	movs	r2, #200	; 0xc8
 80056c6:	701a      	strb	r2, [r3, #0]
	}
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr
 80056d4:	40004800 	.word	0x40004800
 80056d8:	200011be 	.word	0x200011be

080056dc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
	if ( USART3 == huart->Instance)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a05      	ldr	r2, [pc, #20]	; (8005700 <HAL_UART_TxCpltCallback+0x24>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d102      	bne.n	80056f4 <HAL_UART_TxCpltCallback+0x18>
	{
		fUARTTx = 1u;
 80056ee:	4b05      	ldr	r3, [pc, #20]	; (8005704 <HAL_UART_TxCpltCallback+0x28>)
 80056f0:	2201      	movs	r2, #1
 80056f2:	701a      	strb	r2, [r3, #0]
	}
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr
 8005700:	40004800 	.word	0x40004800
 8005704:	200011bf 	.word	0x200011bf

08005708 <__libc_init_array>:
 8005708:	b570      	push	{r4, r5, r6, lr}
 800570a:	4d0d      	ldr	r5, [pc, #52]	; (8005740 <__libc_init_array+0x38>)
 800570c:	4c0d      	ldr	r4, [pc, #52]	; (8005744 <__libc_init_array+0x3c>)
 800570e:	1b64      	subs	r4, r4, r5
 8005710:	10a4      	asrs	r4, r4, #2
 8005712:	2600      	movs	r6, #0
 8005714:	42a6      	cmp	r6, r4
 8005716:	d109      	bne.n	800572c <__libc_init_array+0x24>
 8005718:	4d0b      	ldr	r5, [pc, #44]	; (8005748 <__libc_init_array+0x40>)
 800571a:	4c0c      	ldr	r4, [pc, #48]	; (800574c <__libc_init_array+0x44>)
 800571c:	f000 f820 	bl	8005760 <_init>
 8005720:	1b64      	subs	r4, r4, r5
 8005722:	10a4      	asrs	r4, r4, #2
 8005724:	2600      	movs	r6, #0
 8005726:	42a6      	cmp	r6, r4
 8005728:	d105      	bne.n	8005736 <__libc_init_array+0x2e>
 800572a:	bd70      	pop	{r4, r5, r6, pc}
 800572c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005730:	4798      	blx	r3
 8005732:	3601      	adds	r6, #1
 8005734:	e7ee      	b.n	8005714 <__libc_init_array+0xc>
 8005736:	f855 3b04 	ldr.w	r3, [r5], #4
 800573a:	4798      	blx	r3
 800573c:	3601      	adds	r6, #1
 800573e:	e7f2      	b.n	8005726 <__libc_init_array+0x1e>
 8005740:	080057cc 	.word	0x080057cc
 8005744:	080057cc 	.word	0x080057cc
 8005748:	080057cc 	.word	0x080057cc
 800574c:	080057d0 	.word	0x080057d0

08005750 <memset>:
 8005750:	4402      	add	r2, r0
 8005752:	4603      	mov	r3, r0
 8005754:	4293      	cmp	r3, r2
 8005756:	d100      	bne.n	800575a <memset+0xa>
 8005758:	4770      	bx	lr
 800575a:	f803 1b01 	strb.w	r1, [r3], #1
 800575e:	e7f9      	b.n	8005754 <memset+0x4>

08005760 <_init>:
 8005760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005762:	bf00      	nop
 8005764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005766:	bc08      	pop	{r3}
 8005768:	469e      	mov	lr, r3
 800576a:	4770      	bx	lr

0800576c <_fini>:
 800576c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800576e:	bf00      	nop
 8005770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005772:	bc08      	pop	{r3}
 8005774:	469e      	mov	lr, r3
 8005776:	4770      	bx	lr
