
AEAT6600ConfigAndReadData.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005508  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  0800569c  0800569c  0001569c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057c8  080057c8  00020640  2**0
                  CONTENTS
  4 .ARM          00000000  080057c8  080057c8  00020640  2**0
                  CONTENTS
  5 .preinit_array 00000000  080057c8  080057c8  00020640  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057c8  080057c8  000157c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057cc  080057cc  000157cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000640  20000000  080057d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020640  2**0
                  CONTENTS
 10 .bss          000005c4  20000640  20000640  00020640  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000c04  20000c04  00020640  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020640  2**0
                  CONTENTS, READONLY
 13 .debug_info   000115e2  00000000  00000000  00020670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000222f  00000000  00000000  00031c52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d80  00000000  00000000  00033e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cb8  00000000  00000000  00034c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000202f1  00000000  00000000  000358c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011257  00000000  00000000  00055bb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6f27  00000000  00000000  00066e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012dd2f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003870  00000000  00000000  0012dd80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000640 	.word	0x20000640
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08005684 	.word	0x08005684

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000644 	.word	0x20000644
 80001d0:	08005684 	.word	0x08005684

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
//	GPIO_InitTypeDef GPIO_InitStruct = {0};

//	uint8_t fSetPin2InputMode = 0u;
	oldTick = 0u;
 80001d8:	4b2f      	ldr	r3, [pc, #188]	; (8000298 <main+0xc4>)
 80001da:	2200      	movs	r2, #0
 80001dc:	601a      	str	r2, [r3, #0]
	oldBtn = 10000u;
 80001de:	4b2f      	ldr	r3, [pc, #188]	; (800029c <main+0xc8>)
 80001e0:	f242 7210 	movw	r2, #10000	; 0x2710
 80001e4:	601a      	str	r2, [r3, #0]
	csPinState = GPIO_PIN_SET;
 80001e6:	4b2e      	ldr	r3, [pc, #184]	; (80002a0 <main+0xcc>)
 80001e8:	2201      	movs	r2, #1
 80001ea:	701a      	strb	r2, [r3, #0]
	dataPinState = GPIO_PIN_SET;
 80001ec:	4b2d      	ldr	r3, [pc, #180]	; (80002a4 <main+0xd0>)
 80001ee:	2201      	movs	r2, #1
 80001f0:	701a      	strb	r2, [r3, #0]
	clkPinState = GPIO_PIN_SET;
 80001f2:	4b2d      	ldr	r3, [pc, #180]	; (80002a8 <main+0xd4>)
 80001f4:	2201      	movs	r2, #1
 80001f6:	701a      	strb	r2, [r3, #0]
	cntClkRisingEdge = 0u;
 80001f8:	4b2c      	ldr	r3, [pc, #176]	; (80002ac <main+0xd8>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	601a      	str	r2, [r3, #0]
	btnPressed = 0u;
 80001fe:	4b2c      	ldr	r3, [pc, #176]	; (80002b0 <main+0xdc>)
 8000200:	2200      	movs	r2, #0
 8000202:	701a      	strb	r2, [r3, #0]
	doInputMode = 0u;
 8000204:	4b2b      	ldr	r3, [pc, #172]	; (80002b4 <main+0xe0>)
 8000206:	2200      	movs	r2, #0
 8000208:	701a      	strb	r2, [r3, #0]
	evTim1Tick = 0u;
 800020a:	4b2b      	ldr	r3, [pc, #172]	; (80002b8 <main+0xe4>)
 800020c:	2200      	movs	r2, #0
 800020e:	701a      	strb	r2, [r3, #0]

	pState = 0u;
 8000210:	4b2a      	ldr	r3, [pc, #168]	; (80002bc <main+0xe8>)
 8000212:	2200      	movs	r2, #0
 8000214:	701a      	strb	r2, [r3, #0]
	oldpState = 0u;
 8000216:	4b2a      	ldr	r3, [pc, #168]	; (80002c0 <main+0xec>)
 8000218:	2200      	movs	r2, #0
 800021a:	701a      	strb	r2, [r3, #0]

	cPStateBuf = 0u;
 800021c:	4b29      	ldr	r3, [pc, #164]	; (80002c4 <main+0xf0>)
 800021e:	2200      	movs	r2, #0
 8000220:	701a      	strb	r2, [r3, #0]

	mData[0]=0u;
 8000222:	4b29      	ldr	r3, [pc, #164]	; (80002c8 <main+0xf4>)
 8000224:	2200      	movs	r2, #0
 8000226:	701a      	strb	r2, [r3, #0]
	mData[1]=0u;
 8000228:	4b27      	ldr	r3, [pc, #156]	; (80002c8 <main+0xf4>)
 800022a:	2200      	movs	r2, #0
 800022c:	705a      	strb	r2, [r3, #1]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800022e:	f000 fbe1 	bl	80009f4 <HAL_Init>

  /* USER CODE BEGIN Init */
  uInit();
 8000232:	f005 f88b 	bl	800534c <uInit>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000236:	f000 f84d 	bl	80002d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800023a:	f000 f955 	bl	80004e8 <MX_GPIO_Init>
  MX_DMA_Init();
 800023e:	f000 f92d 	bl	800049c <MX_DMA_Init>
  MX_TIM1_Init();
 8000242:	f000 f8a9 	bl	8000398 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000246:	f000 f8f9 	bl	800043c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, ssiNCS_Pin|ssiClk_Pin|ssiDO_Pin, GPIO_PIN_SET);
 800024a:	2201      	movs	r2, #1
 800024c:	21e0      	movs	r1, #224	; 0xe0
 800024e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000252:	f001 f917 	bl	8001484 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  uint8_t nBtn = GPIO_PIN_RESET;
//	  nBtn = HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin);
	  mSysTick = HAL_GetTick();
 8000256:	f000 fc27 	bl	8000aa8 <HAL_GetTick>
 800025a:	4603      	mov	r3, r0
 800025c:	4a1b      	ldr	r2, [pc, #108]	; (80002cc <main+0xf8>)
 800025e:	6013      	str	r3, [r2, #0]
	  if ( (oldTick!=mSysTick) && (0u == (mSysTick%25)) )
 8000260:	4b0d      	ldr	r3, [pc, #52]	; (8000298 <main+0xc4>)
 8000262:	681a      	ldr	r2, [r3, #0]
 8000264:	4b19      	ldr	r3, [pc, #100]	; (80002cc <main+0xf8>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	429a      	cmp	r2, r3
 800026a:	d0f4      	beq.n	8000256 <main+0x82>
 800026c:	4b17      	ldr	r3, [pc, #92]	; (80002cc <main+0xf8>)
 800026e:	6819      	ldr	r1, [r3, #0]
 8000270:	4b17      	ldr	r3, [pc, #92]	; (80002d0 <main+0xfc>)
 8000272:	fba3 2301 	umull	r2, r3, r3, r1
 8000276:	08da      	lsrs	r2, r3, #3
 8000278:	4613      	mov	r3, r2
 800027a:	009b      	lsls	r3, r3, #2
 800027c:	4413      	add	r3, r2
 800027e:	009a      	lsls	r2, r3, #2
 8000280:	4413      	add	r3, r2
 8000282:	1aca      	subs	r2, r1, r3
 8000284:	2a00      	cmp	r2, #0
 8000286:	d1e6      	bne.n	8000256 <main+0x82>
	  {
//		  mData16 = ((((uint16_t)mData[1]&0x3F)<<8) + mData[0])>>4;
//		  HAL_GPIO_TogglePin(GPIOA, ssiNCS_Pin);
		  uTask();
 8000288:	f005 f8a2 	bl	80053d0 <uTask>
		  oldTick = mSysTick;
 800028c:	4b0f      	ldr	r3, [pc, #60]	; (80002cc <main+0xf8>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a01      	ldr	r2, [pc, #4]	; (8000298 <main+0xc4>)
 8000292:	6013      	str	r3, [r2, #0]
	  mSysTick = HAL_GetTick();
 8000294:	e7df      	b.n	8000256 <main+0x82>
 8000296:	bf00      	nop
 8000298:	200007c4 	.word	0x200007c4
 800029c:	200007c8 	.word	0x200007c8
 80002a0:	200007cc 	.word	0x200007cc
 80002a4:	200007cd 	.word	0x200007cd
 80002a8:	200007ce 	.word	0x200007ce
 80002ac:	200007b8 	.word	0x200007b8
 80002b0:	200007d4 	.word	0x200007d4
 80002b4:	200007d1 	.word	0x200007d1
 80002b8:	200007d2 	.word	0x200007d2
 80002bc:	200007cf 	.word	0x200007cf
 80002c0:	200007d0 	.word	0x200007d0
 80002c4:	200007d3 	.word	0x200007d3
 80002c8:	200007bc 	.word	0x200007bc
 80002cc:	200007c0 	.word	0x200007c0
 80002d0:	51eb851f 	.word	0x51eb851f

080002d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b0a6      	sub	sp, #152	; 0x98
 80002d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002da:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002de:	2228      	movs	r2, #40	; 0x28
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f005 f9c6 	bl	8005674 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002ec:	2200      	movs	r2, #0
 80002ee:	601a      	str	r2, [r3, #0]
 80002f0:	605a      	str	r2, [r3, #4]
 80002f2:	609a      	str	r2, [r3, #8]
 80002f4:	60da      	str	r2, [r3, #12]
 80002f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002f8:	1d3b      	adds	r3, r7, #4
 80002fa:	2258      	movs	r2, #88	; 0x58
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f005 f9b8 	bl	8005674 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000304:	2302      	movs	r3, #2
 8000306:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000308:	2301      	movs	r3, #1
 800030a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800030c:	2310      	movs	r3, #16
 800030e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000312:	2302      	movs	r3, #2
 8000314:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000318:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800031c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000320:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000324:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000328:	2300      	movs	r3, #0
 800032a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000332:	4618      	mov	r0, r3
 8000334:	f001 f8d8 	bl	80014e8 <HAL_RCC_OscConfig>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800033e:	f000 f9db 	bl	80006f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000342:	230f      	movs	r3, #15
 8000344:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000346:	2302      	movs	r3, #2
 8000348:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800034a:	2300      	movs	r3, #0
 800034c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800034e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000352:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000354:	2300      	movs	r3, #0
 8000356:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000358:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800035c:	2102      	movs	r1, #2
 800035e:	4618      	mov	r0, r3
 8000360:	f002 f916 	bl	8002590 <HAL_RCC_ClockConfig>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800036a:	f000 f9c5 	bl	80006f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_TIM1;
 800036e:	f241 0304 	movw	r3, #4100	; 0x1004
 8000372:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000374:	2300      	movs	r3, #0
 8000376:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000378:	2300      	movs	r3, #0
 800037a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800037c:	1d3b      	adds	r3, r7, #4
 800037e:	4618      	mov	r0, r3
 8000380:	f002 fb26 	bl	80029d0 <HAL_RCCEx_PeriphCLKConfig>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800038a:	f000 f9b5 	bl	80006f8 <Error_Handler>
  }
}
 800038e:	bf00      	nop
 8000390:	3798      	adds	r7, #152	; 0x98
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
	...

08000398 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b088      	sub	sp, #32
 800039c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800039e:	f107 0310 	add.w	r3, r7, #16
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	605a      	str	r2, [r3, #4]
 80003a8:	609a      	str	r2, [r3, #8]
 80003aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003ac:	1d3b      	adds	r3, r7, #4
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
 80003b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003b6:	4b1f      	ldr	r3, [pc, #124]	; (8000434 <MX_TIM1_Init+0x9c>)
 80003b8:	4a1f      	ldr	r2, [pc, #124]	; (8000438 <MX_TIM1_Init+0xa0>)
 80003ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80003bc:	4b1d      	ldr	r3, [pc, #116]	; (8000434 <MX_TIM1_Init+0x9c>)
 80003be:	2247      	movs	r2, #71	; 0x47
 80003c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003c2:	4b1c      	ldr	r3, [pc, #112]	; (8000434 <MX_TIM1_Init+0x9c>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5;
 80003c8:	4b1a      	ldr	r3, [pc, #104]	; (8000434 <MX_TIM1_Init+0x9c>)
 80003ca:	2205      	movs	r2, #5
 80003cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ce:	4b19      	ldr	r3, [pc, #100]	; (8000434 <MX_TIM1_Init+0x9c>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003d4:	4b17      	ldr	r3, [pc, #92]	; (8000434 <MX_TIM1_Init+0x9c>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003da:	4b16      	ldr	r3, [pc, #88]	; (8000434 <MX_TIM1_Init+0x9c>)
 80003dc:	2280      	movs	r2, #128	; 0x80
 80003de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003e0:	4814      	ldr	r0, [pc, #80]	; (8000434 <MX_TIM1_Init+0x9c>)
 80003e2:	f002 fd13 	bl	8002e0c <HAL_TIM_Base_Init>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80003ec:	f000 f984 	bl	80006f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003f6:	f107 0310 	add.w	r3, r7, #16
 80003fa:	4619      	mov	r1, r3
 80003fc:	480d      	ldr	r0, [pc, #52]	; (8000434 <MX_TIM1_Init+0x9c>)
 80003fe:	f002 fefe 	bl	80031fe <HAL_TIM_ConfigClockSource>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000408:	f000 f976 	bl	80006f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800040c:	2300      	movs	r3, #0
 800040e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000410:	2300      	movs	r3, #0
 8000412:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000414:	2300      	movs	r3, #0
 8000416:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000418:	1d3b      	adds	r3, r7, #4
 800041a:	4619      	mov	r1, r3
 800041c:	4805      	ldr	r0, [pc, #20]	; (8000434 <MX_TIM1_Init+0x9c>)
 800041e:	f003 f923 	bl	8003668 <HAL_TIMEx_MasterConfigSynchronization>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000428:	f000 f966 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800042c:	bf00      	nop
 800042e:	3720      	adds	r7, #32
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	2000065c 	.word	0x2000065c
 8000438:	40012c00 	.word	0x40012c00

0800043c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000440:	4b14      	ldr	r3, [pc, #80]	; (8000494 <MX_USART3_UART_Init+0x58>)
 8000442:	4a15      	ldr	r2, [pc, #84]	; (8000498 <MX_USART3_UART_Init+0x5c>)
 8000444:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000446:	4b13      	ldr	r3, [pc, #76]	; (8000494 <MX_USART3_UART_Init+0x58>)
 8000448:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800044c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800044e:	4b11      	ldr	r3, [pc, #68]	; (8000494 <MX_USART3_UART_Init+0x58>)
 8000450:	2200      	movs	r2, #0
 8000452:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000454:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <MX_USART3_UART_Init+0x58>)
 8000456:	2200      	movs	r2, #0
 8000458:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800045a:	4b0e      	ldr	r3, [pc, #56]	; (8000494 <MX_USART3_UART_Init+0x58>)
 800045c:	2200      	movs	r2, #0
 800045e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000460:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <MX_USART3_UART_Init+0x58>)
 8000462:	220c      	movs	r2, #12
 8000464:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000466:	4b0b      	ldr	r3, [pc, #44]	; (8000494 <MX_USART3_UART_Init+0x58>)
 8000468:	2200      	movs	r2, #0
 800046a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800046c:	4b09      	ldr	r3, [pc, #36]	; (8000494 <MX_USART3_UART_Init+0x58>)
 800046e:	2200      	movs	r2, #0
 8000470:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000472:	4b08      	ldr	r3, [pc, #32]	; (8000494 <MX_USART3_UART_Init+0x58>)
 8000474:	2200      	movs	r2, #0
 8000476:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000478:	4b06      	ldr	r3, [pc, #24]	; (8000494 <MX_USART3_UART_Init+0x58>)
 800047a:	2200      	movs	r2, #0
 800047c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800047e:	4805      	ldr	r0, [pc, #20]	; (8000494 <MX_USART3_UART_Init+0x58>)
 8000480:	f003 f99c 	bl	80037bc <HAL_UART_Init>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800048a:	f000 f935 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800048e:	bf00      	nop
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	200006a8 	.word	0x200006a8
 8000498:	40004800 	.word	0x40004800

0800049c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004a2:	4b10      	ldr	r3, [pc, #64]	; (80004e4 <MX_DMA_Init+0x48>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	4a0f      	ldr	r2, [pc, #60]	; (80004e4 <MX_DMA_Init+0x48>)
 80004a8:	f043 0301 	orr.w	r3, r3, #1
 80004ac:	6153      	str	r3, [r2, #20]
 80004ae:	4b0d      	ldr	r3, [pc, #52]	; (80004e4 <MX_DMA_Init+0x48>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	f003 0301 	and.w	r3, r3, #1
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80004ba:	2200      	movs	r2, #0
 80004bc:	2100      	movs	r1, #0
 80004be:	200c      	movs	r0, #12
 80004c0:	f000 fbd9 	bl	8000c76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80004c4:	200c      	movs	r0, #12
 80004c6:	f000 fbf2 	bl	8000cae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80004ca:	2200      	movs	r2, #0
 80004cc:	2100      	movs	r1, #0
 80004ce:	200d      	movs	r0, #13
 80004d0:	f000 fbd1 	bl	8000c76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80004d4:	200d      	movs	r0, #13
 80004d6:	f000 fbea 	bl	8000cae <HAL_NVIC_EnableIRQ>

}
 80004da:	bf00      	nop
 80004dc:	3708      	adds	r7, #8
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40021000 	.word	0x40021000

080004e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b08c      	sub	sp, #48	; 0x30
 80004ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ee:	f107 031c 	add.w	r3, r7, #28
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	609a      	str	r2, [r3, #8]
 80004fa:	60da      	str	r2, [r3, #12]
 80004fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fe:	4b79      	ldr	r3, [pc, #484]	; (80006e4 <MX_GPIO_Init+0x1fc>)
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	4a78      	ldr	r2, [pc, #480]	; (80006e4 <MX_GPIO_Init+0x1fc>)
 8000504:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000508:	6153      	str	r3, [r2, #20]
 800050a:	4b76      	ldr	r3, [pc, #472]	; (80006e4 <MX_GPIO_Init+0x1fc>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000512:	61bb      	str	r3, [r7, #24]
 8000514:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000516:	4b73      	ldr	r3, [pc, #460]	; (80006e4 <MX_GPIO_Init+0x1fc>)
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	4a72      	ldr	r2, [pc, #456]	; (80006e4 <MX_GPIO_Init+0x1fc>)
 800051c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000520:	6153      	str	r3, [r2, #20]
 8000522:	4b70      	ldr	r3, [pc, #448]	; (80006e4 <MX_GPIO_Init+0x1fc>)
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800052a:	617b      	str	r3, [r7, #20]
 800052c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052e:	4b6d      	ldr	r3, [pc, #436]	; (80006e4 <MX_GPIO_Init+0x1fc>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	4a6c      	ldr	r2, [pc, #432]	; (80006e4 <MX_GPIO_Init+0x1fc>)
 8000534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000538:	6153      	str	r3, [r2, #20]
 800053a:	4b6a      	ldr	r3, [pc, #424]	; (80006e4 <MX_GPIO_Init+0x1fc>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000542:	613b      	str	r3, [r7, #16]
 8000544:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000546:	4b67      	ldr	r3, [pc, #412]	; (80006e4 <MX_GPIO_Init+0x1fc>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	4a66      	ldr	r2, [pc, #408]	; (80006e4 <MX_GPIO_Init+0x1fc>)
 800054c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000550:	6153      	str	r3, [r2, #20]
 8000552:	4b64      	ldr	r3, [pc, #400]	; (80006e4 <MX_GPIO_Init+0x1fc>)
 8000554:	695b      	ldr	r3, [r3, #20]
 8000556:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800055e:	4b61      	ldr	r3, [pc, #388]	; (80006e4 <MX_GPIO_Init+0x1fc>)
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	4a60      	ldr	r2, [pc, #384]	; (80006e4 <MX_GPIO_Init+0x1fc>)
 8000564:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000568:	6153      	str	r3, [r2, #20]
 800056a:	4b5e      	ldr	r3, [pc, #376]	; (80006e4 <MX_GPIO_Init+0x1fc>)
 800056c:	695b      	ldr	r3, [r3, #20]
 800056e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000576:	4b5b      	ldr	r3, [pc, #364]	; (80006e4 <MX_GPIO_Init+0x1fc>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	4a5a      	ldr	r2, [pc, #360]	; (80006e4 <MX_GPIO_Init+0x1fc>)
 800057c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000580:	6153      	str	r3, [r2, #20]
 8000582:	4b58      	ldr	r3, [pc, #352]	; (80006e4 <MX_GPIO_Init+0x1fc>)
 8000584:	695b      	ldr	r3, [r3, #20]
 8000586:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ssiNCS_Pin|ssiClk_Pin|ssiDO_Pin, GPIO_PIN_RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	21e0      	movs	r1, #224	; 0xe0
 8000592:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000596:	f000 ff75 	bl	8001484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|testPin_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	f245 0181 	movw	r1, #20609	; 0x5081
 80005a0:	4851      	ldr	r0, [pc, #324]	; (80006e8 <MX_GPIO_Init+0x200>)
 80005a2:	f000 ff6f 	bl	8001484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, pVPP_Pin|pPROG_Pin, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80005ac:	484f      	ldr	r0, [pc, #316]	; (80006ec <MX_GPIO_Init+0x204>)
 80005ae:	f000 ff69 	bl	8001484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2140      	movs	r1, #64	; 0x40
 80005b6:	484e      	ldr	r0, [pc, #312]	; (80006f0 <MX_GPIO_Init+0x208>)
 80005b8:	f000 ff64 	bl	8001484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80005bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005c2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c8:	2300      	movs	r3, #0
 80005ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80005cc:	f107 031c 	add.w	r3, r7, #28
 80005d0:	4619      	mov	r1, r3
 80005d2:	4848      	ldr	r0, [pc, #288]	; (80006f4 <MX_GPIO_Init+0x20c>)
 80005d4:	f000 fdb4 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pin : ssiNCS_Pin */
  GPIO_InitStruct.Pin = ssiNCS_Pin;
 80005d8:	2320      	movs	r3, #32
 80005da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005dc:	2301      	movs	r3, #1
 80005de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	2300      	movs	r3, #0
 80005e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80005e4:	2301      	movs	r3, #1
 80005e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ssiNCS_GPIO_Port, &GPIO_InitStruct);
 80005e8:	f107 031c 	add.w	r3, r7, #28
 80005ec:	4619      	mov	r1, r3
 80005ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f2:	f000 fda5 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pin : ssiClk_Pin */
  GPIO_InitStruct.Pin = ssiClk_Pin;
 80005f6:	2340      	movs	r3, #64	; 0x40
 80005f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fa:	2301      	movs	r3, #1
 80005fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	2300      	movs	r3, #0
 8000600:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000602:	2303      	movs	r3, #3
 8000604:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ssiClk_GPIO_Port, &GPIO_InitStruct);
 8000606:	f107 031c 	add.w	r3, r7, #28
 800060a:	4619      	mov	r1, r3
 800060c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000610:	f000 fd96 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pin : ssiDO_Pin */
  GPIO_InitStruct.Pin = ssiDO_Pin;
 8000614:	2380      	movs	r3, #128	; 0x80
 8000616:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000618:	2311      	movs	r3, #17
 800061a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800061c:	2301      	movs	r3, #1
 800061e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000620:	2303      	movs	r3, #3
 8000622:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ssiDO_GPIO_Port, &GPIO_InitStruct);
 8000624:	f107 031c 	add.w	r3, r7, #28
 8000628:	4619      	mov	r1, r3
 800062a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800062e:	f000 fd87 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000632:	f244 0301 	movw	r3, #16385	; 0x4001
 8000636:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000638:	2301      	movs	r3, #1
 800063a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063c:	2300      	movs	r3, #0
 800063e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000640:	2300      	movs	r3, #0
 8000642:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000644:	f107 031c 	add.w	r3, r7, #28
 8000648:	4619      	mov	r1, r3
 800064a:	4827      	ldr	r0, [pc, #156]	; (80006e8 <MX_GPIO_Init+0x200>)
 800064c:	f000 fd78 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pin : testPin_Pin */
  GPIO_InitStruct.Pin = testPin_Pin;
 8000650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000654:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000656:	2301      	movs	r3, #1
 8000658:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065a:	2300      	movs	r3, #0
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800065e:	2303      	movs	r3, #3
 8000660:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(testPin_GPIO_Port, &GPIO_InitStruct);
 8000662:	f107 031c 	add.w	r3, r7, #28
 8000666:	4619      	mov	r1, r3
 8000668:	481f      	ldr	r0, [pc, #124]	; (80006e8 <MX_GPIO_Init+0x200>)
 800066a:	f000 fd69 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pins : pVPP_Pin pPROG_Pin */
  GPIO_InitStruct.Pin = pVPP_Pin|pPROG_Pin;
 800066e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000672:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000674:	2301      	movs	r3, #1
 8000676:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	2300      	movs	r3, #0
 800067a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067c:	2300      	movs	r3, #0
 800067e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000680:	f107 031c 	add.w	r3, r7, #28
 8000684:	4619      	mov	r1, r3
 8000686:	4819      	ldr	r0, [pc, #100]	; (80006ec <MX_GPIO_Init+0x204>)
 8000688:	f000 fd5a 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800068c:	2340      	movs	r3, #64	; 0x40
 800068e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000690:	2301      	movs	r3, #1
 8000692:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000698:	2300      	movs	r3, #0
 800069a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800069c:	f107 031c 	add.w	r3, r7, #28
 80006a0:	4619      	mov	r1, r3
 80006a2:	4813      	ldr	r0, [pc, #76]	; (80006f0 <MX_GPIO_Init+0x208>)
 80006a4:	f000 fd4c 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80006a8:	2380      	movs	r3, #128	; 0x80
 80006aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ac:	2300      	movs	r3, #0
 80006ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006b4:	f107 031c 	add.w	r3, r7, #28
 80006b8:	4619      	mov	r1, r3
 80006ba:	480d      	ldr	r0, [pc, #52]	; (80006f0 <MX_GPIO_Init+0x208>)
 80006bc:	f000 fd40 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006c0:	2380      	movs	r3, #128	; 0x80
 80006c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c4:	2301      	movs	r3, #1
 80006c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80006cc:	2301      	movs	r3, #1
 80006ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006d0:	f107 031c 	add.w	r3, r7, #28
 80006d4:	4619      	mov	r1, r3
 80006d6:	4804      	ldr	r0, [pc, #16]	; (80006e8 <MX_GPIO_Init+0x200>)
 80006d8:	f000 fd32 	bl	8001140 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006dc:	bf00      	nop
 80006de:	3730      	adds	r7, #48	; 0x30
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40021000 	.word	0x40021000
 80006e8:	48000400 	.word	0x48000400
 80006ec:	48000c00 	.word	0x48000c00
 80006f0:	48001800 	.word	0x48001800
 80006f4:	48000800 	.word	0x48000800

080006f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006fc:	b672      	cpsid	i
}
 80006fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000700:	e7fe      	b.n	8000700 <Error_Handler+0x8>
	...

08000704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <HAL_MspInit+0x44>)
 800070c:	699b      	ldr	r3, [r3, #24]
 800070e:	4a0e      	ldr	r2, [pc, #56]	; (8000748 <HAL_MspInit+0x44>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6193      	str	r3, [r2, #24]
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <HAL_MspInit+0x44>)
 8000718:	699b      	ldr	r3, [r3, #24]
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <HAL_MspInit+0x44>)
 8000724:	69db      	ldr	r3, [r3, #28]
 8000726:	4a08      	ldr	r2, [pc, #32]	; (8000748 <HAL_MspInit+0x44>)
 8000728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072c:	61d3      	str	r3, [r2, #28]
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <HAL_MspInit+0x44>)
 8000730:	69db      	ldr	r3, [r3, #28]
 8000732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	40021000 	.word	0x40021000

0800074c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a0d      	ldr	r2, [pc, #52]	; (8000790 <HAL_TIM_Base_MspInit+0x44>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d113      	bne.n	8000786 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800075e:	4b0d      	ldr	r3, [pc, #52]	; (8000794 <HAL_TIM_Base_MspInit+0x48>)
 8000760:	699b      	ldr	r3, [r3, #24]
 8000762:	4a0c      	ldr	r2, [pc, #48]	; (8000794 <HAL_TIM_Base_MspInit+0x48>)
 8000764:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000768:	6193      	str	r3, [r2, #24]
 800076a:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <HAL_TIM_Base_MspInit+0x48>)
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	2100      	movs	r1, #0
 800077a:	2019      	movs	r0, #25
 800077c:	f000 fa7b 	bl	8000c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000780:	2019      	movs	r0, #25
 8000782:	f000 fa94 	bl	8000cae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000786:	bf00      	nop
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40012c00 	.word	0x40012c00
 8000794:	40021000 	.word	0x40021000

08000798 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08a      	sub	sp, #40	; 0x28
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a41      	ldr	r2, [pc, #260]	; (80008bc <HAL_UART_MspInit+0x124>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d17c      	bne.n	80008b4 <HAL_UART_MspInit+0x11c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80007ba:	4b41      	ldr	r3, [pc, #260]	; (80008c0 <HAL_UART_MspInit+0x128>)
 80007bc:	69db      	ldr	r3, [r3, #28]
 80007be:	4a40      	ldr	r2, [pc, #256]	; (80008c0 <HAL_UART_MspInit+0x128>)
 80007c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007c4:	61d3      	str	r3, [r2, #28]
 80007c6:	4b3e      	ldr	r3, [pc, #248]	; (80008c0 <HAL_UART_MspInit+0x128>)
 80007c8:	69db      	ldr	r3, [r3, #28]
 80007ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d2:	4b3b      	ldr	r3, [pc, #236]	; (80008c0 <HAL_UART_MspInit+0x128>)
 80007d4:	695b      	ldr	r3, [r3, #20]
 80007d6:	4a3a      	ldr	r2, [pc, #232]	; (80008c0 <HAL_UART_MspInit+0x128>)
 80007d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80007dc:	6153      	str	r3, [r2, #20]
 80007de:	4b38      	ldr	r3, [pc, #224]	; (80008c0 <HAL_UART_MspInit+0x128>)
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80007ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f0:	2302      	movs	r3, #2
 80007f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007f8:	2303      	movs	r3, #3
 80007fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80007fc:	2307      	movs	r3, #7
 80007fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	4619      	mov	r1, r3
 8000806:	482f      	ldr	r0, [pc, #188]	; (80008c4 <HAL_UART_MspInit+0x12c>)
 8000808:	f000 fc9a 	bl	8001140 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800080c:	4b2e      	ldr	r3, [pc, #184]	; (80008c8 <HAL_UART_MspInit+0x130>)
 800080e:	4a2f      	ldr	r2, [pc, #188]	; (80008cc <HAL_UART_MspInit+0x134>)
 8000810:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000812:	4b2d      	ldr	r3, [pc, #180]	; (80008c8 <HAL_UART_MspInit+0x130>)
 8000814:	2200      	movs	r2, #0
 8000816:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000818:	4b2b      	ldr	r3, [pc, #172]	; (80008c8 <HAL_UART_MspInit+0x130>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800081e:	4b2a      	ldr	r3, [pc, #168]	; (80008c8 <HAL_UART_MspInit+0x130>)
 8000820:	2280      	movs	r2, #128	; 0x80
 8000822:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000824:	4b28      	ldr	r3, [pc, #160]	; (80008c8 <HAL_UART_MspInit+0x130>)
 8000826:	2200      	movs	r2, #0
 8000828:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800082a:	4b27      	ldr	r3, [pc, #156]	; (80008c8 <HAL_UART_MspInit+0x130>)
 800082c:	2200      	movs	r2, #0
 800082e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000830:	4b25      	ldr	r3, [pc, #148]	; (80008c8 <HAL_UART_MspInit+0x130>)
 8000832:	2200      	movs	r2, #0
 8000834:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000836:	4b24      	ldr	r3, [pc, #144]	; (80008c8 <HAL_UART_MspInit+0x130>)
 8000838:	2200      	movs	r2, #0
 800083a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800083c:	4822      	ldr	r0, [pc, #136]	; (80008c8 <HAL_UART_MspInit+0x130>)
 800083e:	f000 fa50 	bl	8000ce2 <HAL_DMA_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8000848:	f7ff ff56 	bl	80006f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	4a1e      	ldr	r2, [pc, #120]	; (80008c8 <HAL_UART_MspInit+0x130>)
 8000850:	675a      	str	r2, [r3, #116]	; 0x74
 8000852:	4a1d      	ldr	r2, [pc, #116]	; (80008c8 <HAL_UART_MspInit+0x130>)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8000858:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <HAL_UART_MspInit+0x138>)
 800085a:	4a1e      	ldr	r2, [pc, #120]	; (80008d4 <HAL_UART_MspInit+0x13c>)
 800085c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800085e:	4b1c      	ldr	r3, [pc, #112]	; (80008d0 <HAL_UART_MspInit+0x138>)
 8000860:	2210      	movs	r2, #16
 8000862:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000864:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <HAL_UART_MspInit+0x138>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800086a:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <HAL_UART_MspInit+0x138>)
 800086c:	2280      	movs	r2, #128	; 0x80
 800086e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000870:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <HAL_UART_MspInit+0x138>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000876:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <HAL_UART_MspInit+0x138>)
 8000878:	2200      	movs	r2, #0
 800087a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800087c:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <HAL_UART_MspInit+0x138>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000882:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <HAL_UART_MspInit+0x138>)
 8000884:	2200      	movs	r2, #0
 8000886:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000888:	4811      	ldr	r0, [pc, #68]	; (80008d0 <HAL_UART_MspInit+0x138>)
 800088a:	f000 fa2a 	bl	8000ce2 <HAL_DMA_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 8000894:	f7ff ff30 	bl	80006f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	4a0d      	ldr	r2, [pc, #52]	; (80008d0 <HAL_UART_MspInit+0x138>)
 800089c:	671a      	str	r2, [r3, #112]	; 0x70
 800089e:	4a0c      	ldr	r2, [pc, #48]	; (80008d0 <HAL_UART_MspInit+0x138>)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80008a4:	2200      	movs	r2, #0
 80008a6:	2100      	movs	r1, #0
 80008a8:	2027      	movs	r0, #39	; 0x27
 80008aa:	f000 f9e4 	bl	8000c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80008ae:	2027      	movs	r0, #39	; 0x27
 80008b0:	f000 f9fd 	bl	8000cae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80008b4:	bf00      	nop
 80008b6:	3728      	adds	r7, #40	; 0x28
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40004800 	.word	0x40004800
 80008c0:	40021000 	.word	0x40021000
 80008c4:	48000c00 	.word	0x48000c00
 80008c8:	20000730 	.word	0x20000730
 80008cc:	40020030 	.word	0x40020030
 80008d0:	20000774 	.word	0x20000774
 80008d4:	4002001c 	.word	0x4002001c

080008d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <NMI_Handler+0x4>

080008de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e2:	e7fe      	b.n	80008e2 <HardFault_Handler+0x4>

080008e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <MemManage_Handler+0x4>

080008ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ee:	e7fe      	b.n	80008ee <BusFault_Handler+0x4>

080008f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <UsageFault_Handler+0x4>

080008f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000924:	f000 f8ac 	bl	8000a80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}

0800092c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000930:	4802      	ldr	r0, [pc, #8]	; (800093c <DMA1_Channel2_IRQHandler+0x10>)
 8000932:	f000 faf8 	bl	8000f26 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000774 	.word	0x20000774

08000940 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000944:	4802      	ldr	r0, [pc, #8]	; (8000950 <DMA1_Channel3_IRQHandler+0x10>)
 8000946:	f000 faee 	bl	8000f26 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000730 	.word	0x20000730

08000954 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000958:	4802      	ldr	r0, [pc, #8]	; (8000964 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800095a:	f002 fb4e 	bl	8002ffa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	2000065c 	.word	0x2000065c

08000968 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800096c:	4802      	ldr	r0, [pc, #8]	; (8000978 <USART3_IRQHandler+0x10>)
 800096e:	f003 f833 	bl	80039d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	200006a8 	.word	0x200006a8

0800097c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <SystemInit+0x20>)
 8000982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000986:	4a05      	ldr	r2, [pc, #20]	; (800099c <SystemInit+0x20>)
 8000988:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800098c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009d8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80009a4:	f7ff ffea 	bl	800097c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009a8:	480c      	ldr	r0, [pc, #48]	; (80009dc <LoopForever+0x6>)
  ldr r1, =_edata
 80009aa:	490d      	ldr	r1, [pc, #52]	; (80009e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009ac:	4a0d      	ldr	r2, [pc, #52]	; (80009e4 <LoopForever+0xe>)
  movs r3, #0
 80009ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b0:	e002      	b.n	80009b8 <LoopCopyDataInit>

080009b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009b6:	3304      	adds	r3, #4

080009b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009bc:	d3f9      	bcc.n	80009b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009be:	4a0a      	ldr	r2, [pc, #40]	; (80009e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009c0:	4c0a      	ldr	r4, [pc, #40]	; (80009ec <LoopForever+0x16>)
  movs r3, #0
 80009c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c4:	e001      	b.n	80009ca <LoopFillZerobss>

080009c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c8:	3204      	adds	r2, #4

080009ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009cc:	d3fb      	bcc.n	80009c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009ce:	f004 fe2d 	bl	800562c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009d2:	f7ff fbff 	bl	80001d4 <main>

080009d6 <LoopForever>:

LoopForever:
    b LoopForever
 80009d6:	e7fe      	b.n	80009d6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009d8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80009dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e0:	20000640 	.word	0x20000640
  ldr r2, =_sidata
 80009e4:	080057d0 	.word	0x080057d0
  ldr r2, =_sbss
 80009e8:	20000640 	.word	0x20000640
  ldr r4, =_ebss
 80009ec:	20000c04 	.word	0x20000c04

080009f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009f0:	e7fe      	b.n	80009f0 <ADC1_2_IRQHandler>
	...

080009f4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f8:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <HAL_Init+0x28>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a07      	ldr	r2, [pc, #28]	; (8000a1c <HAL_Init+0x28>)
 80009fe:	f043 0310 	orr.w	r3, r3, #16
 8000a02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a04:	2003      	movs	r0, #3
 8000a06:	f000 f92b 	bl	8000c60 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	f000 f808 	bl	8000a20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a10:	f7ff fe78 	bl	8000704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40022000 	.word	0x40022000

08000a20 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <HAL_InitTick+0x54>)
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <HAL_InitTick+0x58>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	4619      	mov	r1, r3
 8000a32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 f943 	bl	8000cca <HAL_SYSTICK_Config>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	e00e      	b.n	8000a6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2b0f      	cmp	r3, #15
 8000a52:	d80a      	bhi.n	8000a6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a54:	2200      	movs	r2, #0
 8000a56:	6879      	ldr	r1, [r7, #4]
 8000a58:	f04f 30ff 	mov.w	r0, #4294967295
 8000a5c:	f000 f90b 	bl	8000c76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a60:	4a06      	ldr	r2, [pc, #24]	; (8000a7c <HAL_InitTick+0x5c>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a66:	2300      	movs	r3, #0
 8000a68:	e000      	b.n	8000a6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20000000 	.word	0x20000000
 8000a78:	20000008 	.word	0x20000008
 8000a7c:	20000004 	.word	0x20000004

08000a80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <HAL_IncTick+0x20>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <HAL_IncTick+0x24>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4413      	add	r3, r2
 8000a90:	4a04      	ldr	r2, [pc, #16]	; (8000aa4 <HAL_IncTick+0x24>)
 8000a92:	6013      	str	r3, [r2, #0]
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	20000008 	.word	0x20000008
 8000aa4:	200007d8 	.word	0x200007d8

08000aa8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  return uwTick;  
 8000aac:	4b03      	ldr	r3, [pc, #12]	; (8000abc <HAL_GetTick+0x14>)
 8000aae:	681b      	ldr	r3, [r3, #0]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	200007d8 	.word	0x200007d8

08000ac0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f003 0307 	and.w	r3, r3, #7
 8000ace:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ad6:	68ba      	ldr	r2, [r7, #8]
 8000ad8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000adc:	4013      	ands	r3, r2
 8000ade:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ae8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000af2:	4a04      	ldr	r2, [pc, #16]	; (8000b04 <__NVIC_SetPriorityGrouping+0x44>)
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	60d3      	str	r3, [r2, #12]
}
 8000af8:	bf00      	nop
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b0c:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <__NVIC_GetPriorityGrouping+0x18>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	0a1b      	lsrs	r3, r3, #8
 8000b12:	f003 0307 	and.w	r3, r3, #7
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	db0b      	blt.n	8000b4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	f003 021f 	and.w	r2, r3, #31
 8000b3c:	4907      	ldr	r1, [pc, #28]	; (8000b5c <__NVIC_EnableIRQ+0x38>)
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	095b      	lsrs	r3, r3, #5
 8000b44:	2001      	movs	r0, #1
 8000b46:	fa00 f202 	lsl.w	r2, r0, r2
 8000b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b4e:	bf00      	nop
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000e100 	.word	0xe000e100

08000b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	6039      	str	r1, [r7, #0]
 8000b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	db0a      	blt.n	8000b8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	b2da      	uxtb	r2, r3
 8000b78:	490c      	ldr	r1, [pc, #48]	; (8000bac <__NVIC_SetPriority+0x4c>)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	0112      	lsls	r2, r2, #4
 8000b80:	b2d2      	uxtb	r2, r2
 8000b82:	440b      	add	r3, r1
 8000b84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b88:	e00a      	b.n	8000ba0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	4908      	ldr	r1, [pc, #32]	; (8000bb0 <__NVIC_SetPriority+0x50>)
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	f003 030f 	and.w	r3, r3, #15
 8000b96:	3b04      	subs	r3, #4
 8000b98:	0112      	lsls	r2, r2, #4
 8000b9a:	b2d2      	uxtb	r2, r2
 8000b9c:	440b      	add	r3, r1
 8000b9e:	761a      	strb	r2, [r3, #24]
}
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000e100 	.word	0xe000e100
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b089      	sub	sp, #36	; 0x24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	f1c3 0307 	rsb	r3, r3, #7
 8000bce:	2b04      	cmp	r3, #4
 8000bd0:	bf28      	it	cs
 8000bd2:	2304      	movcs	r3, #4
 8000bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	3304      	adds	r3, #4
 8000bda:	2b06      	cmp	r3, #6
 8000bdc:	d902      	bls.n	8000be4 <NVIC_EncodePriority+0x30>
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	3b03      	subs	r3, #3
 8000be2:	e000      	b.n	8000be6 <NVIC_EncodePriority+0x32>
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bec:	69bb      	ldr	r3, [r7, #24]
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	43da      	mvns	r2, r3
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	401a      	ands	r2, r3
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	fa01 f303 	lsl.w	r3, r1, r3
 8000c06:	43d9      	mvns	r1, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c0c:	4313      	orrs	r3, r2
         );
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3724      	adds	r7, #36	; 0x24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
	...

08000c1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3b01      	subs	r3, #1
 8000c28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c2c:	d301      	bcc.n	8000c32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e00f      	b.n	8000c52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c32:	4a0a      	ldr	r2, [pc, #40]	; (8000c5c <SysTick_Config+0x40>)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c3a:	210f      	movs	r1, #15
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	f7ff ff8e 	bl	8000b60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <SysTick_Config+0x40>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c4a:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <SysTick_Config+0x40>)
 8000c4c:	2207      	movs	r2, #7
 8000c4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	e000e010 	.word	0xe000e010

08000c60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f7ff ff29 	bl	8000ac0 <__NVIC_SetPriorityGrouping>
}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b086      	sub	sp, #24
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	60b9      	str	r1, [r7, #8]
 8000c80:	607a      	str	r2, [r7, #4]
 8000c82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c88:	f7ff ff3e 	bl	8000b08 <__NVIC_GetPriorityGrouping>
 8000c8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	68b9      	ldr	r1, [r7, #8]
 8000c92:	6978      	ldr	r0, [r7, #20]
 8000c94:	f7ff ff8e 	bl	8000bb4 <NVIC_EncodePriority>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c9e:	4611      	mov	r1, r2
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff ff5d 	bl	8000b60 <__NVIC_SetPriority>
}
 8000ca6:	bf00      	nop
 8000ca8:	3718      	adds	r7, #24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b082      	sub	sp, #8
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff ff31 	bl	8000b24 <__NVIC_EnableIRQ>
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b082      	sub	sp, #8
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f7ff ffa2 	bl	8000c1c <SysTick_Config>
 8000cd8:	4603      	mov	r3, r0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b084      	sub	sp, #16
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d101      	bne.n	8000cf8 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	e037      	b.n	8000d68 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2202      	movs	r2, #2
 8000cfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000d0e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000d12:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000d1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	68db      	ldr	r3, [r3, #12]
 8000d22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	695b      	ldr	r3, [r3, #20]
 8000d2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	69db      	ldr	r3, [r3, #28]
 8000d3a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d3c:	68fa      	ldr	r2, [r7, #12]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f000 f9bc 	bl	80010c8 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2200      	movs	r2, #0
 8000d54:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2201      	movs	r2, #1
 8000d5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2200      	movs	r2, #0
 8000d62:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000d66:	2300      	movs	r3, #0
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
 8000d7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d101      	bne.n	8000d90 <HAL_DMA_Start_IT+0x20>
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	e04a      	b.n	8000e26 <HAL_DMA_Start_IT+0xb6>
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	2201      	movs	r2, #1
 8000d94:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d13a      	bne.n	8000e18 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	2202      	movs	r2, #2
 8000da6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	2200      	movs	r2, #0
 8000dae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f022 0201 	bic.w	r2, r2, #1
 8000dbe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	68b9      	ldr	r1, [r7, #8]
 8000dc6:	68f8      	ldr	r0, [r7, #12]
 8000dc8:	f000 f950 	bl	800106c <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d008      	beq.n	8000de6 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f042 020e 	orr.w	r2, r2, #14
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	e00f      	b.n	8000e06 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f042 020a 	orr.w	r2, r2, #10
 8000df4:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f022 0204 	bic.w	r2, r2, #4
 8000e04:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f042 0201 	orr.w	r2, r2, #1
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	e005      	b.n	8000e24 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000e20:	2302      	movs	r3, #2
 8000e22:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8000e24:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3718      	adds	r7, #24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	b083      	sub	sp, #12
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d101      	bne.n	8000e40 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	e02e      	b.n	8000e9e <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	d008      	beq.n	8000e5c <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2204      	movs	r2, #4
 8000e4e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2200      	movs	r2, #0
 8000e54:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e020      	b.n	8000e9e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f022 020e 	bic.w	r2, r2, #14
 8000e6a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f022 0201 	bic.w	r2, r2, #1
 8000e7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e84:	2101      	movs	r1, #1
 8000e86:	fa01 f202 	lsl.w	r2, r1, r2
 8000e8a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2201      	movs	r2, #1
 8000e90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2200      	movs	r2, #0
 8000e98:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b084      	sub	sp, #16
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d005      	beq.n	8000ecc <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2204      	movs	r2, #4
 8000ec4:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	73fb      	strb	r3, [r7, #15]
 8000eca:	e027      	b.n	8000f1c <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f022 020e 	bic.w	r2, r2, #14
 8000eda:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f022 0201 	bic.w	r2, r2, #1
 8000eea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8000efa:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2201      	movs	r2, #1
 8000f00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d003      	beq.n	8000f1c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	4798      	blx	r3
    }
  }
  return status;
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b084      	sub	sp, #16
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	2204      	movs	r2, #4
 8000f44:	409a      	lsls	r2, r3
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d024      	beq.n	8000f98 <HAL_DMA_IRQHandler+0x72>
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	f003 0304 	and.w	r3, r3, #4
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d01f      	beq.n	8000f98 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f003 0320 	and.w	r3, r3, #32
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d107      	bne.n	8000f76 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f022 0204 	bic.w	r2, r2, #4
 8000f74:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f7e:	2104      	movs	r1, #4
 8000f80:	fa01 f202 	lsl.w	r2, r1, r2
 8000f84:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d06a      	beq.n	8001064 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000f96:	e065      	b.n	8001064 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9c:	2202      	movs	r2, #2
 8000f9e:	409a      	lsls	r2, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d02c      	beq.n	8001002 <HAL_DMA_IRQHandler+0xdc>
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d027      	beq.n	8001002 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f003 0320 	and.w	r3, r3, #32
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d10b      	bne.n	8000fd8 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f022 020a 	bic.w	r2, r2, #10
 8000fce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fe0:	2102      	movs	r1, #2
 8000fe2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fe6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d035      	beq.n	8001064 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001000:	e030      	b.n	8001064 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	2208      	movs	r2, #8
 8001008:	409a      	lsls	r2, r3
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	4013      	ands	r3, r2
 800100e:	2b00      	cmp	r3, #0
 8001010:	d028      	beq.n	8001064 <HAL_DMA_IRQHandler+0x13e>
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	f003 0308 	and.w	r3, r3, #8
 8001018:	2b00      	cmp	r3, #0
 800101a:	d023      	beq.n	8001064 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f022 020e 	bic.w	r2, r2, #14
 800102a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001034:	2101      	movs	r1, #1
 8001036:	fa01 f202 	lsl.w	r2, r1, r2
 800103a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2201      	movs	r2, #1
 8001040:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2201      	movs	r2, #1
 8001046:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	2b00      	cmp	r3, #0
 8001058:	d004      	beq.n	8001064 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	4798      	blx	r3
    }
  }
}
 8001062:	e7ff      	b.n	8001064 <HAL_DMA_IRQHandler+0x13e>
 8001064:	bf00      	nop
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
 8001078:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001082:	2101      	movs	r1, #1
 8001084:	fa01 f202 	lsl.w	r2, r1, r2
 8001088:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	683a      	ldr	r2, [r7, #0]
 8001090:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	2b10      	cmp	r3, #16
 8001098:	d108      	bne.n	80010ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	68ba      	ldr	r2, [r7, #8]
 80010a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80010aa:	e007      	b.n	80010bc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	68ba      	ldr	r2, [r7, #8]
 80010b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	60da      	str	r2, [r3, #12]
}
 80010bc:	bf00      	nop
 80010be:	3714      	adds	r7, #20
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	461a      	mov	r2, r3
 80010d6:	4b14      	ldr	r3, [pc, #80]	; (8001128 <DMA_CalcBaseAndBitshift+0x60>)
 80010d8:	429a      	cmp	r2, r3
 80010da:	d80f      	bhi.n	80010fc <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b12      	ldr	r3, [pc, #72]	; (800112c <DMA_CalcBaseAndBitshift+0x64>)
 80010e4:	4413      	add	r3, r2
 80010e6:	4a12      	ldr	r2, [pc, #72]	; (8001130 <DMA_CalcBaseAndBitshift+0x68>)
 80010e8:	fba2 2303 	umull	r2, r3, r2, r3
 80010ec:	091b      	lsrs	r3, r3, #4
 80010ee:	009a      	lsls	r2, r3, #2
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a0f      	ldr	r2, [pc, #60]	; (8001134 <DMA_CalcBaseAndBitshift+0x6c>)
 80010f8:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80010fa:	e00e      	b.n	800111a <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <DMA_CalcBaseAndBitshift+0x70>)
 8001104:	4413      	add	r3, r2
 8001106:	4a0a      	ldr	r2, [pc, #40]	; (8001130 <DMA_CalcBaseAndBitshift+0x68>)
 8001108:	fba2 2303 	umull	r2, r3, r2, r3
 800110c:	091b      	lsrs	r3, r3, #4
 800110e:	009a      	lsls	r2, r3, #2
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4a09      	ldr	r2, [pc, #36]	; (800113c <DMA_CalcBaseAndBitshift+0x74>)
 8001118:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	40020407 	.word	0x40020407
 800112c:	bffdfff8 	.word	0xbffdfff8
 8001130:	cccccccd 	.word	0xcccccccd
 8001134:	40020000 	.word	0x40020000
 8001138:	bffdfbf8 	.word	0xbffdfbf8
 800113c:	40020400 	.word	0x40020400

08001140 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001140:	b480      	push	{r7}
 8001142:	b087      	sub	sp, #28
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800114e:	e160      	b.n	8001412 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	2101      	movs	r1, #1
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	fa01 f303 	lsl.w	r3, r1, r3
 800115c:	4013      	ands	r3, r2
 800115e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2b00      	cmp	r3, #0
 8001164:	f000 8152 	beq.w	800140c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f003 0303 	and.w	r3, r3, #3
 8001170:	2b01      	cmp	r3, #1
 8001172:	d005      	beq.n	8001180 <HAL_GPIO_Init+0x40>
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f003 0303 	and.w	r3, r3, #3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d130      	bne.n	80011e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	2203      	movs	r2, #3
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4013      	ands	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	68da      	ldr	r2, [r3, #12]
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011b6:	2201      	movs	r2, #1
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43db      	mvns	r3, r3
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	4013      	ands	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	091b      	lsrs	r3, r3, #4
 80011cc:	f003 0201 	and.w	r2, r3, #1
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 0303 	and.w	r3, r3, #3
 80011ea:	2b03      	cmp	r3, #3
 80011ec:	d017      	beq.n	800121e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	2203      	movs	r2, #3
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43db      	mvns	r3, r3
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	4013      	ands	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	689a      	ldr	r2, [r3, #8]
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f003 0303 	and.w	r3, r3, #3
 8001226:	2b02      	cmp	r3, #2
 8001228:	d123      	bne.n	8001272 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	08da      	lsrs	r2, r3, #3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	3208      	adds	r2, #8
 8001232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001236:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	220f      	movs	r2, #15
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	4013      	ands	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	691a      	ldr	r2, [r3, #16]
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	f003 0307 	and.w	r3, r3, #7
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4313      	orrs	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	08da      	lsrs	r2, r3, #3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3208      	adds	r2, #8
 800126c:	6939      	ldr	r1, [r7, #16]
 800126e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	2203      	movs	r2, #3
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43db      	mvns	r3, r3
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	4013      	ands	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f003 0203 	and.w	r2, r3, #3
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f000 80ac 	beq.w	800140c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b4:	4b5e      	ldr	r3, [pc, #376]	; (8001430 <HAL_GPIO_Init+0x2f0>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	4a5d      	ldr	r2, [pc, #372]	; (8001430 <HAL_GPIO_Init+0x2f0>)
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	6193      	str	r3, [r2, #24]
 80012c0:	4b5b      	ldr	r3, [pc, #364]	; (8001430 <HAL_GPIO_Init+0x2f0>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	60bb      	str	r3, [r7, #8]
 80012ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012cc:	4a59      	ldr	r2, [pc, #356]	; (8001434 <HAL_GPIO_Init+0x2f4>)
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	089b      	lsrs	r3, r3, #2
 80012d2:	3302      	adds	r3, #2
 80012d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	f003 0303 	and.w	r3, r3, #3
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	220f      	movs	r2, #15
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4013      	ands	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012f6:	d025      	beq.n	8001344 <HAL_GPIO_Init+0x204>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a4f      	ldr	r2, [pc, #316]	; (8001438 <HAL_GPIO_Init+0x2f8>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d01f      	beq.n	8001340 <HAL_GPIO_Init+0x200>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a4e      	ldr	r2, [pc, #312]	; (800143c <HAL_GPIO_Init+0x2fc>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d019      	beq.n	800133c <HAL_GPIO_Init+0x1fc>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a4d      	ldr	r2, [pc, #308]	; (8001440 <HAL_GPIO_Init+0x300>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d013      	beq.n	8001338 <HAL_GPIO_Init+0x1f8>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a4c      	ldr	r2, [pc, #304]	; (8001444 <HAL_GPIO_Init+0x304>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d00d      	beq.n	8001334 <HAL_GPIO_Init+0x1f4>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a4b      	ldr	r2, [pc, #300]	; (8001448 <HAL_GPIO_Init+0x308>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d007      	beq.n	8001330 <HAL_GPIO_Init+0x1f0>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a4a      	ldr	r2, [pc, #296]	; (800144c <HAL_GPIO_Init+0x30c>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d101      	bne.n	800132c <HAL_GPIO_Init+0x1ec>
 8001328:	2306      	movs	r3, #6
 800132a:	e00c      	b.n	8001346 <HAL_GPIO_Init+0x206>
 800132c:	2307      	movs	r3, #7
 800132e:	e00a      	b.n	8001346 <HAL_GPIO_Init+0x206>
 8001330:	2305      	movs	r3, #5
 8001332:	e008      	b.n	8001346 <HAL_GPIO_Init+0x206>
 8001334:	2304      	movs	r3, #4
 8001336:	e006      	b.n	8001346 <HAL_GPIO_Init+0x206>
 8001338:	2303      	movs	r3, #3
 800133a:	e004      	b.n	8001346 <HAL_GPIO_Init+0x206>
 800133c:	2302      	movs	r3, #2
 800133e:	e002      	b.n	8001346 <HAL_GPIO_Init+0x206>
 8001340:	2301      	movs	r3, #1
 8001342:	e000      	b.n	8001346 <HAL_GPIO_Init+0x206>
 8001344:	2300      	movs	r3, #0
 8001346:	697a      	ldr	r2, [r7, #20]
 8001348:	f002 0203 	and.w	r2, r2, #3
 800134c:	0092      	lsls	r2, r2, #2
 800134e:	4093      	lsls	r3, r2
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	4313      	orrs	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001356:	4937      	ldr	r1, [pc, #220]	; (8001434 <HAL_GPIO_Init+0x2f4>)
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	089b      	lsrs	r3, r3, #2
 800135c:	3302      	adds	r3, #2
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001364:	4b3a      	ldr	r3, [pc, #232]	; (8001450 <HAL_GPIO_Init+0x310>)
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	43db      	mvns	r3, r3
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	4013      	ands	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d003      	beq.n	8001388 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	4313      	orrs	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001388:	4a31      	ldr	r2, [pc, #196]	; (8001450 <HAL_GPIO_Init+0x310>)
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800138e:	4b30      	ldr	r3, [pc, #192]	; (8001450 <HAL_GPIO_Init+0x310>)
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	43db      	mvns	r3, r3
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	4013      	ands	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013b2:	4a27      	ldr	r2, [pc, #156]	; (8001450 <HAL_GPIO_Init+0x310>)
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013b8:	4b25      	ldr	r3, [pc, #148]	; (8001450 <HAL_GPIO_Init+0x310>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	4313      	orrs	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013dc:	4a1c      	ldr	r2, [pc, #112]	; (8001450 <HAL_GPIO_Init+0x310>)
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013e2:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <HAL_GPIO_Init+0x310>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	43db      	mvns	r3, r3
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4013      	ands	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4313      	orrs	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001406:	4a12      	ldr	r2, [pc, #72]	; (8001450 <HAL_GPIO_Init+0x310>)
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	3301      	adds	r3, #1
 8001410:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	fa22 f303 	lsr.w	r3, r2, r3
 800141c:	2b00      	cmp	r3, #0
 800141e:	f47f ae97 	bne.w	8001150 <HAL_GPIO_Init+0x10>
  }
}
 8001422:	bf00      	nop
 8001424:	bf00      	nop
 8001426:	371c      	adds	r7, #28
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	40021000 	.word	0x40021000
 8001434:	40010000 	.word	0x40010000
 8001438:	48000400 	.word	0x48000400
 800143c:	48000800 	.word	0x48000800
 8001440:	48000c00 	.word	0x48000c00
 8001444:	48001000 	.word	0x48001000
 8001448:	48001400 	.word	0x48001400
 800144c:	48001800 	.word	0x48001800
 8001450:	40010400 	.word	0x40010400

08001454 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	691a      	ldr	r2, [r3, #16]
 8001464:	887b      	ldrh	r3, [r7, #2]
 8001466:	4013      	ands	r3, r2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d002      	beq.n	8001472 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800146c:	2301      	movs	r3, #1
 800146e:	73fb      	strb	r3, [r7, #15]
 8001470:	e001      	b.n	8001476 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001472:	2300      	movs	r3, #0
 8001474:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001476:	7bfb      	ldrb	r3, [r7, #15]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	460b      	mov	r3, r1
 800148e:	807b      	strh	r3, [r7, #2]
 8001490:	4613      	mov	r3, r2
 8001492:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001494:	787b      	ldrb	r3, [r7, #1]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d003      	beq.n	80014a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800149a:	887a      	ldrh	r2, [r7, #2]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014a0:	e002      	b.n	80014a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014a2:	887a      	ldrh	r2, [r7, #2]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	460b      	mov	r3, r1
 80014be:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	695b      	ldr	r3, [r3, #20]
 80014c4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014c6:	887a      	ldrh	r2, [r7, #2]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4013      	ands	r3, r2
 80014cc:	041a      	lsls	r2, r3, #16
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	43d9      	mvns	r1, r3
 80014d2:	887b      	ldrh	r3, [r7, #2]
 80014d4:	400b      	ands	r3, r1
 80014d6:	431a      	orrs	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	619a      	str	r2, [r3, #24]
}
 80014dc:	bf00      	nop
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014f8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014fe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d102      	bne.n	800150e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	f001 b83a 	b.w	8002582 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800150e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001512:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	2b00      	cmp	r3, #0
 8001520:	f000 816f 	beq.w	8001802 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001524:	4bb5      	ldr	r3, [pc, #724]	; (80017fc <HAL_RCC_OscConfig+0x314>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 030c 	and.w	r3, r3, #12
 800152c:	2b04      	cmp	r3, #4
 800152e:	d00c      	beq.n	800154a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001530:	4bb2      	ldr	r3, [pc, #712]	; (80017fc <HAL_RCC_OscConfig+0x314>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 030c 	and.w	r3, r3, #12
 8001538:	2b08      	cmp	r3, #8
 800153a:	d15c      	bne.n	80015f6 <HAL_RCC_OscConfig+0x10e>
 800153c:	4baf      	ldr	r3, [pc, #700]	; (80017fc <HAL_RCC_OscConfig+0x314>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001548:	d155      	bne.n	80015f6 <HAL_RCC_OscConfig+0x10e>
 800154a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800154e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001552:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001556:	fa93 f3a3 	rbit	r3, r3
 800155a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800155e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001562:	fab3 f383 	clz	r3, r3
 8001566:	b2db      	uxtb	r3, r3
 8001568:	095b      	lsrs	r3, r3, #5
 800156a:	b2db      	uxtb	r3, r3
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b01      	cmp	r3, #1
 8001574:	d102      	bne.n	800157c <HAL_RCC_OscConfig+0x94>
 8001576:	4ba1      	ldr	r3, [pc, #644]	; (80017fc <HAL_RCC_OscConfig+0x314>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	e015      	b.n	80015a8 <HAL_RCC_OscConfig+0xc0>
 800157c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001580:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001584:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001588:	fa93 f3a3 	rbit	r3, r3
 800158c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001590:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001594:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001598:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800159c:	fa93 f3a3 	rbit	r3, r3
 80015a0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80015a4:	4b95      	ldr	r3, [pc, #596]	; (80017fc <HAL_RCC_OscConfig+0x314>)
 80015a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015ac:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80015b0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80015b4:	fa92 f2a2 	rbit	r2, r2
 80015b8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80015bc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80015c0:	fab2 f282 	clz	r2, r2
 80015c4:	b2d2      	uxtb	r2, r2
 80015c6:	f042 0220 	orr.w	r2, r2, #32
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	f002 021f 	and.w	r2, r2, #31
 80015d0:	2101      	movs	r1, #1
 80015d2:	fa01 f202 	lsl.w	r2, r1, r2
 80015d6:	4013      	ands	r3, r2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f000 8111 	beq.w	8001800 <HAL_RCC_OscConfig+0x318>
 80015de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015e2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f040 8108 	bne.w	8001800 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	f000 bfc6 	b.w	8002582 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015fa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001606:	d106      	bne.n	8001616 <HAL_RCC_OscConfig+0x12e>
 8001608:	4b7c      	ldr	r3, [pc, #496]	; (80017fc <HAL_RCC_OscConfig+0x314>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a7b      	ldr	r2, [pc, #492]	; (80017fc <HAL_RCC_OscConfig+0x314>)
 800160e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001612:	6013      	str	r3, [r2, #0]
 8001614:	e036      	b.n	8001684 <HAL_RCC_OscConfig+0x19c>
 8001616:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800161a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d10c      	bne.n	8001640 <HAL_RCC_OscConfig+0x158>
 8001626:	4b75      	ldr	r3, [pc, #468]	; (80017fc <HAL_RCC_OscConfig+0x314>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a74      	ldr	r2, [pc, #464]	; (80017fc <HAL_RCC_OscConfig+0x314>)
 800162c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	4b72      	ldr	r3, [pc, #456]	; (80017fc <HAL_RCC_OscConfig+0x314>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a71      	ldr	r2, [pc, #452]	; (80017fc <HAL_RCC_OscConfig+0x314>)
 8001638:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	e021      	b.n	8001684 <HAL_RCC_OscConfig+0x19c>
 8001640:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001644:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001650:	d10c      	bne.n	800166c <HAL_RCC_OscConfig+0x184>
 8001652:	4b6a      	ldr	r3, [pc, #424]	; (80017fc <HAL_RCC_OscConfig+0x314>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a69      	ldr	r2, [pc, #420]	; (80017fc <HAL_RCC_OscConfig+0x314>)
 8001658:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800165c:	6013      	str	r3, [r2, #0]
 800165e:	4b67      	ldr	r3, [pc, #412]	; (80017fc <HAL_RCC_OscConfig+0x314>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a66      	ldr	r2, [pc, #408]	; (80017fc <HAL_RCC_OscConfig+0x314>)
 8001664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	e00b      	b.n	8001684 <HAL_RCC_OscConfig+0x19c>
 800166c:	4b63      	ldr	r3, [pc, #396]	; (80017fc <HAL_RCC_OscConfig+0x314>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a62      	ldr	r2, [pc, #392]	; (80017fc <HAL_RCC_OscConfig+0x314>)
 8001672:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001676:	6013      	str	r3, [r2, #0]
 8001678:	4b60      	ldr	r3, [pc, #384]	; (80017fc <HAL_RCC_OscConfig+0x314>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a5f      	ldr	r2, [pc, #380]	; (80017fc <HAL_RCC_OscConfig+0x314>)
 800167e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001682:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001684:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001688:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d059      	beq.n	8001748 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001694:	f7ff fa08 	bl	8000aa8 <HAL_GetTick>
 8001698:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800169c:	e00a      	b.n	80016b4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800169e:	f7ff fa03 	bl	8000aa8 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b64      	cmp	r3, #100	; 0x64
 80016ac:	d902      	bls.n	80016b4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	f000 bf67 	b.w	8002582 <HAL_RCC_OscConfig+0x109a>
 80016b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016b8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016bc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80016c0:	fa93 f3a3 	rbit	r3, r3
 80016c4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80016c8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016cc:	fab3 f383 	clz	r3, r3
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	095b      	lsrs	r3, r3, #5
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d102      	bne.n	80016e6 <HAL_RCC_OscConfig+0x1fe>
 80016e0:	4b46      	ldr	r3, [pc, #280]	; (80017fc <HAL_RCC_OscConfig+0x314>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	e015      	b.n	8001712 <HAL_RCC_OscConfig+0x22a>
 80016e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016ea:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ee:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80016f2:	fa93 f3a3 	rbit	r3, r3
 80016f6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80016fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016fe:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001702:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001706:	fa93 f3a3 	rbit	r3, r3
 800170a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800170e:	4b3b      	ldr	r3, [pc, #236]	; (80017fc <HAL_RCC_OscConfig+0x314>)
 8001710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001712:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001716:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800171a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800171e:	fa92 f2a2 	rbit	r2, r2
 8001722:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001726:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800172a:	fab2 f282 	clz	r2, r2
 800172e:	b2d2      	uxtb	r2, r2
 8001730:	f042 0220 	orr.w	r2, r2, #32
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	f002 021f 	and.w	r2, r2, #31
 800173a:	2101      	movs	r1, #1
 800173c:	fa01 f202 	lsl.w	r2, r1, r2
 8001740:	4013      	ands	r3, r2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d0ab      	beq.n	800169e <HAL_RCC_OscConfig+0x1b6>
 8001746:	e05c      	b.n	8001802 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001748:	f7ff f9ae 	bl	8000aa8 <HAL_GetTick>
 800174c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001750:	e00a      	b.n	8001768 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001752:	f7ff f9a9 	bl	8000aa8 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b64      	cmp	r3, #100	; 0x64
 8001760:	d902      	bls.n	8001768 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	f000 bf0d 	b.w	8002582 <HAL_RCC_OscConfig+0x109a>
 8001768:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800176c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001770:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001774:	fa93 f3a3 	rbit	r3, r3
 8001778:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800177c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001780:	fab3 f383 	clz	r3, r3
 8001784:	b2db      	uxtb	r3, r3
 8001786:	095b      	lsrs	r3, r3, #5
 8001788:	b2db      	uxtb	r3, r3
 800178a:	f043 0301 	orr.w	r3, r3, #1
 800178e:	b2db      	uxtb	r3, r3
 8001790:	2b01      	cmp	r3, #1
 8001792:	d102      	bne.n	800179a <HAL_RCC_OscConfig+0x2b2>
 8001794:	4b19      	ldr	r3, [pc, #100]	; (80017fc <HAL_RCC_OscConfig+0x314>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	e015      	b.n	80017c6 <HAL_RCC_OscConfig+0x2de>
 800179a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800179e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80017a6:	fa93 f3a3 	rbit	r3, r3
 80017aa:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80017ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017b2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80017b6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80017ba:	fa93 f3a3 	rbit	r3, r3
 80017be:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80017c2:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <HAL_RCC_OscConfig+0x314>)
 80017c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017ca:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80017ce:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80017d2:	fa92 f2a2 	rbit	r2, r2
 80017d6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80017da:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80017de:	fab2 f282 	clz	r2, r2
 80017e2:	b2d2      	uxtb	r2, r2
 80017e4:	f042 0220 	orr.w	r2, r2, #32
 80017e8:	b2d2      	uxtb	r2, r2
 80017ea:	f002 021f 	and.w	r2, r2, #31
 80017ee:	2101      	movs	r1, #1
 80017f0:	fa01 f202 	lsl.w	r2, r1, r2
 80017f4:	4013      	ands	r3, r2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1ab      	bne.n	8001752 <HAL_RCC_OscConfig+0x26a>
 80017fa:	e002      	b.n	8001802 <HAL_RCC_OscConfig+0x31a>
 80017fc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001800:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001802:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001806:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	f000 817f 	beq.w	8001b16 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001818:	4ba7      	ldr	r3, [pc, #668]	; (8001ab8 <HAL_RCC_OscConfig+0x5d0>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 030c 	and.w	r3, r3, #12
 8001820:	2b00      	cmp	r3, #0
 8001822:	d00c      	beq.n	800183e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001824:	4ba4      	ldr	r3, [pc, #656]	; (8001ab8 <HAL_RCC_OscConfig+0x5d0>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 030c 	and.w	r3, r3, #12
 800182c:	2b08      	cmp	r3, #8
 800182e:	d173      	bne.n	8001918 <HAL_RCC_OscConfig+0x430>
 8001830:	4ba1      	ldr	r3, [pc, #644]	; (8001ab8 <HAL_RCC_OscConfig+0x5d0>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001838:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800183c:	d16c      	bne.n	8001918 <HAL_RCC_OscConfig+0x430>
 800183e:	2302      	movs	r3, #2
 8001840:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001844:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001848:	fa93 f3a3 	rbit	r3, r3
 800184c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001850:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001854:	fab3 f383 	clz	r3, r3
 8001858:	b2db      	uxtb	r3, r3
 800185a:	095b      	lsrs	r3, r3, #5
 800185c:	b2db      	uxtb	r3, r3
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b01      	cmp	r3, #1
 8001866:	d102      	bne.n	800186e <HAL_RCC_OscConfig+0x386>
 8001868:	4b93      	ldr	r3, [pc, #588]	; (8001ab8 <HAL_RCC_OscConfig+0x5d0>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	e013      	b.n	8001896 <HAL_RCC_OscConfig+0x3ae>
 800186e:	2302      	movs	r3, #2
 8001870:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001874:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001878:	fa93 f3a3 	rbit	r3, r3
 800187c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001880:	2302      	movs	r3, #2
 8001882:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001886:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800188a:	fa93 f3a3 	rbit	r3, r3
 800188e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001892:	4b89      	ldr	r3, [pc, #548]	; (8001ab8 <HAL_RCC_OscConfig+0x5d0>)
 8001894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001896:	2202      	movs	r2, #2
 8001898:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800189c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80018a0:	fa92 f2a2 	rbit	r2, r2
 80018a4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80018a8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80018ac:	fab2 f282 	clz	r2, r2
 80018b0:	b2d2      	uxtb	r2, r2
 80018b2:	f042 0220 	orr.w	r2, r2, #32
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	f002 021f 	and.w	r2, r2, #31
 80018bc:	2101      	movs	r1, #1
 80018be:	fa01 f202 	lsl.w	r2, r1, r2
 80018c2:	4013      	ands	r3, r2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d00a      	beq.n	80018de <HAL_RCC_OscConfig+0x3f6>
 80018c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018cc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d002      	beq.n	80018de <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	f000 be52 	b.w	8002582 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018de:	4b76      	ldr	r3, [pc, #472]	; (8001ab8 <HAL_RCC_OscConfig+0x5d0>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	21f8      	movs	r1, #248	; 0xf8
 80018f4:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f8:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80018fc:	fa91 f1a1 	rbit	r1, r1
 8001900:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001904:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001908:	fab1 f181 	clz	r1, r1
 800190c:	b2c9      	uxtb	r1, r1
 800190e:	408b      	lsls	r3, r1
 8001910:	4969      	ldr	r1, [pc, #420]	; (8001ab8 <HAL_RCC_OscConfig+0x5d0>)
 8001912:	4313      	orrs	r3, r2
 8001914:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001916:	e0fe      	b.n	8001b16 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001918:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800191c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	2b00      	cmp	r3, #0
 8001926:	f000 8088 	beq.w	8001a3a <HAL_RCC_OscConfig+0x552>
 800192a:	2301      	movs	r3, #1
 800192c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001930:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001934:	fa93 f3a3 	rbit	r3, r3
 8001938:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800193c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001940:	fab3 f383 	clz	r3, r3
 8001944:	b2db      	uxtb	r3, r3
 8001946:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800194a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	461a      	mov	r2, r3
 8001952:	2301      	movs	r3, #1
 8001954:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001956:	f7ff f8a7 	bl	8000aa8 <HAL_GetTick>
 800195a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800195e:	e00a      	b.n	8001976 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001960:	f7ff f8a2 	bl	8000aa8 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d902      	bls.n	8001976 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	f000 be06 	b.w	8002582 <HAL_RCC_OscConfig+0x109a>
 8001976:	2302      	movs	r3, #2
 8001978:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001980:	fa93 f3a3 	rbit	r3, r3
 8001984:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001988:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800198c:	fab3 f383 	clz	r3, r3
 8001990:	b2db      	uxtb	r3, r3
 8001992:	095b      	lsrs	r3, r3, #5
 8001994:	b2db      	uxtb	r3, r3
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	b2db      	uxtb	r3, r3
 800199c:	2b01      	cmp	r3, #1
 800199e:	d102      	bne.n	80019a6 <HAL_RCC_OscConfig+0x4be>
 80019a0:	4b45      	ldr	r3, [pc, #276]	; (8001ab8 <HAL_RCC_OscConfig+0x5d0>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	e013      	b.n	80019ce <HAL_RCC_OscConfig+0x4e6>
 80019a6:	2302      	movs	r3, #2
 80019a8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ac:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80019b0:	fa93 f3a3 	rbit	r3, r3
 80019b4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80019b8:	2302      	movs	r3, #2
 80019ba:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80019be:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80019c2:	fa93 f3a3 	rbit	r3, r3
 80019c6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80019ca:	4b3b      	ldr	r3, [pc, #236]	; (8001ab8 <HAL_RCC_OscConfig+0x5d0>)
 80019cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ce:	2202      	movs	r2, #2
 80019d0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80019d4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80019d8:	fa92 f2a2 	rbit	r2, r2
 80019dc:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80019e0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80019e4:	fab2 f282 	clz	r2, r2
 80019e8:	b2d2      	uxtb	r2, r2
 80019ea:	f042 0220 	orr.w	r2, r2, #32
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	f002 021f 	and.w	r2, r2, #31
 80019f4:	2101      	movs	r1, #1
 80019f6:	fa01 f202 	lsl.w	r2, r1, r2
 80019fa:	4013      	ands	r3, r2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d0af      	beq.n	8001960 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a00:	4b2d      	ldr	r3, [pc, #180]	; (8001ab8 <HAL_RCC_OscConfig+0x5d0>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a0c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	21f8      	movs	r1, #248	; 0xf8
 8001a16:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001a1e:	fa91 f1a1 	rbit	r1, r1
 8001a22:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001a26:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001a2a:	fab1 f181 	clz	r1, r1
 8001a2e:	b2c9      	uxtb	r1, r1
 8001a30:	408b      	lsls	r3, r1
 8001a32:	4921      	ldr	r1, [pc, #132]	; (8001ab8 <HAL_RCC_OscConfig+0x5d0>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	600b      	str	r3, [r1, #0]
 8001a38:	e06d      	b.n	8001b16 <HAL_RCC_OscConfig+0x62e>
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a40:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001a44:	fa93 f3a3 	rbit	r3, r3
 8001a48:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001a4c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a50:	fab3 f383 	clz	r3, r3
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a5a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	461a      	mov	r2, r3
 8001a62:	2300      	movs	r3, #0
 8001a64:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a66:	f7ff f81f 	bl	8000aa8 <HAL_GetTick>
 8001a6a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a6e:	e00a      	b.n	8001a86 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a70:	f7ff f81a 	bl	8000aa8 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d902      	bls.n	8001a86 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	f000 bd7e 	b.w	8002582 <HAL_RCC_OscConfig+0x109a>
 8001a86:	2302      	movs	r3, #2
 8001a88:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001a90:	fa93 f3a3 	rbit	r3, r3
 8001a94:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001a98:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a9c:	fab3 f383 	clz	r3, r3
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	095b      	lsrs	r3, r3, #5
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	f043 0301 	orr.w	r3, r3, #1
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d105      	bne.n	8001abc <HAL_RCC_OscConfig+0x5d4>
 8001ab0:	4b01      	ldr	r3, [pc, #4]	; (8001ab8 <HAL_RCC_OscConfig+0x5d0>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	e016      	b.n	8001ae4 <HAL_RCC_OscConfig+0x5fc>
 8001ab6:	bf00      	nop
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	2302      	movs	r3, #2
 8001abe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001ac6:	fa93 f3a3 	rbit	r3, r3
 8001aca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001ace:	2302      	movs	r3, #2
 8001ad0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001ad4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001ad8:	fa93 f3a3 	rbit	r3, r3
 8001adc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001ae0:	4bbf      	ldr	r3, [pc, #764]	; (8001de0 <HAL_RCC_OscConfig+0x8f8>)
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001aea:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001aee:	fa92 f2a2 	rbit	r2, r2
 8001af2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001af6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001afa:	fab2 f282 	clz	r2, r2
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	f042 0220 	orr.w	r2, r2, #32
 8001b04:	b2d2      	uxtb	r2, r2
 8001b06:	f002 021f 	and.w	r2, r2, #31
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b10:	4013      	ands	r3, r2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1ac      	bne.n	8001a70 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b1a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0308 	and.w	r3, r3, #8
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f000 8113 	beq.w	8001d52 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b30:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d07c      	beq.n	8001c36 <HAL_RCC_OscConfig+0x74e>
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001b46:	fa93 f3a3 	rbit	r3, r3
 8001b4a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001b4e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b52:	fab3 f383 	clz	r3, r3
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4ba2      	ldr	r3, [pc, #648]	; (8001de4 <HAL_RCC_OscConfig+0x8fc>)
 8001b5c:	4413      	add	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	461a      	mov	r2, r3
 8001b62:	2301      	movs	r3, #1
 8001b64:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b66:	f7fe ff9f 	bl	8000aa8 <HAL_GetTick>
 8001b6a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b6e:	e00a      	b.n	8001b86 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b70:	f7fe ff9a 	bl	8000aa8 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d902      	bls.n	8001b86 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	f000 bcfe 	b.w	8002582 <HAL_RCC_OscConfig+0x109a>
 8001b86:	2302      	movs	r3, #2
 8001b88:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001b90:	fa93 f2a3 	rbit	r2, r3
 8001b94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b98:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ba2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	fa93 f2a3 	rbit	r2, r3
 8001bb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bc6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001bca:	2202      	movs	r2, #2
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bd2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	fa93 f2a3 	rbit	r2, r3
 8001bdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001be0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001be4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001be6:	4b7e      	ldr	r3, [pc, #504]	; (8001de0 <HAL_RCC_OscConfig+0x8f8>)
 8001be8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bee:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001bf2:	2102      	movs	r1, #2
 8001bf4:	6019      	str	r1, [r3, #0]
 8001bf6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bfa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	fa93 f1a3 	rbit	r1, r3
 8001c04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c08:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001c0c:	6019      	str	r1, [r3, #0]
  return result;
 8001c0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c12:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	fab3 f383 	clz	r3, r3
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	f003 031f 	and.w	r3, r3, #31
 8001c28:	2101      	movs	r1, #1
 8001c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2e:	4013      	ands	r3, r2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d09d      	beq.n	8001b70 <HAL_RCC_OscConfig+0x688>
 8001c34:	e08d      	b.n	8001d52 <HAL_RCC_OscConfig+0x86a>
 8001c36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c3a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001c3e:	2201      	movs	r2, #1
 8001c40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c46:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	fa93 f2a3 	rbit	r2, r3
 8001c50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c54:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001c58:	601a      	str	r2, [r3, #0]
  return result;
 8001c5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c5e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001c62:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c64:	fab3 f383 	clz	r3, r3
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	4b5d      	ldr	r3, [pc, #372]	; (8001de4 <HAL_RCC_OscConfig+0x8fc>)
 8001c6e:	4413      	add	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	461a      	mov	r2, r3
 8001c74:	2300      	movs	r3, #0
 8001c76:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c78:	f7fe ff16 	bl	8000aa8 <HAL_GetTick>
 8001c7c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c80:	e00a      	b.n	8001c98 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c82:	f7fe ff11 	bl	8000aa8 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d902      	bls.n	8001c98 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	f000 bc75 	b.w	8002582 <HAL_RCC_OscConfig+0x109a>
 8001c98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c9c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001ca0:	2202      	movs	r2, #2
 8001ca2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	fa93 f2a3 	rbit	r2, r3
 8001cb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cb6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ccc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	fa93 f2a3 	rbit	r2, r3
 8001cd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ce4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001ce8:	2202      	movs	r2, #2
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cf0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	fa93 f2a3 	rbit	r2, r3
 8001cfa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cfe:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001d02:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d04:	4b36      	ldr	r3, [pc, #216]	; (8001de0 <HAL_RCC_OscConfig+0x8f8>)
 8001d06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d0c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001d10:	2102      	movs	r1, #2
 8001d12:	6019      	str	r1, [r3, #0]
 8001d14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d18:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	fa93 f1a3 	rbit	r1, r3
 8001d22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d26:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001d2a:	6019      	str	r1, [r3, #0]
  return result;
 8001d2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d30:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	fab3 f383 	clz	r3, r3
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	f003 031f 	and.w	r3, r3, #31
 8001d46:	2101      	movs	r1, #1
 8001d48:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d197      	bne.n	8001c82 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d56:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0304 	and.w	r3, r3, #4
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 81a5 	beq.w	80020b2 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d6e:	4b1c      	ldr	r3, [pc, #112]	; (8001de0 <HAL_RCC_OscConfig+0x8f8>)
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d116      	bne.n	8001da8 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d7a:	4b19      	ldr	r3, [pc, #100]	; (8001de0 <HAL_RCC_OscConfig+0x8f8>)
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	4a18      	ldr	r2, [pc, #96]	; (8001de0 <HAL_RCC_OscConfig+0x8f8>)
 8001d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d84:	61d3      	str	r3, [r2, #28]
 8001d86:	4b16      	ldr	r3, [pc, #88]	; (8001de0 <HAL_RCC_OscConfig+0x8f8>)
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001d8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001da0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001da2:	2301      	movs	r3, #1
 8001da4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da8:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <HAL_RCC_OscConfig+0x900>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d121      	bne.n	8001df8 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001db4:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <HAL_RCC_OscConfig+0x900>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a0b      	ldr	r2, [pc, #44]	; (8001de8 <HAL_RCC_OscConfig+0x900>)
 8001dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dbe:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dc0:	f7fe fe72 	bl	8000aa8 <HAL_GetTick>
 8001dc4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc8:	e010      	b.n	8001dec <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dca:	f7fe fe6d 	bl	8000aa8 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b64      	cmp	r3, #100	; 0x64
 8001dd8:	d908      	bls.n	8001dec <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e3d1      	b.n	8002582 <HAL_RCC_OscConfig+0x109a>
 8001dde:	bf00      	nop
 8001de0:	40021000 	.word	0x40021000
 8001de4:	10908120 	.word	0x10908120
 8001de8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dec:	4b8d      	ldr	r3, [pc, #564]	; (8002024 <HAL_RCC_OscConfig+0xb3c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d0e8      	beq.n	8001dca <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001df8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dfc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d106      	bne.n	8001e16 <HAL_RCC_OscConfig+0x92e>
 8001e08:	4b87      	ldr	r3, [pc, #540]	; (8002028 <HAL_RCC_OscConfig+0xb40>)
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	4a86      	ldr	r2, [pc, #536]	; (8002028 <HAL_RCC_OscConfig+0xb40>)
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	6213      	str	r3, [r2, #32]
 8001e14:	e035      	b.n	8001e82 <HAL_RCC_OscConfig+0x99a>
 8001e16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e1a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d10c      	bne.n	8001e40 <HAL_RCC_OscConfig+0x958>
 8001e26:	4b80      	ldr	r3, [pc, #512]	; (8002028 <HAL_RCC_OscConfig+0xb40>)
 8001e28:	6a1b      	ldr	r3, [r3, #32]
 8001e2a:	4a7f      	ldr	r2, [pc, #508]	; (8002028 <HAL_RCC_OscConfig+0xb40>)
 8001e2c:	f023 0301 	bic.w	r3, r3, #1
 8001e30:	6213      	str	r3, [r2, #32]
 8001e32:	4b7d      	ldr	r3, [pc, #500]	; (8002028 <HAL_RCC_OscConfig+0xb40>)
 8001e34:	6a1b      	ldr	r3, [r3, #32]
 8001e36:	4a7c      	ldr	r2, [pc, #496]	; (8002028 <HAL_RCC_OscConfig+0xb40>)
 8001e38:	f023 0304 	bic.w	r3, r3, #4
 8001e3c:	6213      	str	r3, [r2, #32]
 8001e3e:	e020      	b.n	8001e82 <HAL_RCC_OscConfig+0x99a>
 8001e40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e44:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	2b05      	cmp	r3, #5
 8001e4e:	d10c      	bne.n	8001e6a <HAL_RCC_OscConfig+0x982>
 8001e50:	4b75      	ldr	r3, [pc, #468]	; (8002028 <HAL_RCC_OscConfig+0xb40>)
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	4a74      	ldr	r2, [pc, #464]	; (8002028 <HAL_RCC_OscConfig+0xb40>)
 8001e56:	f043 0304 	orr.w	r3, r3, #4
 8001e5a:	6213      	str	r3, [r2, #32]
 8001e5c:	4b72      	ldr	r3, [pc, #456]	; (8002028 <HAL_RCC_OscConfig+0xb40>)
 8001e5e:	6a1b      	ldr	r3, [r3, #32]
 8001e60:	4a71      	ldr	r2, [pc, #452]	; (8002028 <HAL_RCC_OscConfig+0xb40>)
 8001e62:	f043 0301 	orr.w	r3, r3, #1
 8001e66:	6213      	str	r3, [r2, #32]
 8001e68:	e00b      	b.n	8001e82 <HAL_RCC_OscConfig+0x99a>
 8001e6a:	4b6f      	ldr	r3, [pc, #444]	; (8002028 <HAL_RCC_OscConfig+0xb40>)
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
 8001e6e:	4a6e      	ldr	r2, [pc, #440]	; (8002028 <HAL_RCC_OscConfig+0xb40>)
 8001e70:	f023 0301 	bic.w	r3, r3, #1
 8001e74:	6213      	str	r3, [r2, #32]
 8001e76:	4b6c      	ldr	r3, [pc, #432]	; (8002028 <HAL_RCC_OscConfig+0xb40>)
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	4a6b      	ldr	r2, [pc, #428]	; (8002028 <HAL_RCC_OscConfig+0xb40>)
 8001e7c:	f023 0304 	bic.w	r3, r3, #4
 8001e80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e86:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 8081 	beq.w	8001f96 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e94:	f7fe fe08 	bl	8000aa8 <HAL_GetTick>
 8001e98:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e9c:	e00b      	b.n	8001eb6 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e9e:	f7fe fe03 	bl	8000aa8 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e365      	b.n	8002582 <HAL_RCC_OscConfig+0x109a>
 8001eb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eba:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ec6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	fa93 f2a3 	rbit	r2, r3
 8001ed0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ed4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ede:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eea:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	fa93 f2a3 	rbit	r2, r3
 8001ef4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ef8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001efc:	601a      	str	r2, [r3, #0]
  return result;
 8001efe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f02:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001f06:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f08:	fab3 f383 	clz	r3, r3
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	095b      	lsrs	r3, r3, #5
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	f043 0302 	orr.w	r3, r3, #2
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d102      	bne.n	8001f22 <HAL_RCC_OscConfig+0xa3a>
 8001f1c:	4b42      	ldr	r3, [pc, #264]	; (8002028 <HAL_RCC_OscConfig+0xb40>)
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	e013      	b.n	8001f4a <HAL_RCC_OscConfig+0xa62>
 8001f22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f26:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001f2a:	2202      	movs	r2, #2
 8001f2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f32:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	fa93 f2a3 	rbit	r2, r3
 8001f3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f40:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	4b38      	ldr	r3, [pc, #224]	; (8002028 <HAL_RCC_OscConfig+0xb40>)
 8001f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f4e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001f52:	2102      	movs	r1, #2
 8001f54:	6011      	str	r1, [r2, #0]
 8001f56:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f5a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001f5e:	6812      	ldr	r2, [r2, #0]
 8001f60:	fa92 f1a2 	rbit	r1, r2
 8001f64:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f68:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001f6c:	6011      	str	r1, [r2, #0]
  return result;
 8001f6e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f72:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001f76:	6812      	ldr	r2, [r2, #0]
 8001f78:	fab2 f282 	clz	r2, r2
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	f002 021f 	and.w	r2, r2, #31
 8001f88:	2101      	movs	r1, #1
 8001f8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f8e:	4013      	ands	r3, r2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d084      	beq.n	8001e9e <HAL_RCC_OscConfig+0x9b6>
 8001f94:	e083      	b.n	800209e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f96:	f7fe fd87 	bl	8000aa8 <HAL_GetTick>
 8001f9a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f9e:	e00b      	b.n	8001fb8 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fa0:	f7fe fd82 	bl	8000aa8 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e2e4      	b.n	8002582 <HAL_RCC_OscConfig+0x109a>
 8001fb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fbc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001fc0:	2202      	movs	r2, #2
 8001fc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fc8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	fa93 f2a3 	rbit	r2, r3
 8001fd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fd6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fe0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fec:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	fa93 f2a3 	rbit	r2, r3
 8001ff6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ffa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001ffe:	601a      	str	r2, [r3, #0]
  return result;
 8002000:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002004:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002008:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800200a:	fab3 f383 	clz	r3, r3
 800200e:	b2db      	uxtb	r3, r3
 8002010:	095b      	lsrs	r3, r3, #5
 8002012:	b2db      	uxtb	r3, r3
 8002014:	f043 0302 	orr.w	r3, r3, #2
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d106      	bne.n	800202c <HAL_RCC_OscConfig+0xb44>
 800201e:	4b02      	ldr	r3, [pc, #8]	; (8002028 <HAL_RCC_OscConfig+0xb40>)
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	e017      	b.n	8002054 <HAL_RCC_OscConfig+0xb6c>
 8002024:	40007000 	.word	0x40007000
 8002028:	40021000 	.word	0x40021000
 800202c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002030:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002034:	2202      	movs	r2, #2
 8002036:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002038:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800203c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	fa93 f2a3 	rbit	r2, r3
 8002046:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800204a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	4bb3      	ldr	r3, [pc, #716]	; (8002320 <HAL_RCC_OscConfig+0xe38>)
 8002052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002054:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002058:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800205c:	2102      	movs	r1, #2
 800205e:	6011      	str	r1, [r2, #0]
 8002060:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002064:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002068:	6812      	ldr	r2, [r2, #0]
 800206a:	fa92 f1a2 	rbit	r1, r2
 800206e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002072:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002076:	6011      	str	r1, [r2, #0]
  return result;
 8002078:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800207c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002080:	6812      	ldr	r2, [r2, #0]
 8002082:	fab2 f282 	clz	r2, r2
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	f002 021f 	and.w	r2, r2, #31
 8002092:	2101      	movs	r1, #1
 8002094:	fa01 f202 	lsl.w	r2, r1, r2
 8002098:	4013      	ands	r3, r2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d180      	bne.n	8001fa0 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800209e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d105      	bne.n	80020b2 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020a6:	4b9e      	ldr	r3, [pc, #632]	; (8002320 <HAL_RCC_OscConfig+0xe38>)
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	4a9d      	ldr	r2, [pc, #628]	; (8002320 <HAL_RCC_OscConfig+0xe38>)
 80020ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020b0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f000 825e 	beq.w	8002580 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020c4:	4b96      	ldr	r3, [pc, #600]	; (8002320 <HAL_RCC_OscConfig+0xe38>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f003 030c 	and.w	r3, r3, #12
 80020cc:	2b08      	cmp	r3, #8
 80020ce:	f000 821f 	beq.w	8002510 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020d6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	2b02      	cmp	r3, #2
 80020e0:	f040 8170 	bne.w	80023c4 <HAL_RCC_OscConfig+0xedc>
 80020e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020e8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80020ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020f6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	fa93 f2a3 	rbit	r2, r3
 8002100:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002104:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002108:	601a      	str	r2, [r3, #0]
  return result;
 800210a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800210e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002112:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002114:	fab3 f383 	clz	r3, r3
 8002118:	b2db      	uxtb	r3, r3
 800211a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800211e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	461a      	mov	r2, r3
 8002126:	2300      	movs	r3, #0
 8002128:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212a:	f7fe fcbd 	bl	8000aa8 <HAL_GetTick>
 800212e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002132:	e009      	b.n	8002148 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002134:	f7fe fcb8 	bl	8000aa8 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e21c      	b.n	8002582 <HAL_RCC_OscConfig+0x109a>
 8002148:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800214c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002150:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002154:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002156:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800215a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	fa93 f2a3 	rbit	r2, r3
 8002164:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002168:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800216c:	601a      	str	r2, [r3, #0]
  return result;
 800216e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002172:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002176:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002178:	fab3 f383 	clz	r3, r3
 800217c:	b2db      	uxtb	r3, r3
 800217e:	095b      	lsrs	r3, r3, #5
 8002180:	b2db      	uxtb	r3, r3
 8002182:	f043 0301 	orr.w	r3, r3, #1
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2b01      	cmp	r3, #1
 800218a:	d102      	bne.n	8002192 <HAL_RCC_OscConfig+0xcaa>
 800218c:	4b64      	ldr	r3, [pc, #400]	; (8002320 <HAL_RCC_OscConfig+0xe38>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	e027      	b.n	80021e2 <HAL_RCC_OscConfig+0xcfa>
 8002192:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002196:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800219a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800219e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021a4:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	fa93 f2a3 	rbit	r2, r3
 80021ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021b2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021bc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80021c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021ca:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	fa93 f2a3 	rbit	r2, r3
 80021d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021d8:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	4b50      	ldr	r3, [pc, #320]	; (8002320 <HAL_RCC_OscConfig+0xe38>)
 80021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021e6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80021ea:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80021ee:	6011      	str	r1, [r2, #0]
 80021f0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021f4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80021f8:	6812      	ldr	r2, [r2, #0]
 80021fa:	fa92 f1a2 	rbit	r1, r2
 80021fe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002202:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002206:	6011      	str	r1, [r2, #0]
  return result;
 8002208:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800220c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002210:	6812      	ldr	r2, [r2, #0]
 8002212:	fab2 f282 	clz	r2, r2
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	f042 0220 	orr.w	r2, r2, #32
 800221c:	b2d2      	uxtb	r2, r2
 800221e:	f002 021f 	and.w	r2, r2, #31
 8002222:	2101      	movs	r1, #1
 8002224:	fa01 f202 	lsl.w	r2, r1, r2
 8002228:	4013      	ands	r3, r2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d182      	bne.n	8002134 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800222e:	4b3c      	ldr	r3, [pc, #240]	; (8002320 <HAL_RCC_OscConfig+0xe38>)
 8002230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002232:	f023 020f 	bic.w	r2, r3, #15
 8002236:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800223a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002242:	4937      	ldr	r1, [pc, #220]	; (8002320 <HAL_RCC_OscConfig+0xe38>)
 8002244:	4313      	orrs	r3, r2
 8002246:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002248:	4b35      	ldr	r3, [pc, #212]	; (8002320 <HAL_RCC_OscConfig+0xe38>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002250:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002254:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6a19      	ldr	r1, [r3, #32]
 800225c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002260:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	69db      	ldr	r3, [r3, #28]
 8002268:	430b      	orrs	r3, r1
 800226a:	492d      	ldr	r1, [pc, #180]	; (8002320 <HAL_RCC_OscConfig+0xe38>)
 800226c:	4313      	orrs	r3, r2
 800226e:	604b      	str	r3, [r1, #4]
 8002270:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002274:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002278:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800227c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002282:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	fa93 f2a3 	rbit	r2, r3
 800228c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002290:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002294:	601a      	str	r2, [r3, #0]
  return result;
 8002296:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800229a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800229e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022a0:	fab3 f383 	clz	r3, r3
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022aa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	461a      	mov	r2, r3
 80022b2:	2301      	movs	r3, #1
 80022b4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b6:	f7fe fbf7 	bl	8000aa8 <HAL_GetTick>
 80022ba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022be:	e009      	b.n	80022d4 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c0:	f7fe fbf2 	bl	8000aa8 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e156      	b.n	8002582 <HAL_RCC_OscConfig+0x109a>
 80022d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022d8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80022dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022e6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	fa93 f2a3 	rbit	r2, r3
 80022f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022f4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80022f8:	601a      	str	r2, [r3, #0]
  return result;
 80022fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022fe:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002302:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002304:	fab3 f383 	clz	r3, r3
 8002308:	b2db      	uxtb	r3, r3
 800230a:	095b      	lsrs	r3, r3, #5
 800230c:	b2db      	uxtb	r3, r3
 800230e:	f043 0301 	orr.w	r3, r3, #1
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b01      	cmp	r3, #1
 8002316:	d105      	bne.n	8002324 <HAL_RCC_OscConfig+0xe3c>
 8002318:	4b01      	ldr	r3, [pc, #4]	; (8002320 <HAL_RCC_OscConfig+0xe38>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	e02a      	b.n	8002374 <HAL_RCC_OscConfig+0xe8c>
 800231e:	bf00      	nop
 8002320:	40021000 	.word	0x40021000
 8002324:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002328:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800232c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002330:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002332:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002336:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	fa93 f2a3 	rbit	r2, r3
 8002340:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002344:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800234e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002352:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800235c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	fa93 f2a3 	rbit	r2, r3
 8002366:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800236a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	4b86      	ldr	r3, [pc, #536]	; (800258c <HAL_RCC_OscConfig+0x10a4>)
 8002372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002374:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002378:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800237c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002380:	6011      	str	r1, [r2, #0]
 8002382:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002386:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800238a:	6812      	ldr	r2, [r2, #0]
 800238c:	fa92 f1a2 	rbit	r1, r2
 8002390:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002394:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002398:	6011      	str	r1, [r2, #0]
  return result;
 800239a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800239e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80023a2:	6812      	ldr	r2, [r2, #0]
 80023a4:	fab2 f282 	clz	r2, r2
 80023a8:	b2d2      	uxtb	r2, r2
 80023aa:	f042 0220 	orr.w	r2, r2, #32
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	f002 021f 	and.w	r2, r2, #31
 80023b4:	2101      	movs	r1, #1
 80023b6:	fa01 f202 	lsl.w	r2, r1, r2
 80023ba:	4013      	ands	r3, r2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f43f af7f 	beq.w	80022c0 <HAL_RCC_OscConfig+0xdd8>
 80023c2:	e0dd      	b.n	8002580 <HAL_RCC_OscConfig+0x1098>
 80023c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023c8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80023cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023d6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	fa93 f2a3 	rbit	r2, r3
 80023e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023e4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80023e8:	601a      	str	r2, [r3, #0]
  return result;
 80023ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023ee:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80023f2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f4:	fab3 f383 	clz	r3, r3
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023fe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	461a      	mov	r2, r3
 8002406:	2300      	movs	r3, #0
 8002408:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240a:	f7fe fb4d 	bl	8000aa8 <HAL_GetTick>
 800240e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002412:	e009      	b.n	8002428 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002414:	f7fe fb48 	bl	8000aa8 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e0ac      	b.n	8002582 <HAL_RCC_OscConfig+0x109a>
 8002428:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800242c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002430:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002434:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002436:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800243a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	fa93 f2a3 	rbit	r2, r3
 8002444:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002448:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800244c:	601a      	str	r2, [r3, #0]
  return result;
 800244e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002452:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002456:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002458:	fab3 f383 	clz	r3, r3
 800245c:	b2db      	uxtb	r3, r3
 800245e:	095b      	lsrs	r3, r3, #5
 8002460:	b2db      	uxtb	r3, r3
 8002462:	f043 0301 	orr.w	r3, r3, #1
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b01      	cmp	r3, #1
 800246a:	d102      	bne.n	8002472 <HAL_RCC_OscConfig+0xf8a>
 800246c:	4b47      	ldr	r3, [pc, #284]	; (800258c <HAL_RCC_OscConfig+0x10a4>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	e027      	b.n	80024c2 <HAL_RCC_OscConfig+0xfda>
 8002472:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002476:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800247a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800247e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002480:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002484:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	fa93 f2a3 	rbit	r2, r3
 800248e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002492:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800249c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80024a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024aa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	fa93 f2a3 	rbit	r2, r3
 80024b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024b8:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	4b33      	ldr	r3, [pc, #204]	; (800258c <HAL_RCC_OscConfig+0x10a4>)
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80024c6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80024ca:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80024ce:	6011      	str	r1, [r2, #0]
 80024d0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80024d4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80024d8:	6812      	ldr	r2, [r2, #0]
 80024da:	fa92 f1a2 	rbit	r1, r2
 80024de:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80024e2:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80024e6:	6011      	str	r1, [r2, #0]
  return result;
 80024e8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80024ec:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80024f0:	6812      	ldr	r2, [r2, #0]
 80024f2:	fab2 f282 	clz	r2, r2
 80024f6:	b2d2      	uxtb	r2, r2
 80024f8:	f042 0220 	orr.w	r2, r2, #32
 80024fc:	b2d2      	uxtb	r2, r2
 80024fe:	f002 021f 	and.w	r2, r2, #31
 8002502:	2101      	movs	r1, #1
 8002504:	fa01 f202 	lsl.w	r2, r1, r2
 8002508:	4013      	ands	r3, r2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d182      	bne.n	8002414 <HAL_RCC_OscConfig+0xf2c>
 800250e:	e037      	b.n	8002580 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002510:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002514:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d101      	bne.n	8002524 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e02e      	b.n	8002582 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002524:	4b19      	ldr	r3, [pc, #100]	; (800258c <HAL_RCC_OscConfig+0x10a4>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800252c:	4b17      	ldr	r3, [pc, #92]	; (800258c <HAL_RCC_OscConfig+0x10a4>)
 800252e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002530:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002534:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002538:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800253c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002540:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	429a      	cmp	r2, r3
 800254a:	d117      	bne.n	800257c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800254c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002550:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002554:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002558:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002560:	429a      	cmp	r2, r3
 8002562:	d10b      	bne.n	800257c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002564:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002568:	f003 020f 	and.w	r2, r3, #15
 800256c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002570:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002578:	429a      	cmp	r2, r3
 800257a:	d001      	beq.n	8002580 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e000      	b.n	8002582 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40021000 	.word	0x40021000

08002590 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b09e      	sub	sp, #120	; 0x78
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800259a:	2300      	movs	r3, #0
 800259c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d101      	bne.n	80025a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e162      	b.n	800286e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025a8:	4b90      	ldr	r3, [pc, #576]	; (80027ec <HAL_RCC_ClockConfig+0x25c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d910      	bls.n	80025d8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b6:	4b8d      	ldr	r3, [pc, #564]	; (80027ec <HAL_RCC_ClockConfig+0x25c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f023 0207 	bic.w	r2, r3, #7
 80025be:	498b      	ldr	r1, [pc, #556]	; (80027ec <HAL_RCC_ClockConfig+0x25c>)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c6:	4b89      	ldr	r3, [pc, #548]	; (80027ec <HAL_RCC_ClockConfig+0x25c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d001      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e14a      	b.n	800286e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d008      	beq.n	80025f6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025e4:	4b82      	ldr	r3, [pc, #520]	; (80027f0 <HAL_RCC_ClockConfig+0x260>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	497f      	ldr	r1, [pc, #508]	; (80027f0 <HAL_RCC_ClockConfig+0x260>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f000 80dc 	beq.w	80027bc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d13c      	bne.n	8002686 <HAL_RCC_ClockConfig+0xf6>
 800260c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002610:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002612:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002614:	fa93 f3a3 	rbit	r3, r3
 8002618:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800261a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261c:	fab3 f383 	clz	r3, r3
 8002620:	b2db      	uxtb	r3, r3
 8002622:	095b      	lsrs	r3, r3, #5
 8002624:	b2db      	uxtb	r3, r3
 8002626:	f043 0301 	orr.w	r3, r3, #1
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b01      	cmp	r3, #1
 800262e:	d102      	bne.n	8002636 <HAL_RCC_ClockConfig+0xa6>
 8002630:	4b6f      	ldr	r3, [pc, #444]	; (80027f0 <HAL_RCC_ClockConfig+0x260>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	e00f      	b.n	8002656 <HAL_RCC_ClockConfig+0xc6>
 8002636:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800263a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800263e:	fa93 f3a3 	rbit	r3, r3
 8002642:	667b      	str	r3, [r7, #100]	; 0x64
 8002644:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002648:	663b      	str	r3, [r7, #96]	; 0x60
 800264a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800264c:	fa93 f3a3 	rbit	r3, r3
 8002650:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002652:	4b67      	ldr	r3, [pc, #412]	; (80027f0 <HAL_RCC_ClockConfig+0x260>)
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800265a:	65ba      	str	r2, [r7, #88]	; 0x58
 800265c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800265e:	fa92 f2a2 	rbit	r2, r2
 8002662:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002664:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002666:	fab2 f282 	clz	r2, r2
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	f042 0220 	orr.w	r2, r2, #32
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	f002 021f 	and.w	r2, r2, #31
 8002676:	2101      	movs	r1, #1
 8002678:	fa01 f202 	lsl.w	r2, r1, r2
 800267c:	4013      	ands	r3, r2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d17b      	bne.n	800277a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e0f3      	b.n	800286e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b02      	cmp	r3, #2
 800268c:	d13c      	bne.n	8002708 <HAL_RCC_ClockConfig+0x178>
 800268e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002692:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002694:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002696:	fa93 f3a3 	rbit	r3, r3
 800269a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800269c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800269e:	fab3 f383 	clz	r3, r3
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	095b      	lsrs	r3, r3, #5
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d102      	bne.n	80026b8 <HAL_RCC_ClockConfig+0x128>
 80026b2:	4b4f      	ldr	r3, [pc, #316]	; (80027f0 <HAL_RCC_ClockConfig+0x260>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	e00f      	b.n	80026d8 <HAL_RCC_ClockConfig+0x148>
 80026b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026bc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026c0:	fa93 f3a3 	rbit	r3, r3
 80026c4:	647b      	str	r3, [r7, #68]	; 0x44
 80026c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026ca:	643b      	str	r3, [r7, #64]	; 0x40
 80026cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026ce:	fa93 f3a3 	rbit	r3, r3
 80026d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026d4:	4b46      	ldr	r3, [pc, #280]	; (80027f0 <HAL_RCC_ClockConfig+0x260>)
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026dc:	63ba      	str	r2, [r7, #56]	; 0x38
 80026de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026e0:	fa92 f2a2 	rbit	r2, r2
 80026e4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80026e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026e8:	fab2 f282 	clz	r2, r2
 80026ec:	b2d2      	uxtb	r2, r2
 80026ee:	f042 0220 	orr.w	r2, r2, #32
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	f002 021f 	and.w	r2, r2, #31
 80026f8:	2101      	movs	r1, #1
 80026fa:	fa01 f202 	lsl.w	r2, r1, r2
 80026fe:	4013      	ands	r3, r2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d13a      	bne.n	800277a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e0b2      	b.n	800286e <HAL_RCC_ClockConfig+0x2de>
 8002708:	2302      	movs	r3, #2
 800270a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800270e:	fa93 f3a3 	rbit	r3, r3
 8002712:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002716:	fab3 f383 	clz	r3, r3
 800271a:	b2db      	uxtb	r3, r3
 800271c:	095b      	lsrs	r3, r3, #5
 800271e:	b2db      	uxtb	r3, r3
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b01      	cmp	r3, #1
 8002728:	d102      	bne.n	8002730 <HAL_RCC_ClockConfig+0x1a0>
 800272a:	4b31      	ldr	r3, [pc, #196]	; (80027f0 <HAL_RCC_ClockConfig+0x260>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	e00d      	b.n	800274c <HAL_RCC_ClockConfig+0x1bc>
 8002730:	2302      	movs	r3, #2
 8002732:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002736:	fa93 f3a3 	rbit	r3, r3
 800273a:	627b      	str	r3, [r7, #36]	; 0x24
 800273c:	2302      	movs	r3, #2
 800273e:	623b      	str	r3, [r7, #32]
 8002740:	6a3b      	ldr	r3, [r7, #32]
 8002742:	fa93 f3a3 	rbit	r3, r3
 8002746:	61fb      	str	r3, [r7, #28]
 8002748:	4b29      	ldr	r3, [pc, #164]	; (80027f0 <HAL_RCC_ClockConfig+0x260>)
 800274a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274c:	2202      	movs	r2, #2
 800274e:	61ba      	str	r2, [r7, #24]
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	fa92 f2a2 	rbit	r2, r2
 8002756:	617a      	str	r2, [r7, #20]
  return result;
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	fab2 f282 	clz	r2, r2
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	f042 0220 	orr.w	r2, r2, #32
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	f002 021f 	and.w	r2, r2, #31
 800276a:	2101      	movs	r1, #1
 800276c:	fa01 f202 	lsl.w	r2, r1, r2
 8002770:	4013      	ands	r3, r2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e079      	b.n	800286e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800277a:	4b1d      	ldr	r3, [pc, #116]	; (80027f0 <HAL_RCC_ClockConfig+0x260>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f023 0203 	bic.w	r2, r3, #3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	491a      	ldr	r1, [pc, #104]	; (80027f0 <HAL_RCC_ClockConfig+0x260>)
 8002788:	4313      	orrs	r3, r2
 800278a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800278c:	f7fe f98c 	bl	8000aa8 <HAL_GetTick>
 8002790:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002792:	e00a      	b.n	80027aa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002794:	f7fe f988 	bl	8000aa8 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e061      	b.n	800286e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027aa:	4b11      	ldr	r3, [pc, #68]	; (80027f0 <HAL_RCC_ClockConfig+0x260>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f003 020c 	and.w	r2, r3, #12
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d1eb      	bne.n	8002794 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027bc:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <HAL_RCC_ClockConfig+0x25c>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d214      	bcs.n	80027f4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ca:	4b08      	ldr	r3, [pc, #32]	; (80027ec <HAL_RCC_ClockConfig+0x25c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f023 0207 	bic.w	r2, r3, #7
 80027d2:	4906      	ldr	r1, [pc, #24]	; (80027ec <HAL_RCC_ClockConfig+0x25c>)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027da:	4b04      	ldr	r3, [pc, #16]	; (80027ec <HAL_RCC_ClockConfig+0x25c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d005      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e040      	b.n	800286e <HAL_RCC_ClockConfig+0x2de>
 80027ec:	40022000 	.word	0x40022000
 80027f0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d008      	beq.n	8002812 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002800:	4b1d      	ldr	r3, [pc, #116]	; (8002878 <HAL_RCC_ClockConfig+0x2e8>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	491a      	ldr	r1, [pc, #104]	; (8002878 <HAL_RCC_ClockConfig+0x2e8>)
 800280e:	4313      	orrs	r3, r2
 8002810:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0308 	and.w	r3, r3, #8
 800281a:	2b00      	cmp	r3, #0
 800281c:	d009      	beq.n	8002832 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800281e:	4b16      	ldr	r3, [pc, #88]	; (8002878 <HAL_RCC_ClockConfig+0x2e8>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	4912      	ldr	r1, [pc, #72]	; (8002878 <HAL_RCC_ClockConfig+0x2e8>)
 800282e:	4313      	orrs	r3, r2
 8002830:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002832:	f000 f829 	bl	8002888 <HAL_RCC_GetSysClockFreq>
 8002836:	4601      	mov	r1, r0
 8002838:	4b0f      	ldr	r3, [pc, #60]	; (8002878 <HAL_RCC_ClockConfig+0x2e8>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002840:	22f0      	movs	r2, #240	; 0xf0
 8002842:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	fa92 f2a2 	rbit	r2, r2
 800284a:	60fa      	str	r2, [r7, #12]
  return result;
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	fab2 f282 	clz	r2, r2
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	40d3      	lsrs	r3, r2
 8002856:	4a09      	ldr	r2, [pc, #36]	; (800287c <HAL_RCC_ClockConfig+0x2ec>)
 8002858:	5cd3      	ldrb	r3, [r2, r3]
 800285a:	fa21 f303 	lsr.w	r3, r1, r3
 800285e:	4a08      	ldr	r2, [pc, #32]	; (8002880 <HAL_RCC_ClockConfig+0x2f0>)
 8002860:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002862:	4b08      	ldr	r3, [pc, #32]	; (8002884 <HAL_RCC_ClockConfig+0x2f4>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f7fe f8da 	bl	8000a20 <HAL_InitTick>
  
  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3778      	adds	r7, #120	; 0x78
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40021000 	.word	0x40021000
 800287c:	08005790 	.word	0x08005790
 8002880:	20000000 	.word	0x20000000
 8002884:	20000004 	.word	0x20000004

08002888 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002888:	b480      	push	{r7}
 800288a:	b087      	sub	sp, #28
 800288c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800288e:	2300      	movs	r3, #0
 8002890:	60fb      	str	r3, [r7, #12]
 8002892:	2300      	movs	r3, #0
 8002894:	60bb      	str	r3, [r7, #8]
 8002896:	2300      	movs	r3, #0
 8002898:	617b      	str	r3, [r7, #20]
 800289a:	2300      	movs	r3, #0
 800289c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800289e:	2300      	movs	r3, #0
 80028a0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80028a2:	4b1f      	ldr	r3, [pc, #124]	; (8002920 <HAL_RCC_GetSysClockFreq+0x98>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f003 030c 	and.w	r3, r3, #12
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	d002      	beq.n	80028b8 <HAL_RCC_GetSysClockFreq+0x30>
 80028b2:	2b08      	cmp	r3, #8
 80028b4:	d003      	beq.n	80028be <HAL_RCC_GetSysClockFreq+0x36>
 80028b6:	e029      	b.n	800290c <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028b8:	4b1a      	ldr	r3, [pc, #104]	; (8002924 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028ba:	613b      	str	r3, [r7, #16]
      break;
 80028bc:	e029      	b.n	8002912 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	0c9b      	lsrs	r3, r3, #18
 80028c2:	f003 030f 	and.w	r3, r3, #15
 80028c6:	4a18      	ldr	r2, [pc, #96]	; (8002928 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028c8:	5cd3      	ldrb	r3, [r2, r3]
 80028ca:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80028cc:	4b14      	ldr	r3, [pc, #80]	; (8002920 <HAL_RCC_GetSysClockFreq+0x98>)
 80028ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d0:	f003 030f 	and.w	r3, r3, #15
 80028d4:	4a15      	ldr	r2, [pc, #84]	; (800292c <HAL_RCC_GetSysClockFreq+0xa4>)
 80028d6:	5cd3      	ldrb	r3, [r2, r3]
 80028d8:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d008      	beq.n	80028f6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80028e4:	4a0f      	ldr	r2, [pc, #60]	; (8002924 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	fb02 f303 	mul.w	r3, r2, r3
 80028f2:	617b      	str	r3, [r7, #20]
 80028f4:	e007      	b.n	8002906 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80028f6:	4a0b      	ldr	r2, [pc, #44]	; (8002924 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	fb02 f303 	mul.w	r3, r2, r3
 8002904:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	613b      	str	r3, [r7, #16]
      break;
 800290a:	e002      	b.n	8002912 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800290c:	4b05      	ldr	r3, [pc, #20]	; (8002924 <HAL_RCC_GetSysClockFreq+0x9c>)
 800290e:	613b      	str	r3, [r7, #16]
      break;
 8002910:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002912:	693b      	ldr	r3, [r7, #16]
}
 8002914:	4618      	mov	r0, r3
 8002916:	371c      	adds	r7, #28
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	40021000 	.word	0x40021000
 8002924:	007a1200 	.word	0x007a1200
 8002928:	080057a8 	.word	0x080057a8
 800292c:	080057b8 	.word	0x080057b8

08002930 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002934:	4b03      	ldr	r3, [pc, #12]	; (8002944 <HAL_RCC_GetHCLKFreq+0x14>)
 8002936:	681b      	ldr	r3, [r3, #0]
}
 8002938:	4618      	mov	r0, r3
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	20000000 	.word	0x20000000

08002948 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800294e:	f7ff ffef 	bl	8002930 <HAL_RCC_GetHCLKFreq>
 8002952:	4601      	mov	r1, r0
 8002954:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800295c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002960:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	fa92 f2a2 	rbit	r2, r2
 8002968:	603a      	str	r2, [r7, #0]
  return result;
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	fab2 f282 	clz	r2, r2
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	40d3      	lsrs	r3, r2
 8002974:	4a04      	ldr	r2, [pc, #16]	; (8002988 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002976:	5cd3      	ldrb	r3, [r2, r3]
 8002978:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800297c:	4618      	mov	r0, r3
 800297e:	3708      	adds	r7, #8
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40021000 	.word	0x40021000
 8002988:	080057a0 	.word	0x080057a0

0800298c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002992:	f7ff ffcd 	bl	8002930 <HAL_RCC_GetHCLKFreq>
 8002996:	4601      	mov	r1, r0
 8002998:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80029a0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80029a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	fa92 f2a2 	rbit	r2, r2
 80029ac:	603a      	str	r2, [r7, #0]
  return result;
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	fab2 f282 	clz	r2, r2
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	40d3      	lsrs	r3, r2
 80029b8:	4a04      	ldr	r2, [pc, #16]	; (80029cc <HAL_RCC_GetPCLK2Freq+0x40>)
 80029ba:	5cd3      	ldrb	r3, [r2, r3]
 80029bc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80029c0:	4618      	mov	r0, r3
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40021000 	.word	0x40021000
 80029cc:	080057a0 	.word	0x080057a0

080029d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b092      	sub	sp, #72	; 0x48
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029d8:	2300      	movs	r3, #0
 80029da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80029dc:	2300      	movs	r3, #0
 80029de:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80029e0:	2300      	movs	r3, #0
 80029e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f000 80d4 	beq.w	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029f4:	4b4e      	ldr	r3, [pc, #312]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029f6:	69db      	ldr	r3, [r3, #28]
 80029f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10e      	bne.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a00:	4b4b      	ldr	r3, [pc, #300]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a02:	69db      	ldr	r3, [r3, #28]
 8002a04:	4a4a      	ldr	r2, [pc, #296]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a0a:	61d3      	str	r3, [r2, #28]
 8002a0c:	4b48      	ldr	r3, [pc, #288]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a0e:	69db      	ldr	r3, [r3, #28]
 8002a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a14:	60bb      	str	r3, [r7, #8]
 8002a16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a1e:	4b45      	ldr	r3, [pc, #276]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d118      	bne.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a2a:	4b42      	ldr	r3, [pc, #264]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a41      	ldr	r2, [pc, #260]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a34:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a36:	f7fe f837 	bl	8000aa8 <HAL_GetTick>
 8002a3a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a3c:	e008      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a3e:	f7fe f833 	bl	8000aa8 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b64      	cmp	r3, #100	; 0x64
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e1d6      	b.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a50:	4b38      	ldr	r3, [pc, #224]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d0f0      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a5c:	4b34      	ldr	r3, [pc, #208]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a64:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f000 8084 	beq.w	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d07c      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a7c:	4b2c      	ldr	r3, [pc, #176]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a7e:	6a1b      	ldr	r3, [r3, #32]
 8002a80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a8e:	fa93 f3a3 	rbit	r3, r3
 8002a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a96:	fab3 f383 	clz	r3, r3
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4b26      	ldr	r3, [pc, #152]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002aa0:	4413      	add	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002aae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab2:	fa93 f3a3 	rbit	r3, r3
 8002ab6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002aba:	fab3 f383 	clz	r3, r3
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	4b1d      	ldr	r3, [pc, #116]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ac4:	4413      	add	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	461a      	mov	r2, r3
 8002aca:	2300      	movs	r3, #0
 8002acc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ace:	4a18      	ldr	r2, [pc, #96]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ad2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d04b      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ade:	f7fd ffe3 	bl	8000aa8 <HAL_GetTick>
 8002ae2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae4:	e00a      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae6:	f7fd ffdf 	bl	8000aa8 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d901      	bls.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e180      	b.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002afc:	2302      	movs	r3, #2
 8002afe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b02:	fa93 f3a3 	rbit	r3, r3
 8002b06:	627b      	str	r3, [r7, #36]	; 0x24
 8002b08:	2302      	movs	r3, #2
 8002b0a:	623b      	str	r3, [r7, #32]
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	fa93 f3a3 	rbit	r3, r3
 8002b12:	61fb      	str	r3, [r7, #28]
  return result;
 8002b14:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b16:	fab3 f383 	clz	r3, r3
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	095b      	lsrs	r3, r3, #5
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	f043 0302 	orr.w	r3, r3, #2
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d108      	bne.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002b2a:	4b01      	ldr	r3, [pc, #4]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	e00d      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002b30:	40021000 	.word	0x40021000
 8002b34:	40007000 	.word	0x40007000
 8002b38:	10908100 	.word	0x10908100
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	fa93 f3a3 	rbit	r3, r3
 8002b46:	617b      	str	r3, [r7, #20]
 8002b48:	4b9a      	ldr	r3, [pc, #616]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	2202      	movs	r2, #2
 8002b4e:	613a      	str	r2, [r7, #16]
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	fa92 f2a2 	rbit	r2, r2
 8002b56:	60fa      	str	r2, [r7, #12]
  return result;
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	fab2 f282 	clz	r2, r2
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b64:	b2d2      	uxtb	r2, r2
 8002b66:	f002 021f 	and.w	r2, r2, #31
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b70:	4013      	ands	r3, r2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d0b7      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002b76:	4b8f      	ldr	r3, [pc, #572]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	498c      	ldr	r1, [pc, #560]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b88:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d105      	bne.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b90:	4b88      	ldr	r3, [pc, #544]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b92:	69db      	ldr	r3, [r3, #28]
 8002b94:	4a87      	ldr	r2, [pc, #540]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b9a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d008      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ba8:	4b82      	ldr	r3, [pc, #520]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bac:	f023 0203 	bic.w	r2, r3, #3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	497f      	ldr	r1, [pc, #508]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d008      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bc6:	4b7b      	ldr	r3, [pc, #492]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	4978      	ldr	r1, [pc, #480]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d008      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002be4:	4b73      	ldr	r3, [pc, #460]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	4970      	ldr	r1, [pc, #448]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0320 	and.w	r3, r3, #32
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d008      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c02:	4b6c      	ldr	r3, [pc, #432]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c06:	f023 0210 	bic.w	r2, r3, #16
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	4969      	ldr	r1, [pc, #420]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d008      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002c20:	4b64      	ldr	r3, [pc, #400]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2c:	4961      	ldr	r1, [pc, #388]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d008      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c3e:	4b5d      	ldr	r3, [pc, #372]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	f023 0220 	bic.w	r2, r3, #32
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	495a      	ldr	r1, [pc, #360]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d008      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c5c:	4b55      	ldr	r3, [pc, #340]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c60:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c68:	4952      	ldr	r1, [pc, #328]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0308 	and.w	r3, r3, #8
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d008      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c7a:	4b4e      	ldr	r3, [pc, #312]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	494b      	ldr	r1, [pc, #300]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0310 	and.w	r3, r3, #16
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d008      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c98:	4b46      	ldr	r3, [pc, #280]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	4943      	ldr	r1, [pc, #268]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d008      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002cb6:	4b3f      	ldr	r3, [pc, #252]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	493c      	ldr	r1, [pc, #240]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d008      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002cd4:	4b37      	ldr	r3, [pc, #220]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce0:	4934      	ldr	r1, [pc, #208]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d008      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002cf2:	4b30      	ldr	r3, [pc, #192]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfe:	492d      	ldr	r1, [pc, #180]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002d10:	4b28      	ldr	r3, [pc, #160]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d1c:	4925      	ldr	r1, [pc, #148]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d008      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002d2e:	4b21      	ldr	r3, [pc, #132]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	491e      	ldr	r1, [pc, #120]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d008      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002d4c:	4b19      	ldr	r3, [pc, #100]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d50:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d58:	4916      	ldr	r1, [pc, #88]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d008      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002d6a:	4b12      	ldr	r3, [pc, #72]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d76:	490f      	ldr	r1, [pc, #60]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d008      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002d88:	4b0a      	ldr	r3, [pc, #40]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d94:	4907      	ldr	r1, [pc, #28]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00c      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002da6:	4b03      	ldr	r3, [pc, #12]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	e002      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002db2:	bf00      	nop
 8002db4:	40021000 	.word	0x40021000
 8002db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dba:	4913      	ldr	r1, [pc, #76]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d008      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002dcc:	4b0e      	ldr	r3, [pc, #56]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd8:	490b      	ldr	r1, [pc, #44]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d008      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002dea:	4b07      	ldr	r3, [pc, #28]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002df6:	4904      	ldr	r1, [pc, #16]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3748      	adds	r7, #72	; 0x48
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	40021000 	.word	0x40021000

08002e0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e049      	b.n	8002eb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d106      	bne.n	8002e38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7fd fc8a 	bl	800074c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3304      	adds	r3, #4
 8002e48:	4619      	mov	r1, r3
 8002e4a:	4610      	mov	r0, r2
 8002e4c:	f000 fac8 	bl	80033e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
	...

08002ebc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d001      	beq.n	8002ed4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e04f      	b.n	8002f74 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68da      	ldr	r2, [r3, #12]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0201 	orr.w	r2, r2, #1
 8002eea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a23      	ldr	r2, [pc, #140]	; (8002f80 <HAL_TIM_Base_Start_IT+0xc4>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d01d      	beq.n	8002f32 <HAL_TIM_Base_Start_IT+0x76>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002efe:	d018      	beq.n	8002f32 <HAL_TIM_Base_Start_IT+0x76>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a1f      	ldr	r2, [pc, #124]	; (8002f84 <HAL_TIM_Base_Start_IT+0xc8>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d013      	beq.n	8002f32 <HAL_TIM_Base_Start_IT+0x76>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a1e      	ldr	r2, [pc, #120]	; (8002f88 <HAL_TIM_Base_Start_IT+0xcc>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d00e      	beq.n	8002f32 <HAL_TIM_Base_Start_IT+0x76>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a1c      	ldr	r2, [pc, #112]	; (8002f8c <HAL_TIM_Base_Start_IT+0xd0>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d009      	beq.n	8002f32 <HAL_TIM_Base_Start_IT+0x76>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a1b      	ldr	r2, [pc, #108]	; (8002f90 <HAL_TIM_Base_Start_IT+0xd4>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d004      	beq.n	8002f32 <HAL_TIM_Base_Start_IT+0x76>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a19      	ldr	r2, [pc, #100]	; (8002f94 <HAL_TIM_Base_Start_IT+0xd8>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d115      	bne.n	8002f5e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	4b17      	ldr	r3, [pc, #92]	; (8002f98 <HAL_TIM_Base_Start_IT+0xdc>)
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2b06      	cmp	r3, #6
 8002f42:	d015      	beq.n	8002f70 <HAL_TIM_Base_Start_IT+0xb4>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f4a:	d011      	beq.n	8002f70 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f042 0201 	orr.w	r2, r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f5c:	e008      	b.n	8002f70 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f042 0201 	orr.w	r2, r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	e000      	b.n	8002f72 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f70:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3714      	adds	r7, #20
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	40012c00 	.word	0x40012c00
 8002f84:	40000400 	.word	0x40000400
 8002f88:	40000800 	.word	0x40000800
 8002f8c:	40013400 	.word	0x40013400
 8002f90:	40014000 	.word	0x40014000
 8002f94:	40015000 	.word	0x40015000
 8002f98:	00010007 	.word	0x00010007

08002f9c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68da      	ldr	r2, [r3, #12]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 0201 	bic.w	r2, r2, #1
 8002fb2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6a1a      	ldr	r2, [r3, #32]
 8002fba:	f241 1311 	movw	r3, #4369	; 0x1111
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d10f      	bne.n	8002fe4 <HAL_TIM_Base_Stop_IT+0x48>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6a1a      	ldr	r2, [r3, #32]
 8002fca:	f240 4344 	movw	r3, #1092	; 0x444
 8002fce:	4013      	ands	r3, r2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d107      	bne.n	8002fe4 <HAL_TIM_Base_Stop_IT+0x48>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f022 0201 	bic.w	r2, r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b084      	sub	sp, #16
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d020      	beq.n	800305e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d01b      	beq.n	800305e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f06f 0202 	mvn.w	r2, #2
 800302e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	f003 0303 	and.w	r3, r3, #3
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 f9ad 	bl	80033a4 <HAL_TIM_IC_CaptureCallback>
 800304a:	e005      	b.n	8003058 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 f99f 	bl	8003390 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f9b0 	bl	80033b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	f003 0304 	and.w	r3, r3, #4
 8003064:	2b00      	cmp	r3, #0
 8003066:	d020      	beq.n	80030aa <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f003 0304 	and.w	r3, r3, #4
 800306e:	2b00      	cmp	r3, #0
 8003070:	d01b      	beq.n	80030aa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f06f 0204 	mvn.w	r2, #4
 800307a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2202      	movs	r2, #2
 8003080:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800308c:	2b00      	cmp	r3, #0
 800308e:	d003      	beq.n	8003098 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f000 f987 	bl	80033a4 <HAL_TIM_IC_CaptureCallback>
 8003096:	e005      	b.n	80030a4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 f979 	bl	8003390 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f98a 	bl	80033b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	f003 0308 	and.w	r3, r3, #8
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d020      	beq.n	80030f6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f003 0308 	and.w	r3, r3, #8
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d01b      	beq.n	80030f6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f06f 0208 	mvn.w	r2, #8
 80030c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2204      	movs	r2, #4
 80030cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	69db      	ldr	r3, [r3, #28]
 80030d4:	f003 0303 	and.w	r3, r3, #3
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 f961 	bl	80033a4 <HAL_TIM_IC_CaptureCallback>
 80030e2:	e005      	b.n	80030f0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 f953 	bl	8003390 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f964 	bl	80033b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	f003 0310 	and.w	r3, r3, #16
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d020      	beq.n	8003142 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f003 0310 	and.w	r3, r3, #16
 8003106:	2b00      	cmp	r3, #0
 8003108:	d01b      	beq.n	8003142 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f06f 0210 	mvn.w	r2, #16
 8003112:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2208      	movs	r2, #8
 8003118:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003124:	2b00      	cmp	r3, #0
 8003126:	d003      	beq.n	8003130 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 f93b 	bl	80033a4 <HAL_TIM_IC_CaptureCallback>
 800312e:	e005      	b.n	800313c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 f92d 	bl	8003390 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f93e 	bl	80033b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00c      	beq.n	8003166 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	d007      	beq.n	8003166 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f06f 0201 	mvn.w	r2, #1
 800315e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f002 f9af 	bl	80054c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800316c:	2b00      	cmp	r3, #0
 800316e:	d00c      	beq.n	800318a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003176:	2b00      	cmp	r3, #0
 8003178:	d007      	beq.n	800318a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003182:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 fb05 	bl	8003794 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00c      	beq.n	80031ae <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800319a:	2b00      	cmp	r3, #0
 800319c:	d007      	beq.n	80031ae <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80031a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 fafd 	bl	80037a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00c      	beq.n	80031d2 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d007      	beq.n	80031d2 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 f8fd 	bl	80033cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	f003 0320 	and.w	r3, r3, #32
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00c      	beq.n	80031f6 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f003 0320 	and.w	r3, r3, #32
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d007      	beq.n	80031f6 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f06f 0220 	mvn.w	r2, #32
 80031ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 fac5 	bl	8003780 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031f6:	bf00      	nop
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b084      	sub	sp, #16
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
 8003206:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003208:	2300      	movs	r3, #0
 800320a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003212:	2b01      	cmp	r3, #1
 8003214:	d101      	bne.n	800321a <HAL_TIM_ConfigClockSource+0x1c>
 8003216:	2302      	movs	r3, #2
 8003218:	e0b6      	b.n	8003388 <HAL_TIM_ConfigClockSource+0x18a>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2202      	movs	r2, #2
 8003226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003238:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800323c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003244:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68ba      	ldr	r2, [r7, #8]
 800324c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003256:	d03e      	beq.n	80032d6 <HAL_TIM_ConfigClockSource+0xd8>
 8003258:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800325c:	f200 8087 	bhi.w	800336e <HAL_TIM_ConfigClockSource+0x170>
 8003260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003264:	f000 8086 	beq.w	8003374 <HAL_TIM_ConfigClockSource+0x176>
 8003268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800326c:	d87f      	bhi.n	800336e <HAL_TIM_ConfigClockSource+0x170>
 800326e:	2b70      	cmp	r3, #112	; 0x70
 8003270:	d01a      	beq.n	80032a8 <HAL_TIM_ConfigClockSource+0xaa>
 8003272:	2b70      	cmp	r3, #112	; 0x70
 8003274:	d87b      	bhi.n	800336e <HAL_TIM_ConfigClockSource+0x170>
 8003276:	2b60      	cmp	r3, #96	; 0x60
 8003278:	d050      	beq.n	800331c <HAL_TIM_ConfigClockSource+0x11e>
 800327a:	2b60      	cmp	r3, #96	; 0x60
 800327c:	d877      	bhi.n	800336e <HAL_TIM_ConfigClockSource+0x170>
 800327e:	2b50      	cmp	r3, #80	; 0x50
 8003280:	d03c      	beq.n	80032fc <HAL_TIM_ConfigClockSource+0xfe>
 8003282:	2b50      	cmp	r3, #80	; 0x50
 8003284:	d873      	bhi.n	800336e <HAL_TIM_ConfigClockSource+0x170>
 8003286:	2b40      	cmp	r3, #64	; 0x40
 8003288:	d058      	beq.n	800333c <HAL_TIM_ConfigClockSource+0x13e>
 800328a:	2b40      	cmp	r3, #64	; 0x40
 800328c:	d86f      	bhi.n	800336e <HAL_TIM_ConfigClockSource+0x170>
 800328e:	2b30      	cmp	r3, #48	; 0x30
 8003290:	d064      	beq.n	800335c <HAL_TIM_ConfigClockSource+0x15e>
 8003292:	2b30      	cmp	r3, #48	; 0x30
 8003294:	d86b      	bhi.n	800336e <HAL_TIM_ConfigClockSource+0x170>
 8003296:	2b20      	cmp	r3, #32
 8003298:	d060      	beq.n	800335c <HAL_TIM_ConfigClockSource+0x15e>
 800329a:	2b20      	cmp	r3, #32
 800329c:	d867      	bhi.n	800336e <HAL_TIM_ConfigClockSource+0x170>
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d05c      	beq.n	800335c <HAL_TIM_ConfigClockSource+0x15e>
 80032a2:	2b10      	cmp	r3, #16
 80032a4:	d05a      	beq.n	800335c <HAL_TIM_ConfigClockSource+0x15e>
 80032a6:	e062      	b.n	800336e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6818      	ldr	r0, [r3, #0]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	6899      	ldr	r1, [r3, #8]
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	f000 f9b6 	bl	8003628 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032ca:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	609a      	str	r2, [r3, #8]
      break;
 80032d4:	e04f      	b.n	8003376 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6818      	ldr	r0, [r3, #0]
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	6899      	ldr	r1, [r3, #8]
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	f000 f99f 	bl	8003628 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032f8:	609a      	str	r2, [r3, #8]
      break;
 80032fa:	e03c      	b.n	8003376 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6818      	ldr	r0, [r3, #0]
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	6859      	ldr	r1, [r3, #4]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	461a      	mov	r2, r3
 800330a:	f000 f913 	bl	8003534 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2150      	movs	r1, #80	; 0x50
 8003314:	4618      	mov	r0, r3
 8003316:	f000 f96c 	bl	80035f2 <TIM_ITRx_SetConfig>
      break;
 800331a:	e02c      	b.n	8003376 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6818      	ldr	r0, [r3, #0]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	6859      	ldr	r1, [r3, #4]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	461a      	mov	r2, r3
 800332a:	f000 f932 	bl	8003592 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2160      	movs	r1, #96	; 0x60
 8003334:	4618      	mov	r0, r3
 8003336:	f000 f95c 	bl	80035f2 <TIM_ITRx_SetConfig>
      break;
 800333a:	e01c      	b.n	8003376 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6818      	ldr	r0, [r3, #0]
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	6859      	ldr	r1, [r3, #4]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	461a      	mov	r2, r3
 800334a:	f000 f8f3 	bl	8003534 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2140      	movs	r1, #64	; 0x40
 8003354:	4618      	mov	r0, r3
 8003356:	f000 f94c 	bl	80035f2 <TIM_ITRx_SetConfig>
      break;
 800335a:	e00c      	b.n	8003376 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4619      	mov	r1, r3
 8003366:	4610      	mov	r0, r2
 8003368:	f000 f943 	bl	80035f2 <TIM_ITRx_SetConfig>
      break;
 800336c:	e003      	b.n	8003376 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	73fb      	strb	r3, [r7, #15]
      break;
 8003372:	e000      	b.n	8003376 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003374:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003386:	7bfb      	ldrb	r3, [r7, #15]
}
 8003388:	4618      	mov	r0, r3
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a48      	ldr	r2, [pc, #288]	; (8003514 <TIM_Base_SetConfig+0x134>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d013      	beq.n	8003420 <TIM_Base_SetConfig+0x40>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033fe:	d00f      	beq.n	8003420 <TIM_Base_SetConfig+0x40>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a45      	ldr	r2, [pc, #276]	; (8003518 <TIM_Base_SetConfig+0x138>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d00b      	beq.n	8003420 <TIM_Base_SetConfig+0x40>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a44      	ldr	r2, [pc, #272]	; (800351c <TIM_Base_SetConfig+0x13c>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d007      	beq.n	8003420 <TIM_Base_SetConfig+0x40>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a43      	ldr	r2, [pc, #268]	; (8003520 <TIM_Base_SetConfig+0x140>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d003      	beq.n	8003420 <TIM_Base_SetConfig+0x40>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a42      	ldr	r2, [pc, #264]	; (8003524 <TIM_Base_SetConfig+0x144>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d108      	bne.n	8003432 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003426:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	4313      	orrs	r3, r2
 8003430:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a37      	ldr	r2, [pc, #220]	; (8003514 <TIM_Base_SetConfig+0x134>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d01f      	beq.n	800347a <TIM_Base_SetConfig+0x9a>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003440:	d01b      	beq.n	800347a <TIM_Base_SetConfig+0x9a>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a34      	ldr	r2, [pc, #208]	; (8003518 <TIM_Base_SetConfig+0x138>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d017      	beq.n	800347a <TIM_Base_SetConfig+0x9a>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a33      	ldr	r2, [pc, #204]	; (800351c <TIM_Base_SetConfig+0x13c>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d013      	beq.n	800347a <TIM_Base_SetConfig+0x9a>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a32      	ldr	r2, [pc, #200]	; (8003520 <TIM_Base_SetConfig+0x140>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d00f      	beq.n	800347a <TIM_Base_SetConfig+0x9a>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a32      	ldr	r2, [pc, #200]	; (8003528 <TIM_Base_SetConfig+0x148>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d00b      	beq.n	800347a <TIM_Base_SetConfig+0x9a>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a31      	ldr	r2, [pc, #196]	; (800352c <TIM_Base_SetConfig+0x14c>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d007      	beq.n	800347a <TIM_Base_SetConfig+0x9a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a30      	ldr	r2, [pc, #192]	; (8003530 <TIM_Base_SetConfig+0x150>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d003      	beq.n	800347a <TIM_Base_SetConfig+0x9a>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a2b      	ldr	r2, [pc, #172]	; (8003524 <TIM_Base_SetConfig+0x144>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d108      	bne.n	800348c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003480:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	4313      	orrs	r3, r2
 800348a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	4313      	orrs	r3, r2
 8003498:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a18      	ldr	r2, [pc, #96]	; (8003514 <TIM_Base_SetConfig+0x134>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d013      	beq.n	80034e0 <TIM_Base_SetConfig+0x100>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a19      	ldr	r2, [pc, #100]	; (8003520 <TIM_Base_SetConfig+0x140>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d00f      	beq.n	80034e0 <TIM_Base_SetConfig+0x100>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a19      	ldr	r2, [pc, #100]	; (8003528 <TIM_Base_SetConfig+0x148>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d00b      	beq.n	80034e0 <TIM_Base_SetConfig+0x100>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a18      	ldr	r2, [pc, #96]	; (800352c <TIM_Base_SetConfig+0x14c>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d007      	beq.n	80034e0 <TIM_Base_SetConfig+0x100>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a17      	ldr	r2, [pc, #92]	; (8003530 <TIM_Base_SetConfig+0x150>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d003      	beq.n	80034e0 <TIM_Base_SetConfig+0x100>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a12      	ldr	r2, [pc, #72]	; (8003524 <TIM_Base_SetConfig+0x144>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d103      	bne.n	80034e8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	691a      	ldr	r2, [r3, #16]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d105      	bne.n	8003506 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	f023 0201 	bic.w	r2, r3, #1
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	611a      	str	r2, [r3, #16]
  }
}
 8003506:	bf00      	nop
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	40012c00 	.word	0x40012c00
 8003518:	40000400 	.word	0x40000400
 800351c:	40000800 	.word	0x40000800
 8003520:	40013400 	.word	0x40013400
 8003524:	40015000 	.word	0x40015000
 8003528:	40014000 	.word	0x40014000
 800352c:	40014400 	.word	0x40014400
 8003530:	40014800 	.word	0x40014800

08003534 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003534:	b480      	push	{r7}
 8003536:	b087      	sub	sp, #28
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	f023 0201 	bic.w	r2, r3, #1
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800355e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	4313      	orrs	r3, r2
 8003568:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f023 030a 	bic.w	r3, r3, #10
 8003570:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	4313      	orrs	r3, r2
 8003578:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	621a      	str	r2, [r3, #32]
}
 8003586:	bf00      	nop
 8003588:	371c      	adds	r7, #28
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr

08003592 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003592:	b480      	push	{r7}
 8003594:	b087      	sub	sp, #28
 8003596:	af00      	add	r7, sp, #0
 8003598:	60f8      	str	r0, [r7, #12]
 800359a:	60b9      	str	r1, [r7, #8]
 800359c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	f023 0210 	bic.w	r2, r3, #16
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	031b      	lsls	r3, r3, #12
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	011b      	lsls	r3, r3, #4
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	621a      	str	r2, [r3, #32]
}
 80035e6:	bf00      	nop
 80035e8:	371c      	adds	r7, #28
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035f2:	b480      	push	{r7}
 80035f4:	b085      	sub	sp, #20
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
 80035fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003608:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	4313      	orrs	r3, r2
 8003610:	f043 0307 	orr.w	r3, r3, #7
 8003614:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	609a      	str	r2, [r3, #8]
}
 800361c:	bf00      	nop
 800361e:	3714      	adds	r7, #20
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003628:	b480      	push	{r7}
 800362a:	b087      	sub	sp, #28
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
 8003634:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003642:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	021a      	lsls	r2, r3, #8
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	431a      	orrs	r2, r3
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	4313      	orrs	r3, r2
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	4313      	orrs	r3, r2
 8003654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	609a      	str	r2, [r3, #8]
}
 800365c:	bf00      	nop
 800365e:	371c      	adds	r7, #28
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003678:	2b01      	cmp	r3, #1
 800367a:	d101      	bne.n	8003680 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800367c:	2302      	movs	r3, #2
 800367e:	e06d      	b.n	800375c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2202      	movs	r2, #2
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a30      	ldr	r2, [pc, #192]	; (8003768 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d009      	beq.n	80036be <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a2f      	ldr	r2, [pc, #188]	; (800376c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d004      	beq.n	80036be <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a2d      	ldr	r2, [pc, #180]	; (8003770 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d108      	bne.n	80036d0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80036c4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	4313      	orrs	r3, r2
 80036e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a1e      	ldr	r2, [pc, #120]	; (8003768 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d01d      	beq.n	8003730 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036fc:	d018      	beq.n	8003730 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a1c      	ldr	r2, [pc, #112]	; (8003774 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d013      	beq.n	8003730 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a1a      	ldr	r2, [pc, #104]	; (8003778 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d00e      	beq.n	8003730 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a15      	ldr	r2, [pc, #84]	; (800376c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d009      	beq.n	8003730 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a16      	ldr	r2, [pc, #88]	; (800377c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d004      	beq.n	8003730 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a11      	ldr	r2, [pc, #68]	; (8003770 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d10c      	bne.n	800374a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003736:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	4313      	orrs	r3, r2
 8003740:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3714      	adds	r7, #20
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	40012c00 	.word	0x40012c00
 800376c:	40013400 	.word	0x40013400
 8003770:	40015000 	.word	0x40015000
 8003774:	40000400 	.word	0x40000400
 8003778:	40000800 	.word	0x40000800
 800377c:	40014000 	.word	0x40014000

08003780 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e040      	b.n	8003850 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d106      	bne.n	80037e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f7fc ffda 	bl	8000798 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2224      	movs	r2, #36	; 0x24
 80037e8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0201 	bic.w	r2, r2, #1
 80037f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d002      	beq.n	8003808 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 fdcc 	bl	80043a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 fbf5 	bl	8003ff8 <UART_SetConfig>
 800380e:	4603      	mov	r3, r0
 8003810:	2b01      	cmp	r3, #1
 8003812:	d101      	bne.n	8003818 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e01b      	b.n	8003850 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003826:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689a      	ldr	r2, [r3, #8]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003836:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 0201 	orr.w	r2, r2, #1
 8003846:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 fe4b 	bl	80044e4 <UART_CheckIdleState>
 800384e:	4603      	mov	r3, r0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b08a      	sub	sp, #40	; 0x28
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	4613      	mov	r3, r2
 8003864:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800386a:	2b20      	cmp	r3, #32
 800386c:	d165      	bne.n	800393a <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d002      	beq.n	800387a <HAL_UART_Transmit_DMA+0x22>
 8003874:	88fb      	ldrh	r3, [r7, #6]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e05e      	b.n	800393c <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	68ba      	ldr	r2, [r7, #8]
 8003882:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	88fa      	ldrh	r2, [r7, #6]
 8003888:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	88fa      	ldrh	r2, [r7, #6]
 8003890:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2221      	movs	r2, #33	; 0x21
 80038a0:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d027      	beq.n	80038fa <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ae:	4a25      	ldr	r2, [pc, #148]	; (8003944 <HAL_UART_Transmit_DMA+0xec>)
 80038b0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b6:	4a24      	ldr	r2, [pc, #144]	; (8003948 <HAL_UART_Transmit_DMA+0xf0>)
 80038b8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038be:	4a23      	ldr	r2, [pc, #140]	; (800394c <HAL_UART_Transmit_DMA+0xf4>)
 80038c0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c6:	2200      	movs	r2, #0
 80038c8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038d2:	4619      	mov	r1, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	3328      	adds	r3, #40	; 0x28
 80038da:	461a      	mov	r2, r3
 80038dc:	88fb      	ldrh	r3, [r7, #6]
 80038de:	f7fd fa47 	bl	8000d70 <HAL_DMA_Start_IT>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d008      	beq.n	80038fa <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2210      	movs	r2, #16
 80038ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2220      	movs	r2, #32
 80038f4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e020      	b.n	800393c <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2240      	movs	r2, #64	; 0x40
 8003900:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	3308      	adds	r3, #8
 8003908:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	e853 3f00 	ldrex	r3, [r3]
 8003910:	613b      	str	r3, [r7, #16]
   return(result);
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003918:	627b      	str	r3, [r7, #36]	; 0x24
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	3308      	adds	r3, #8
 8003920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003922:	623a      	str	r2, [r7, #32]
 8003924:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003926:	69f9      	ldr	r1, [r7, #28]
 8003928:	6a3a      	ldr	r2, [r7, #32]
 800392a:	e841 2300 	strex	r3, r2, [r1]
 800392e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1e5      	bne.n	8003902 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8003936:	2300      	movs	r3, #0
 8003938:	e000      	b.n	800393c <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800393a:	2302      	movs	r3, #2
  }
}
 800393c:	4618      	mov	r0, r3
 800393e:	3728      	adds	r7, #40	; 0x28
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	08004965 	.word	0x08004965
 8003948:	080049f9 	.word	0x080049f9
 800394c:	08004b79 	.word	0x08004b79

08003950 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b08a      	sub	sp, #40	; 0x28
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	4613      	mov	r3, r2
 800395c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003964:	2b20      	cmp	r3, #32
 8003966:	d132      	bne.n	80039ce <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d002      	beq.n	8003974 <HAL_UART_Receive_DMA+0x24>
 800396e:	88fb      	ldrh	r3, [r7, #6]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d101      	bne.n	8003978 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e02b      	b.n	80039d0 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d018      	beq.n	80039be <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	e853 3f00 	ldrex	r3, [r3]
 8003998:	613b      	str	r3, [r7, #16]
   return(result);
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039a0:	627b      	str	r3, [r7, #36]	; 0x24
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	461a      	mov	r2, r3
 80039a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039aa:	623b      	str	r3, [r7, #32]
 80039ac:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ae:	69f9      	ldr	r1, [r7, #28]
 80039b0:	6a3a      	ldr	r2, [r7, #32]
 80039b2:	e841 2300 	strex	r3, r2, [r1]
 80039b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1e6      	bne.n	800398c <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80039be:	88fb      	ldrh	r3, [r7, #6]
 80039c0:	461a      	mov	r2, r3
 80039c2:	68b9      	ldr	r1, [r7, #8]
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f000 fea3 	bl	8004710 <UART_Start_Receive_DMA>
 80039ca:	4603      	mov	r3, r0
 80039cc:	e000      	b.n	80039d0 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 80039ce:	2302      	movs	r3, #2
  }
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3728      	adds	r7, #40	; 0x28
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b0ba      	sub	sp, #232	; 0xe8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80039fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003a02:	f640 030f 	movw	r3, #2063	; 0x80f
 8003a06:	4013      	ands	r3, r2
 8003a08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003a0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d115      	bne.n	8003a40 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a18:	f003 0320 	and.w	r3, r3, #32
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00f      	beq.n	8003a40 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a24:	f003 0320 	and.w	r3, r3, #32
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d009      	beq.n	8003a40 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 82ab 	beq.w	8003f8c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	4798      	blx	r3
      }
      return;
 8003a3e:	e2a5      	b.n	8003f8c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003a40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f000 8117 	beq.w	8003c78 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003a4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d106      	bne.n	8003a64 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003a56:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003a5a:	4b85      	ldr	r3, [pc, #532]	; (8003c70 <HAL_UART_IRQHandler+0x298>)
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f000 810a 	beq.w	8003c78 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d011      	beq.n	8003a94 <HAL_UART_IRQHandler+0xbc>
 8003a70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00b      	beq.n	8003a94 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2201      	movs	r2, #1
 8003a82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a8a:	f043 0201 	orr.w	r2, r3, #1
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d011      	beq.n	8003ac4 <HAL_UART_IRQHandler+0xec>
 8003aa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00b      	beq.n	8003ac4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aba:	f043 0204 	orr.w	r2, r3, #4
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ac8:	f003 0304 	and.w	r3, r3, #4
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d011      	beq.n	8003af4 <HAL_UART_IRQHandler+0x11c>
 8003ad0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00b      	beq.n	8003af4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2204      	movs	r2, #4
 8003ae2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aea:	f043 0202 	orr.w	r2, r3, #2
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003af8:	f003 0308 	and.w	r3, r3, #8
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d017      	beq.n	8003b30 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b04:	f003 0320 	and.w	r3, r3, #32
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d105      	bne.n	8003b18 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003b0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b10:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00b      	beq.n	8003b30 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2208      	movs	r2, #8
 8003b1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b26:	f043 0208 	orr.w	r2, r3, #8
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d012      	beq.n	8003b62 <HAL_UART_IRQHandler+0x18a>
 8003b3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00c      	beq.n	8003b62 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b58:	f043 0220 	orr.w	r2, r3, #32
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f000 8211 	beq.w	8003f90 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b72:	f003 0320 	and.w	r3, r3, #32
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00d      	beq.n	8003b96 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b7e:	f003 0320 	and.w	r3, r3, #32
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d007      	beq.n	8003b96 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b9c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003baa:	2b40      	cmp	r3, #64	; 0x40
 8003bac:	d005      	beq.n	8003bba <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003bae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003bb2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d04f      	beq.n	8003c5a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 fe6e 	bl	800489c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bca:	2b40      	cmp	r3, #64	; 0x40
 8003bcc:	d141      	bne.n	8003c52 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	3308      	adds	r3, #8
 8003bd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003bdc:	e853 3f00 	ldrex	r3, [r3]
 8003be0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003be4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003be8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	3308      	adds	r3, #8
 8003bf6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003bfa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003bfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c0a:	e841 2300 	strex	r3, r2, [r1]
 8003c0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003c12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1d9      	bne.n	8003bce <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d013      	beq.n	8003c4a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c26:	4a13      	ldr	r2, [pc, #76]	; (8003c74 <HAL_UART_IRQHandler+0x29c>)
 8003c28:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7fd f93b 	bl	8000eaa <HAL_DMA_Abort_IT>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d017      	beq.n	8003c6a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003c44:	4610      	mov	r0, r2
 8003c46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c48:	e00f      	b.n	8003c6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f9be 	bl	8003fcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c50:	e00b      	b.n	8003c6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f9ba 	bl	8003fcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c58:	e007      	b.n	8003c6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f9b6 	bl	8003fcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003c68:	e192      	b.n	8003f90 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c6a:	bf00      	nop
    return;
 8003c6c:	e190      	b.n	8003f90 <HAL_UART_IRQHandler+0x5b8>
 8003c6e:	bf00      	nop
 8003c70:	04000120 	.word	0x04000120
 8003c74:	08004bf7 	.word	0x08004bf7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	f040 814b 	bne.w	8003f18 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c86:	f003 0310 	and.w	r3, r3, #16
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f000 8144 	beq.w	8003f18 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c94:	f003 0310 	and.w	r3, r3, #16
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 813d 	beq.w	8003f18 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2210      	movs	r2, #16
 8003ca4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb0:	2b40      	cmp	r3, #64	; 0x40
 8003cb2:	f040 80b5 	bne.w	8003e20 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003cc2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f000 8164 	beq.w	8003f94 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003cd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	f080 815c 	bcs.w	8003f94 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ce2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	2b20      	cmp	r3, #32
 8003cee:	f000 8086 	beq.w	8003dfe <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cfe:	e853 3f00 	ldrex	r3, [r3]
 8003d02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003d06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	461a      	mov	r2, r3
 8003d18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003d1c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003d20:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d24:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d28:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d2c:	e841 2300 	strex	r3, r2, [r1]
 8003d30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1da      	bne.n	8003cf2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	3308      	adds	r3, #8
 8003d42:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d46:	e853 3f00 	ldrex	r3, [r3]
 8003d4a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d4e:	f023 0301 	bic.w	r3, r3, #1
 8003d52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	3308      	adds	r3, #8
 8003d5c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d60:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d64:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d66:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d68:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d6c:	e841 2300 	strex	r3, r2, [r1]
 8003d70:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1e1      	bne.n	8003d3c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	3308      	adds	r3, #8
 8003d7e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d82:	e853 3f00 	ldrex	r3, [r3]
 8003d86:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	3308      	adds	r3, #8
 8003d98:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d9c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d9e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003da2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003da4:	e841 2300 	strex	r3, r2, [r1]
 8003da8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003daa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1e3      	bne.n	8003d78 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2220      	movs	r2, #32
 8003db4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dc6:	e853 3f00 	ldrex	r3, [r3]
 8003dca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003dcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dce:	f023 0310 	bic.w	r3, r3, #16
 8003dd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003de0:	65bb      	str	r3, [r7, #88]	; 0x58
 8003de2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003de6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003de8:	e841 2300 	strex	r3, r2, [r1]
 8003dec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003dee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1e4      	bne.n	8003dbe <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7fd f818 	bl	8000e2e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2202      	movs	r2, #2
 8003e02:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	4619      	mov	r1, r3
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 f8e1 	bl	8003fe0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e1e:	e0b9      	b.n	8003f94 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 80ab 	beq.w	8003f98 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003e42:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f000 80a6 	beq.w	8003f98 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e54:	e853 3f00 	ldrex	r3, [r3]
 8003e58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	461a      	mov	r2, r3
 8003e6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e6e:	647b      	str	r3, [r7, #68]	; 0x44
 8003e70:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e76:	e841 2300 	strex	r3, r2, [r1]
 8003e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1e4      	bne.n	8003e4c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	3308      	adds	r3, #8
 8003e88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	e853 3f00 	ldrex	r3, [r3]
 8003e90:	623b      	str	r3, [r7, #32]
   return(result);
 8003e92:	6a3b      	ldr	r3, [r7, #32]
 8003e94:	f023 0301 	bic.w	r3, r3, #1
 8003e98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	3308      	adds	r3, #8
 8003ea2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003ea6:	633a      	str	r2, [r7, #48]	; 0x30
 8003ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003eac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eae:	e841 2300 	strex	r3, r2, [r1]
 8003eb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1e3      	bne.n	8003e82 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	e853 3f00 	ldrex	r3, [r3]
 8003eda:	60fb      	str	r3, [r7, #12]
   return(result);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f023 0310 	bic.w	r3, r3, #16
 8003ee2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	461a      	mov	r2, r3
 8003eec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003ef0:	61fb      	str	r3, [r7, #28]
 8003ef2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef4:	69b9      	ldr	r1, [r7, #24]
 8003ef6:	69fa      	ldr	r2, [r7, #28]
 8003ef8:	e841 2300 	strex	r3, r2, [r1]
 8003efc:	617b      	str	r3, [r7, #20]
   return(result);
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1e4      	bne.n	8003ece <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2202      	movs	r2, #2
 8003f08:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f0e:	4619      	mov	r1, r3
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 f865 	bl	8003fe0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f16:	e03f      	b.n	8003f98 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00e      	beq.n	8003f42 <HAL_UART_IRQHandler+0x56a>
 8003f24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d008      	beq.n	8003f42 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003f38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 fe9b 	bl	8004c76 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003f40:	e02d      	b.n	8003f9e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00e      	beq.n	8003f6c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003f4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d008      	beq.n	8003f6c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d01c      	beq.n	8003f9c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	4798      	blx	r3
    }
    return;
 8003f6a:	e017      	b.n	8003f9c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003f6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d012      	beq.n	8003f9e <HAL_UART_IRQHandler+0x5c6>
 8003f78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00c      	beq.n	8003f9e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 fe4c 	bl	8004c22 <UART_EndTransmit_IT>
    return;
 8003f8a:	e008      	b.n	8003f9e <HAL_UART_IRQHandler+0x5c6>
      return;
 8003f8c:	bf00      	nop
 8003f8e:	e006      	b.n	8003f9e <HAL_UART_IRQHandler+0x5c6>
    return;
 8003f90:	bf00      	nop
 8003f92:	e004      	b.n	8003f9e <HAL_UART_IRQHandler+0x5c6>
      return;
 8003f94:	bf00      	nop
 8003f96:	e002      	b.n	8003f9e <HAL_UART_IRQHandler+0x5c6>
      return;
 8003f98:	bf00      	nop
 8003f9a:	e000      	b.n	8003f9e <HAL_UART_IRQHandler+0x5c6>
    return;
 8003f9c:	bf00      	nop
  }

}
 8003f9e:	37e8      	adds	r7, #232	; 0xe8
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	460b      	mov	r3, r1
 8003fea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b088      	sub	sp, #32
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004000:	2300      	movs	r3, #0
 8004002:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	431a      	orrs	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	431a      	orrs	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	4313      	orrs	r3, r2
 800401a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	4b92      	ldr	r3, [pc, #584]	; (800426c <UART_SetConfig+0x274>)
 8004024:	4013      	ands	r3, r2
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	6812      	ldr	r2, [r2, #0]
 800402a:	6979      	ldr	r1, [r7, #20]
 800402c:	430b      	orrs	r3, r1
 800402e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68da      	ldr	r2, [r3, #12]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	430a      	orrs	r2, r1
 8004044:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	4313      	orrs	r3, r2
 8004054:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	430a      	orrs	r2, r1
 8004068:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a80      	ldr	r2, [pc, #512]	; (8004270 <UART_SetConfig+0x278>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d120      	bne.n	80040b6 <UART_SetConfig+0xbe>
 8004074:	4b7f      	ldr	r3, [pc, #508]	; (8004274 <UART_SetConfig+0x27c>)
 8004076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004078:	f003 0303 	and.w	r3, r3, #3
 800407c:	2b03      	cmp	r3, #3
 800407e:	d817      	bhi.n	80040b0 <UART_SetConfig+0xb8>
 8004080:	a201      	add	r2, pc, #4	; (adr r2, 8004088 <UART_SetConfig+0x90>)
 8004082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004086:	bf00      	nop
 8004088:	08004099 	.word	0x08004099
 800408c:	080040a5 	.word	0x080040a5
 8004090:	080040ab 	.word	0x080040ab
 8004094:	0800409f 	.word	0x0800409f
 8004098:	2301      	movs	r3, #1
 800409a:	77fb      	strb	r3, [r7, #31]
 800409c:	e0b5      	b.n	800420a <UART_SetConfig+0x212>
 800409e:	2302      	movs	r3, #2
 80040a0:	77fb      	strb	r3, [r7, #31]
 80040a2:	e0b2      	b.n	800420a <UART_SetConfig+0x212>
 80040a4:	2304      	movs	r3, #4
 80040a6:	77fb      	strb	r3, [r7, #31]
 80040a8:	e0af      	b.n	800420a <UART_SetConfig+0x212>
 80040aa:	2308      	movs	r3, #8
 80040ac:	77fb      	strb	r3, [r7, #31]
 80040ae:	e0ac      	b.n	800420a <UART_SetConfig+0x212>
 80040b0:	2310      	movs	r3, #16
 80040b2:	77fb      	strb	r3, [r7, #31]
 80040b4:	e0a9      	b.n	800420a <UART_SetConfig+0x212>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a6f      	ldr	r2, [pc, #444]	; (8004278 <UART_SetConfig+0x280>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d124      	bne.n	800410a <UART_SetConfig+0x112>
 80040c0:	4b6c      	ldr	r3, [pc, #432]	; (8004274 <UART_SetConfig+0x27c>)
 80040c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040cc:	d011      	beq.n	80040f2 <UART_SetConfig+0xfa>
 80040ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040d2:	d817      	bhi.n	8004104 <UART_SetConfig+0x10c>
 80040d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040d8:	d011      	beq.n	80040fe <UART_SetConfig+0x106>
 80040da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040de:	d811      	bhi.n	8004104 <UART_SetConfig+0x10c>
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d003      	beq.n	80040ec <UART_SetConfig+0xf4>
 80040e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e8:	d006      	beq.n	80040f8 <UART_SetConfig+0x100>
 80040ea:	e00b      	b.n	8004104 <UART_SetConfig+0x10c>
 80040ec:	2300      	movs	r3, #0
 80040ee:	77fb      	strb	r3, [r7, #31]
 80040f0:	e08b      	b.n	800420a <UART_SetConfig+0x212>
 80040f2:	2302      	movs	r3, #2
 80040f4:	77fb      	strb	r3, [r7, #31]
 80040f6:	e088      	b.n	800420a <UART_SetConfig+0x212>
 80040f8:	2304      	movs	r3, #4
 80040fa:	77fb      	strb	r3, [r7, #31]
 80040fc:	e085      	b.n	800420a <UART_SetConfig+0x212>
 80040fe:	2308      	movs	r3, #8
 8004100:	77fb      	strb	r3, [r7, #31]
 8004102:	e082      	b.n	800420a <UART_SetConfig+0x212>
 8004104:	2310      	movs	r3, #16
 8004106:	77fb      	strb	r3, [r7, #31]
 8004108:	e07f      	b.n	800420a <UART_SetConfig+0x212>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a5b      	ldr	r2, [pc, #364]	; (800427c <UART_SetConfig+0x284>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d124      	bne.n	800415e <UART_SetConfig+0x166>
 8004114:	4b57      	ldr	r3, [pc, #348]	; (8004274 <UART_SetConfig+0x27c>)
 8004116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004118:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800411c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004120:	d011      	beq.n	8004146 <UART_SetConfig+0x14e>
 8004122:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004126:	d817      	bhi.n	8004158 <UART_SetConfig+0x160>
 8004128:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800412c:	d011      	beq.n	8004152 <UART_SetConfig+0x15a>
 800412e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004132:	d811      	bhi.n	8004158 <UART_SetConfig+0x160>
 8004134:	2b00      	cmp	r3, #0
 8004136:	d003      	beq.n	8004140 <UART_SetConfig+0x148>
 8004138:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800413c:	d006      	beq.n	800414c <UART_SetConfig+0x154>
 800413e:	e00b      	b.n	8004158 <UART_SetConfig+0x160>
 8004140:	2300      	movs	r3, #0
 8004142:	77fb      	strb	r3, [r7, #31]
 8004144:	e061      	b.n	800420a <UART_SetConfig+0x212>
 8004146:	2302      	movs	r3, #2
 8004148:	77fb      	strb	r3, [r7, #31]
 800414a:	e05e      	b.n	800420a <UART_SetConfig+0x212>
 800414c:	2304      	movs	r3, #4
 800414e:	77fb      	strb	r3, [r7, #31]
 8004150:	e05b      	b.n	800420a <UART_SetConfig+0x212>
 8004152:	2308      	movs	r3, #8
 8004154:	77fb      	strb	r3, [r7, #31]
 8004156:	e058      	b.n	800420a <UART_SetConfig+0x212>
 8004158:	2310      	movs	r3, #16
 800415a:	77fb      	strb	r3, [r7, #31]
 800415c:	e055      	b.n	800420a <UART_SetConfig+0x212>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a47      	ldr	r2, [pc, #284]	; (8004280 <UART_SetConfig+0x288>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d124      	bne.n	80041b2 <UART_SetConfig+0x1ba>
 8004168:	4b42      	ldr	r3, [pc, #264]	; (8004274 <UART_SetConfig+0x27c>)
 800416a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004170:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004174:	d011      	beq.n	800419a <UART_SetConfig+0x1a2>
 8004176:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800417a:	d817      	bhi.n	80041ac <UART_SetConfig+0x1b4>
 800417c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004180:	d011      	beq.n	80041a6 <UART_SetConfig+0x1ae>
 8004182:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004186:	d811      	bhi.n	80041ac <UART_SetConfig+0x1b4>
 8004188:	2b00      	cmp	r3, #0
 800418a:	d003      	beq.n	8004194 <UART_SetConfig+0x19c>
 800418c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004190:	d006      	beq.n	80041a0 <UART_SetConfig+0x1a8>
 8004192:	e00b      	b.n	80041ac <UART_SetConfig+0x1b4>
 8004194:	2300      	movs	r3, #0
 8004196:	77fb      	strb	r3, [r7, #31]
 8004198:	e037      	b.n	800420a <UART_SetConfig+0x212>
 800419a:	2302      	movs	r3, #2
 800419c:	77fb      	strb	r3, [r7, #31]
 800419e:	e034      	b.n	800420a <UART_SetConfig+0x212>
 80041a0:	2304      	movs	r3, #4
 80041a2:	77fb      	strb	r3, [r7, #31]
 80041a4:	e031      	b.n	800420a <UART_SetConfig+0x212>
 80041a6:	2308      	movs	r3, #8
 80041a8:	77fb      	strb	r3, [r7, #31]
 80041aa:	e02e      	b.n	800420a <UART_SetConfig+0x212>
 80041ac:	2310      	movs	r3, #16
 80041ae:	77fb      	strb	r3, [r7, #31]
 80041b0:	e02b      	b.n	800420a <UART_SetConfig+0x212>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a33      	ldr	r2, [pc, #204]	; (8004284 <UART_SetConfig+0x28c>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d124      	bne.n	8004206 <UART_SetConfig+0x20e>
 80041bc:	4b2d      	ldr	r3, [pc, #180]	; (8004274 <UART_SetConfig+0x27c>)
 80041be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80041c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80041c8:	d011      	beq.n	80041ee <UART_SetConfig+0x1f6>
 80041ca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80041ce:	d817      	bhi.n	8004200 <UART_SetConfig+0x208>
 80041d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041d4:	d011      	beq.n	80041fa <UART_SetConfig+0x202>
 80041d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041da:	d811      	bhi.n	8004200 <UART_SetConfig+0x208>
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d003      	beq.n	80041e8 <UART_SetConfig+0x1f0>
 80041e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041e4:	d006      	beq.n	80041f4 <UART_SetConfig+0x1fc>
 80041e6:	e00b      	b.n	8004200 <UART_SetConfig+0x208>
 80041e8:	2300      	movs	r3, #0
 80041ea:	77fb      	strb	r3, [r7, #31]
 80041ec:	e00d      	b.n	800420a <UART_SetConfig+0x212>
 80041ee:	2302      	movs	r3, #2
 80041f0:	77fb      	strb	r3, [r7, #31]
 80041f2:	e00a      	b.n	800420a <UART_SetConfig+0x212>
 80041f4:	2304      	movs	r3, #4
 80041f6:	77fb      	strb	r3, [r7, #31]
 80041f8:	e007      	b.n	800420a <UART_SetConfig+0x212>
 80041fa:	2308      	movs	r3, #8
 80041fc:	77fb      	strb	r3, [r7, #31]
 80041fe:	e004      	b.n	800420a <UART_SetConfig+0x212>
 8004200:	2310      	movs	r3, #16
 8004202:	77fb      	strb	r3, [r7, #31]
 8004204:	e001      	b.n	800420a <UART_SetConfig+0x212>
 8004206:	2310      	movs	r3, #16
 8004208:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004212:	d16b      	bne.n	80042ec <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8004214:	7ffb      	ldrb	r3, [r7, #31]
 8004216:	2b08      	cmp	r3, #8
 8004218:	d838      	bhi.n	800428c <UART_SetConfig+0x294>
 800421a:	a201      	add	r2, pc, #4	; (adr r2, 8004220 <UART_SetConfig+0x228>)
 800421c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004220:	08004245 	.word	0x08004245
 8004224:	0800424d 	.word	0x0800424d
 8004228:	08004255 	.word	0x08004255
 800422c:	0800428d 	.word	0x0800428d
 8004230:	0800425b 	.word	0x0800425b
 8004234:	0800428d 	.word	0x0800428d
 8004238:	0800428d 	.word	0x0800428d
 800423c:	0800428d 	.word	0x0800428d
 8004240:	08004263 	.word	0x08004263
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004244:	f7fe fb80 	bl	8002948 <HAL_RCC_GetPCLK1Freq>
 8004248:	61b8      	str	r0, [r7, #24]
        break;
 800424a:	e024      	b.n	8004296 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800424c:	f7fe fb9e 	bl	800298c <HAL_RCC_GetPCLK2Freq>
 8004250:	61b8      	str	r0, [r7, #24]
        break;
 8004252:	e020      	b.n	8004296 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004254:	4b0c      	ldr	r3, [pc, #48]	; (8004288 <UART_SetConfig+0x290>)
 8004256:	61bb      	str	r3, [r7, #24]
        break;
 8004258:	e01d      	b.n	8004296 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800425a:	f7fe fb15 	bl	8002888 <HAL_RCC_GetSysClockFreq>
 800425e:	61b8      	str	r0, [r7, #24]
        break;
 8004260:	e019      	b.n	8004296 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004266:	61bb      	str	r3, [r7, #24]
        break;
 8004268:	e015      	b.n	8004296 <UART_SetConfig+0x29e>
 800426a:	bf00      	nop
 800426c:	efff69f3 	.word	0xefff69f3
 8004270:	40013800 	.word	0x40013800
 8004274:	40021000 	.word	0x40021000
 8004278:	40004400 	.word	0x40004400
 800427c:	40004800 	.word	0x40004800
 8004280:	40004c00 	.word	0x40004c00
 8004284:	40005000 	.word	0x40005000
 8004288:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800428c:	2300      	movs	r3, #0
 800428e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	77bb      	strb	r3, [r7, #30]
        break;
 8004294:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d073      	beq.n	8004384 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	005a      	lsls	r2, r3, #1
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	085b      	lsrs	r3, r3, #1
 80042a6:	441a      	add	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	2b0f      	cmp	r3, #15
 80042b6:	d916      	bls.n	80042e6 <UART_SetConfig+0x2ee>
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042be:	d212      	bcs.n	80042e6 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	f023 030f 	bic.w	r3, r3, #15
 80042c8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	085b      	lsrs	r3, r3, #1
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	f003 0307 	and.w	r3, r3, #7
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	89fb      	ldrh	r3, [r7, #14]
 80042d8:	4313      	orrs	r3, r2
 80042da:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	89fa      	ldrh	r2, [r7, #14]
 80042e2:	60da      	str	r2, [r3, #12]
 80042e4:	e04e      	b.n	8004384 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	77bb      	strb	r3, [r7, #30]
 80042ea:	e04b      	b.n	8004384 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80042ec:	7ffb      	ldrb	r3, [r7, #31]
 80042ee:	2b08      	cmp	r3, #8
 80042f0:	d827      	bhi.n	8004342 <UART_SetConfig+0x34a>
 80042f2:	a201      	add	r2, pc, #4	; (adr r2, 80042f8 <UART_SetConfig+0x300>)
 80042f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f8:	0800431d 	.word	0x0800431d
 80042fc:	08004325 	.word	0x08004325
 8004300:	0800432d 	.word	0x0800432d
 8004304:	08004343 	.word	0x08004343
 8004308:	08004333 	.word	0x08004333
 800430c:	08004343 	.word	0x08004343
 8004310:	08004343 	.word	0x08004343
 8004314:	08004343 	.word	0x08004343
 8004318:	0800433b 	.word	0x0800433b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800431c:	f7fe fb14 	bl	8002948 <HAL_RCC_GetPCLK1Freq>
 8004320:	61b8      	str	r0, [r7, #24]
        break;
 8004322:	e013      	b.n	800434c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004324:	f7fe fb32 	bl	800298c <HAL_RCC_GetPCLK2Freq>
 8004328:	61b8      	str	r0, [r7, #24]
        break;
 800432a:	e00f      	b.n	800434c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800432c:	4b1b      	ldr	r3, [pc, #108]	; (800439c <UART_SetConfig+0x3a4>)
 800432e:	61bb      	str	r3, [r7, #24]
        break;
 8004330:	e00c      	b.n	800434c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004332:	f7fe faa9 	bl	8002888 <HAL_RCC_GetSysClockFreq>
 8004336:	61b8      	str	r0, [r7, #24]
        break;
 8004338:	e008      	b.n	800434c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800433a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800433e:	61bb      	str	r3, [r7, #24]
        break;
 8004340:	e004      	b.n	800434c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004342:	2300      	movs	r3, #0
 8004344:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	77bb      	strb	r3, [r7, #30]
        break;
 800434a:	bf00      	nop
    }

    if (pclk != 0U)
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d018      	beq.n	8004384 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	085a      	lsrs	r2, r3, #1
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	441a      	add	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	fbb2 f3f3 	udiv	r3, r2, r3
 8004364:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	2b0f      	cmp	r3, #15
 800436a:	d909      	bls.n	8004380 <UART_SetConfig+0x388>
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004372:	d205      	bcs.n	8004380 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	b29a      	uxth	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	60da      	str	r2, [r3, #12]
 800437e:	e001      	b.n	8004384 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004390:	7fbb      	ldrb	r3, [r7, #30]
}
 8004392:	4618      	mov	r0, r3
 8004394:	3720      	adds	r7, #32
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	007a1200 	.word	0x007a1200

080043a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	f003 0308 	and.w	r3, r3, #8
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00a      	beq.n	80043ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00a      	beq.n	80043ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00a      	beq.n	800440e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004412:	f003 0304 	and.w	r3, r3, #4
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00a      	beq.n	8004430 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	f003 0310 	and.w	r3, r3, #16
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00a      	beq.n	8004452 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004456:	f003 0320 	and.w	r3, r3, #32
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00a      	beq.n	8004474 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	430a      	orrs	r2, r1
 8004472:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800447c:	2b00      	cmp	r3, #0
 800447e:	d01a      	beq.n	80044b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800449e:	d10a      	bne.n	80044b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00a      	beq.n	80044d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	430a      	orrs	r2, r1
 80044d6:	605a      	str	r2, [r3, #4]
  }
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b098      	sub	sp, #96	; 0x60
 80044e8:	af02      	add	r7, sp, #8
 80044ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044f4:	f7fc fad8 	bl	8000aa8 <HAL_GetTick>
 80044f8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0308 	and.w	r3, r3, #8
 8004504:	2b08      	cmp	r3, #8
 8004506:	d12e      	bne.n	8004566 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004508:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800450c:	9300      	str	r3, [sp, #0]
 800450e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004510:	2200      	movs	r2, #0
 8004512:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f88c 	bl	8004634 <UART_WaitOnFlagUntilTimeout>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d021      	beq.n	8004566 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800452a:	e853 3f00 	ldrex	r3, [r3]
 800452e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004532:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004536:	653b      	str	r3, [r7, #80]	; 0x50
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	461a      	mov	r2, r3
 800453e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004540:	647b      	str	r3, [r7, #68]	; 0x44
 8004542:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004544:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004546:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004548:	e841 2300 	strex	r3, r2, [r1]
 800454c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800454e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1e6      	bne.n	8004522 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2220      	movs	r2, #32
 8004558:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e062      	b.n	800462c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0304 	and.w	r3, r3, #4
 8004570:	2b04      	cmp	r3, #4
 8004572:	d149      	bne.n	8004608 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004574:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004578:	9300      	str	r3, [sp, #0]
 800457a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800457c:	2200      	movs	r2, #0
 800457e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f856 	bl	8004634 <UART_WaitOnFlagUntilTimeout>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d03c      	beq.n	8004608 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004596:	e853 3f00 	ldrex	r3, [r3]
 800459a:	623b      	str	r3, [r7, #32]
   return(result);
 800459c:	6a3b      	ldr	r3, [r7, #32]
 800459e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	461a      	mov	r2, r3
 80045aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045ac:	633b      	str	r3, [r7, #48]	; 0x30
 80045ae:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045b4:	e841 2300 	strex	r3, r2, [r1]
 80045b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80045ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1e6      	bne.n	800458e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	3308      	adds	r3, #8
 80045c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	e853 3f00 	ldrex	r3, [r3]
 80045ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f023 0301 	bic.w	r3, r3, #1
 80045d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	3308      	adds	r3, #8
 80045de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045e0:	61fa      	str	r2, [r7, #28]
 80045e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e4:	69b9      	ldr	r1, [r7, #24]
 80045e6:	69fa      	ldr	r2, [r7, #28]
 80045e8:	e841 2300 	strex	r3, r2, [r1]
 80045ec:	617b      	str	r3, [r7, #20]
   return(result);
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1e5      	bne.n	80045c0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2220      	movs	r2, #32
 80045f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e011      	b.n	800462c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2220      	movs	r2, #32
 800460c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2220      	movs	r2, #32
 8004612:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3758      	adds	r7, #88	; 0x58
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	603b      	str	r3, [r7, #0]
 8004640:	4613      	mov	r3, r2
 8004642:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004644:	e04f      	b.n	80046e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800464c:	d04b      	beq.n	80046e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800464e:	f7fc fa2b 	bl	8000aa8 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	429a      	cmp	r2, r3
 800465c:	d302      	bcc.n	8004664 <UART_WaitOnFlagUntilTimeout+0x30>
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e04e      	b.n	8004706 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0304 	and.w	r3, r3, #4
 8004672:	2b00      	cmp	r3, #0
 8004674:	d037      	beq.n	80046e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	2b80      	cmp	r3, #128	; 0x80
 800467a:	d034      	beq.n	80046e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	2b40      	cmp	r3, #64	; 0x40
 8004680:	d031      	beq.n	80046e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	69db      	ldr	r3, [r3, #28]
 8004688:	f003 0308 	and.w	r3, r3, #8
 800468c:	2b08      	cmp	r3, #8
 800468e:	d110      	bne.n	80046b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2208      	movs	r2, #8
 8004696:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f000 f8ff 	bl	800489c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2208      	movs	r2, #8
 80046a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e029      	b.n	8004706 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	69db      	ldr	r3, [r3, #28]
 80046b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046c0:	d111      	bne.n	80046e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f000 f8e5 	bl	800489c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2220      	movs	r2, #32
 80046d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e00f      	b.n	8004706 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	69da      	ldr	r2, [r3, #28]
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	4013      	ands	r3, r2
 80046f0:	68ba      	ldr	r2, [r7, #8]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	bf0c      	ite	eq
 80046f6:	2301      	moveq	r3, #1
 80046f8:	2300      	movne	r3, #0
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	461a      	mov	r2, r3
 80046fe:	79fb      	ldrb	r3, [r7, #7]
 8004700:	429a      	cmp	r2, r3
 8004702:	d0a0      	beq.n	8004646 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
	...

08004710 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b096      	sub	sp, #88	; 0x58
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	4613      	mov	r3, r2
 800471c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	68ba      	ldr	r2, [r7, #8]
 8004722:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	88fa      	ldrh	r2, [r7, #6]
 8004728:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2222      	movs	r2, #34	; 0x22
 8004738:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004740:	2b00      	cmp	r3, #0
 8004742:	d028      	beq.n	8004796 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004748:	4a3e      	ldr	r2, [pc, #248]	; (8004844 <UART_Start_Receive_DMA+0x134>)
 800474a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004750:	4a3d      	ldr	r2, [pc, #244]	; (8004848 <UART_Start_Receive_DMA+0x138>)
 8004752:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004758:	4a3c      	ldr	r2, [pc, #240]	; (800484c <UART_Start_Receive_DMA+0x13c>)
 800475a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004760:	2200      	movs	r2, #0
 8004762:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	3324      	adds	r3, #36	; 0x24
 800476e:	4619      	mov	r1, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004774:	461a      	mov	r2, r3
 8004776:	88fb      	ldrh	r3, [r7, #6]
 8004778:	f7fc fafa 	bl	8000d70 <HAL_DMA_Start_IT>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d009      	beq.n	8004796 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2210      	movs	r2, #16
 8004786:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2220      	movs	r2, #32
 800478e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e051      	b.n	800483a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d018      	beq.n	80047d0 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047a6:	e853 3f00 	ldrex	r3, [r3]
 80047aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047b2:	657b      	str	r3, [r7, #84]	; 0x54
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	461a      	mov	r2, r3
 80047ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80047be:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80047c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047c4:	e841 2300 	strex	r3, r2, [r1]
 80047c8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80047ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1e6      	bne.n	800479e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	3308      	adds	r3, #8
 80047d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047da:	e853 3f00 	ldrex	r3, [r3]
 80047de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	f043 0301 	orr.w	r3, r3, #1
 80047e6:	653b      	str	r3, [r7, #80]	; 0x50
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	3308      	adds	r3, #8
 80047ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80047f0:	637a      	str	r2, [r7, #52]	; 0x34
 80047f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047f8:	e841 2300 	strex	r3, r2, [r1]
 80047fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80047fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1e5      	bne.n	80047d0 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	3308      	adds	r3, #8
 800480a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	e853 3f00 	ldrex	r3, [r3]
 8004812:	613b      	str	r3, [r7, #16]
   return(result);
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800481a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	3308      	adds	r3, #8
 8004822:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004824:	623a      	str	r2, [r7, #32]
 8004826:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004828:	69f9      	ldr	r1, [r7, #28]
 800482a:	6a3a      	ldr	r2, [r7, #32]
 800482c:	e841 2300 	strex	r3, r2, [r1]
 8004830:	61bb      	str	r3, [r7, #24]
   return(result);
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1e5      	bne.n	8004804 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3758      	adds	r7, #88	; 0x58
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	08004a15 	.word	0x08004a15
 8004848:	08004b3b 	.word	0x08004b3b
 800484c:	08004b79 	.word	0x08004b79

08004850 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004850:	b480      	push	{r7}
 8004852:	b089      	sub	sp, #36	; 0x24
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	e853 3f00 	ldrex	r3, [r3]
 8004864:	60bb      	str	r3, [r7, #8]
   return(result);
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800486c:	61fb      	str	r3, [r7, #28]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	461a      	mov	r2, r3
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	61bb      	str	r3, [r7, #24]
 8004878:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487a:	6979      	ldr	r1, [r7, #20]
 800487c:	69ba      	ldr	r2, [r7, #24]
 800487e:	e841 2300 	strex	r3, r2, [r1]
 8004882:	613b      	str	r3, [r7, #16]
   return(result);
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1e6      	bne.n	8004858 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2220      	movs	r2, #32
 800488e:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8004890:	bf00      	nop
 8004892:	3724      	adds	r7, #36	; 0x24
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800489c:	b480      	push	{r7}
 800489e:	b095      	sub	sp, #84	; 0x54
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ac:	e853 3f00 	ldrex	r3, [r3]
 80048b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	461a      	mov	r2, r3
 80048c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048c2:	643b      	str	r3, [r7, #64]	; 0x40
 80048c4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048ca:	e841 2300 	strex	r3, r2, [r1]
 80048ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1e6      	bne.n	80048a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	3308      	adds	r3, #8
 80048dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048de:	6a3b      	ldr	r3, [r7, #32]
 80048e0:	e853 3f00 	ldrex	r3, [r3]
 80048e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	f023 0301 	bic.w	r3, r3, #1
 80048ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	3308      	adds	r3, #8
 80048f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048fe:	e841 2300 	strex	r3, r2, [r1]
 8004902:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1e5      	bne.n	80048d6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800490e:	2b01      	cmp	r3, #1
 8004910:	d118      	bne.n	8004944 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	e853 3f00 	ldrex	r3, [r3]
 800491e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	f023 0310 	bic.w	r3, r3, #16
 8004926:	647b      	str	r3, [r7, #68]	; 0x44
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	461a      	mov	r2, r3
 800492e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004930:	61bb      	str	r3, [r7, #24]
 8004932:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004934:	6979      	ldr	r1, [r7, #20]
 8004936:	69ba      	ldr	r2, [r7, #24]
 8004938:	e841 2300 	strex	r3, r2, [r1]
 800493c:	613b      	str	r3, [r7, #16]
   return(result);
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1e6      	bne.n	8004912 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2220      	movs	r2, #32
 8004948:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004958:	bf00      	nop
 800495a:	3754      	adds	r7, #84	; 0x54
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b090      	sub	sp, #64	; 0x40
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004970:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	2b20      	cmp	r3, #32
 8004978:	d037      	beq.n	80049ea <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800497a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800497c:	2200      	movs	r2, #0
 800497e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	3308      	adds	r3, #8
 8004988:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	e853 3f00 	ldrex	r3, [r3]
 8004990:	623b      	str	r3, [r7, #32]
   return(result);
 8004992:	6a3b      	ldr	r3, [r7, #32]
 8004994:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004998:	63bb      	str	r3, [r7, #56]	; 0x38
 800499a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	3308      	adds	r3, #8
 80049a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049a2:	633a      	str	r2, [r7, #48]	; 0x30
 80049a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049aa:	e841 2300 	strex	r3, r2, [r1]
 80049ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80049b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1e5      	bne.n	8004982 <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80049b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	e853 3f00 	ldrex	r3, [r3]
 80049c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049ca:	637b      	str	r3, [r7, #52]	; 0x34
 80049cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	461a      	mov	r2, r3
 80049d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d4:	61fb      	str	r3, [r7, #28]
 80049d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d8:	69b9      	ldr	r1, [r7, #24]
 80049da:	69fa      	ldr	r2, [r7, #28]
 80049dc:	e841 2300 	strex	r3, r2, [r1]
 80049e0:	617b      	str	r3, [r7, #20]
   return(result);
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1e6      	bne.n	80049b6 <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80049e8:	e002      	b.n	80049f0 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 80049ea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80049ec:	f000 fe08 	bl	8005600 <HAL_UART_TxCpltCallback>
}
 80049f0:	bf00      	nop
 80049f2:	3740      	adds	r7, #64	; 0x40
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a04:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f7ff facc 	bl	8003fa4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a0c:	bf00      	nop
 8004a0e:	3710      	adds	r7, #16
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b09c      	sub	sp, #112	; 0x70
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a20:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	2b20      	cmp	r3, #32
 8004a28:	d071      	beq.n	8004b0e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8004a2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a3a:	e853 3f00 	ldrex	r3, [r3]
 8004a3e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a46:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a50:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a52:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a58:	e841 2300 	strex	r3, r2, [r1]
 8004a5c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1e6      	bne.n	8004a32 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	3308      	adds	r3, #8
 8004a6a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6e:	e853 3f00 	ldrex	r3, [r3]
 8004a72:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a76:	f023 0301 	bic.w	r3, r3, #1
 8004a7a:	667b      	str	r3, [r7, #100]	; 0x64
 8004a7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	3308      	adds	r3, #8
 8004a82:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004a84:	647a      	str	r2, [r7, #68]	; 0x44
 8004a86:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a88:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a8c:	e841 2300 	strex	r3, r2, [r1]
 8004a90:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1e5      	bne.n	8004a64 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	3308      	adds	r3, #8
 8004a9e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	e853 3f00 	ldrex	r3, [r3]
 8004aa6:	623b      	str	r3, [r7, #32]
   return(result);
 8004aa8:	6a3b      	ldr	r3, [r7, #32]
 8004aaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aae:	663b      	str	r3, [r7, #96]	; 0x60
 8004ab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	3308      	adds	r3, #8
 8004ab6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ab8:	633a      	str	r2, [r7, #48]	; 0x30
 8004aba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004abc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004abe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ac0:	e841 2300 	strex	r3, r2, [r1]
 8004ac4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1e5      	bne.n	8004a98 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004acc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ace:	2220      	movs	r2, #32
 8004ad0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ad6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d118      	bne.n	8004b0e <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	e853 3f00 	ldrex	r3, [r3]
 8004ae8:	60fb      	str	r3, [r7, #12]
   return(result);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f023 0310 	bic.w	r3, r3, #16
 8004af0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004af2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	461a      	mov	r2, r3
 8004af8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004afa:	61fb      	str	r3, [r7, #28]
 8004afc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afe:	69b9      	ldr	r1, [r7, #24]
 8004b00:	69fa      	ldr	r2, [r7, #28]
 8004b02:	e841 2300 	strex	r3, r2, [r1]
 8004b06:	617b      	str	r3, [r7, #20]
   return(result);
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1e6      	bne.n	8004adc <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b10:	2200      	movs	r2, #0
 8004b12:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d107      	bne.n	8004b2c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b1e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004b22:	4619      	mov	r1, r3
 8004b24:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004b26:	f7ff fa5b 	bl	8003fe0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004b2a:	e002      	b.n	8004b32 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004b2c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004b2e:	f000 fd51 	bl	80055d4 <HAL_UART_RxCpltCallback>
}
 8004b32:	bf00      	nop
 8004b34:	3770      	adds	r7, #112	; 0x70
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b084      	sub	sp, #16
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d109      	bne.n	8004b6a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004b5c:	085b      	lsrs	r3, r3, #1
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	4619      	mov	r1, r3
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f7ff fa3c 	bl	8003fe0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004b68:	e002      	b.n	8004b70 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f7ff fa24 	bl	8003fb8 <HAL_UART_RxHalfCpltCallback>
}
 8004b70:	bf00      	nop
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b84:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b8a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b92:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b9e:	2b80      	cmp	r3, #128	; 0x80
 8004ba0:	d109      	bne.n	8004bb6 <UART_DMAError+0x3e>
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	2b21      	cmp	r3, #33	; 0x21
 8004ba6:	d106      	bne.n	8004bb6 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8004bb0:	6978      	ldr	r0, [r7, #20]
 8004bb2:	f7ff fe4d 	bl	8004850 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc0:	2b40      	cmp	r3, #64	; 0x40
 8004bc2:	d109      	bne.n	8004bd8 <UART_DMAError+0x60>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2b22      	cmp	r3, #34	; 0x22
 8004bc8:	d106      	bne.n	8004bd8 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8004bd2:	6978      	ldr	r0, [r7, #20]
 8004bd4:	f7ff fe62 	bl	800489c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bde:	f043 0210 	orr.w	r2, r3, #16
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004be8:	6978      	ldr	r0, [r7, #20]
 8004bea:	f7ff f9ef 	bl	8003fcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bee:	bf00      	nop
 8004bf0:	3718      	adds	r7, #24
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	b084      	sub	sp, #16
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c02:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f7ff f9d9 	bl	8003fcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c1a:	bf00      	nop
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b088      	sub	sp, #32
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	e853 3f00 	ldrex	r3, [r3]
 8004c36:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c3e:	61fb      	str	r3, [r7, #28]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	461a      	mov	r2, r3
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	61bb      	str	r3, [r7, #24]
 8004c4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4c:	6979      	ldr	r1, [r7, #20]
 8004c4e:	69ba      	ldr	r2, [r7, #24]
 8004c50:	e841 2300 	strex	r3, r2, [r1]
 8004c54:	613b      	str	r3, [r7, #16]
   return(result);
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1e6      	bne.n	8004c2a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 fcc9 	bl	8005600 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c6e:	bf00      	nop
 8004c70:	3720      	adds	r7, #32
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004c76:	b480      	push	{r7}
 8004c78:	b083      	sub	sp, #12
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004c7e:	bf00      	nop
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
	...

08004c8c <myAtoUi>:
	{"go", "go - get current OTP data", getOTPVal},
    {"so,","so,<pos>,<0xval> - set OTP field; replace <pos> with the field bit position and <0xval> with the desired field value in hex", setOTPField},
    {"po", "po - program the OTP data", programOTPData}
};

uint32_t myAtoUi(const uint8_t *str) {
 8004c8c:	b480      	push	{r7}
 8004c8e:	b087      	sub	sp, #28
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
    uint32_t i = 0u;
 8004c94:	2300      	movs	r3, #0
 8004c96:	617b      	str	r3, [r7, #20]
    uint32_t result = 0u;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	613b      	str	r3, [r7, #16]

    // Convert characters to integer
    while (str[i] >= '0' && str[i] <= '9') {
 8004c9c:	e011      	b.n	8004cc2 <myAtoUi+0x36>
        int digit = str[i] - '0';
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	3b30      	subs	r3, #48	; 0x30
 8004ca8:	60fb      	str	r3, [r7, #12]

        result = result * 10 + digit;
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	4613      	mov	r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4413      	add	r3, r2
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	4413      	add	r3, r2
 8004cba:	613b      	str	r3, [r7, #16]
        i++;
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	617b      	str	r3, [r7, #20]
    while (str[i] >= '0' && str[i] <= '9') {
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	2b2f      	cmp	r3, #47	; 0x2f
 8004ccc:	d905      	bls.n	8004cda <myAtoUi+0x4e>
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	2b39      	cmp	r3, #57	; 0x39
 8004cd8:	d9e1      	bls.n	8004c9e <myAtoUi+0x12>
    }

    if (str[i] != '\0' )
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	4413      	add	r3, r2
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d005      	beq.n	8004cf2 <myAtoUi+0x66>
    {
    	fInvalidCommand = 1u;
 8004ce6:	4b06      	ldr	r3, [pc, #24]	; (8004d00 <myAtoUi+0x74>)
 8004ce8:	2201      	movs	r2, #1
 8004cea:	701a      	strb	r2, [r3, #0]
    	result = 0xFFFFFFFFu;
 8004cec:	f04f 33ff 	mov.w	r3, #4294967295
 8004cf0:	613b      	str	r3, [r7, #16]
    }

    return result;
 8004cf2:	693b      	ldr	r3, [r7, #16]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	371c      	adds	r7, #28
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	20000bf9 	.word	0x20000bf9

08004d04 <setConditionsFor>:

static void setConditionsFor(uint8_t reqAction)
{//Note: make sure ALIGN and PWRDOWN are set to Low
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	71fb      	strb	r3, [r7, #7]
	if ( eProgOTP == reqAction )
 8004d0e:	79fb      	ldrb	r3, [r7, #7]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d10c      	bne.n	8004d2e <setConditionsFor+0x2a>
	{
		HAL_GPIO_WritePin(pPROG_GPIO_Port, pPROG_Pin, GPIO_PIN_SET);
 8004d14:	2201      	movs	r2, #1
 8004d16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d1a:	480d      	ldr	r0, [pc, #52]	; (8004d50 <setConditionsFor+0x4c>)
 8004d1c:	f7fc fbb2 	bl	8001484 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pVPP_GPIO_Port, pVPP_Pin, GPIO_PIN_SET);
 8004d20:	2201      	movs	r2, #1
 8004d22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d26:	480a      	ldr	r0, [pc, #40]	; (8004d50 <setConditionsFor+0x4c>)
 8004d28:	f7fc fbac 	bl	8001484 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(pPROG_GPIO_Port, pPROG_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(pVPP_GPIO_Port, pVPP_Pin, GPIO_PIN_RESET);
	}
}
 8004d2c:	e00b      	b.n	8004d46 <setConditionsFor+0x42>
		HAL_GPIO_WritePin(pPROG_GPIO_Port, pPROG_Pin, GPIO_PIN_RESET);
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d34:	4806      	ldr	r0, [pc, #24]	; (8004d50 <setConditionsFor+0x4c>)
 8004d36:	f7fc fba5 	bl	8001484 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pVPP_GPIO_Port, pVPP_Pin, GPIO_PIN_RESET);
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d40:	4803      	ldr	r0, [pc, #12]	; (8004d50 <setConditionsFor+0x4c>)
 8004d42:	f7fc fb9f 	bl	8001484 <HAL_GPIO_WritePin>
}
 8004d46:	bf00      	nop
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	48000c00 	.word	0x48000c00

08004d54 <getEncVal>:

static void getEncVal( void )
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
	uint8_t encResolutionOTPVal = (otpData[read][dat][4+8*2]<<1) + otpData[read][dat][4+9*2]; //bits 9 and 8 contain the resolution configuration
 8004d5a:	4b1a      	ldr	r3, [pc, #104]	; (8004dc4 <getEncVal+0x70>)
 8004d5c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004d60:	005b      	lsls	r3, r3, #1
 8004d62:	b2da      	uxtb	r2, r3
 8004d64:	4b17      	ldr	r3, [pc, #92]	; (8004dc4 <getEncVal+0x70>)
 8004d66:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8004d6a:	4413      	add	r3, r2
 8004d6c:	71fb      	strb	r3, [r7, #7]
	setConditionsFor(eReadEncVal);
 8004d6e:	2001      	movs	r0, #1
 8004d70:	f7ff ffc8 	bl	8004d04 <setConditionsFor>
	ssiMode = read;
 8004d74:	4b14      	ldr	r3, [pc, #80]	; (8004dc8 <getEncVal+0x74>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	701a      	strb	r2, [r3, #0]

	cOtpClk = &encData[clk][0];
 8004d7a:	4b14      	ldr	r3, [pc, #80]	; (8004dcc <getEncVal+0x78>)
 8004d7c:	4a14      	ldr	r2, [pc, #80]	; (8004dd0 <getEncVal+0x7c>)
 8004d7e:	601a      	str	r2, [r3, #0]
	cOtpData = &encData[dat][0];
 8004d80:	4b14      	ldr	r3, [pc, #80]	; (8004dd4 <getEncVal+0x80>)
 8004d82:	4a15      	ldr	r2, [pc, #84]	; (8004dd8 <getEncVal+0x84>)
 8004d84:	601a      	str	r2, [r3, #0]
	ssiClkEdgesNb = 2u/*first falling edge*/ + encResolution[encResolutionOTPVal]*2u + 1u/*rising edge at the end*/;
 8004d86:	79fb      	ldrb	r3, [r7, #7]
 8004d88:	4a14      	ldr	r2, [pc, #80]	; (8004ddc <getEncVal+0x88>)
 8004d8a:	5cd3      	ldrb	r3, [r2, r3]
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	005b      	lsls	r3, r3, #1
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	3301      	adds	r3, #1
 8004d96:	b2da      	uxtb	r2, r3
 8004d98:	4b11      	ldr	r3, [pc, #68]	; (8004de0 <getEncVal+0x8c>)
 8004d9a:	701a      	strb	r2, [r3, #0]

	fWaitSSITransfer  = 1u;
 8004d9c:	4b11      	ldr	r3, [pc, #68]	; (8004de4 <getEncVal+0x90>)
 8004d9e:	2201      	movs	r2, #1
 8004da0:	701a      	strb	r2, [r3, #0]
	fParseSSIRxData = 1u;
 8004da2:	4b11      	ldr	r3, [pc, #68]	; (8004de8 <getEncVal+0x94>)
 8004da4:	2201      	movs	r2, #1
 8004da6:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, ssiNCS_Pin, GPIO_PIN_RESET);
 8004da8:	2200      	movs	r2, #0
 8004daa:	2120      	movs	r1, #32
 8004dac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004db0:	f7fc fb68 	bl	8001484 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim1);
 8004db4:	480d      	ldr	r0, [pc, #52]	; (8004dec <getEncVal+0x98>)
 8004db6:	f7fe f881 	bl	8002ebc <HAL_TIM_Base_Start_IT>

}
 8004dba:	bf00      	nop
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	20000090 	.word	0x20000090
 8004dc8:	20000beb 	.word	0x20000beb
 8004dcc:	20000bec 	.word	0x20000bec
 8004dd0:	20000048 	.word	0x20000048
 8004dd4:	20000bf0 	.word	0x20000bf0
 8004dd8:	2000006b 	.word	0x2000006b
 8004ddc:	2000000c 	.word	0x2000000c
 8004de0:	20000bf4 	.word	0x20000bf4
 8004de4:	20000bf7 	.word	0x20000bf7
 8004de8:	20000bf8 	.word	0x20000bf8
 8004dec:	2000065c 	.word	0x2000065c

08004df0 <getOTPVal>:

static void getOTPVal( void )
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	af00      	add	r7, sp, #0
	setConditionsFor(eReadEncVal);
 8004df4:	2001      	movs	r0, #1
 8004df6:	f7ff ff85 	bl	8004d04 <setConditionsFor>
	ssiMode = read;
 8004dfa:	4b0d      	ldr	r3, [pc, #52]	; (8004e30 <getOTPVal+0x40>)
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	701a      	strb	r2, [r3, #0]

	cOtpClk = &otpData[read][clk][0];
 8004e00:	4b0c      	ldr	r3, [pc, #48]	; (8004e34 <getOTPVal+0x44>)
 8004e02:	4a0d      	ldr	r2, [pc, #52]	; (8004e38 <getOTPVal+0x48>)
 8004e04:	601a      	str	r2, [r3, #0]
	cOtpData = &otpData[read][dat][0];
 8004e06:	4b0d      	ldr	r3, [pc, #52]	; (8004e3c <getOTPVal+0x4c>)
 8004e08:	4a0d      	ldr	r2, [pc, #52]	; (8004e40 <getOTPVal+0x50>)
 8004e0a:	601a      	str	r2, [r3, #0]
	ssiClkEdgesNb = NB_OF_CLK_EDGES;
 8004e0c:	4b0d      	ldr	r3, [pc, #52]	; (8004e44 <getOTPVal+0x54>)
 8004e0e:	2248      	movs	r2, #72	; 0x48
 8004e10:	701a      	strb	r2, [r3, #0]

	fWaitSSITransfer  = 1u;
 8004e12:	4b0d      	ldr	r3, [pc, #52]	; (8004e48 <getOTPVal+0x58>)
 8004e14:	2201      	movs	r2, #1
 8004e16:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, ssiNCS_Pin, GPIO_PIN_RESET);
 8004e18:	2200      	movs	r2, #0
 8004e1a:	2120      	movs	r1, #32
 8004e1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e20:	f7fc fb30 	bl	8001484 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim1);
 8004e24:	4809      	ldr	r0, [pc, #36]	; (8004e4c <getOTPVal+0x5c>)
 8004e26:	f7fe f849 	bl	8002ebc <HAL_TIM_Base_Start_IT>
}
 8004e2a:	bf00      	nop
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	20000beb 	.word	0x20000beb
 8004e34:	20000bec 	.word	0x20000bec
 8004e38:	20000090 	.word	0x20000090
 8004e3c:	20000bf0 	.word	0x20000bf0
 8004e40:	200000d8 	.word	0x200000d8
 8004e44:	20000bf4 	.word	0x20000bf4
 8004e48:	20000bf7 	.word	0x20000bf7
 8004e4c:	2000065c 	.word	0x2000065c

08004e50 <setOTPField>:

static void setOTPField( void )
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
	uint8_t lIdx = 0u;
 8004e56:	2300      	movs	r3, #0
 8004e58:	75fb      	strb	r3, [r7, #23]
	uint8_t lBitPosVal = 0u;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	75bb      	strb	r3, [r7, #22]
	uint32_t lOTPval = 0u;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	613b      	str	r3, [r7, #16]
	uint8_t lOTPvalBits[16] = {0,};
 8004e62:	2300      	movs	r3, #0
 8004e64:	603b      	str	r3, [r7, #0]
 8004e66:	1d3b      	adds	r3, r7, #4
 8004e68:	2200      	movs	r2, #0
 8004e6a:	601a      	str	r2, [r3, #0]
 8004e6c:	605a      	str	r2, [r3, #4]
 8004e6e:	609a      	str	r2, [r3, #8]

	//read bit number (max 2 digits)
	lIdx = 3u;
 8004e70:	2303      	movs	r3, #3
 8004e72:	75fb      	strb	r3, [r7, #23]
	while ( (lIdx < 7u) && (uartRxBuf[lIdx] != ',') )
 8004e74:	e00c      	b.n	8004e90 <setOTPField+0x40>
	{
		lBitPosVal = lBitPosVal << 1;
 8004e76:	7dbb      	ldrb	r3, [r7, #22]
 8004e78:	005b      	lsls	r3, r3, #1
 8004e7a:	75bb      	strb	r3, [r7, #22]
		lBitPosVal += uartRxBuf[2+lIdx];
 8004e7c:	7dfb      	ldrb	r3, [r7, #23]
 8004e7e:	3302      	adds	r3, #2
 8004e80:	4a2e      	ldr	r2, [pc, #184]	; (8004f3c <setOTPField+0xec>)
 8004e82:	5cd2      	ldrb	r2, [r2, r3]
 8004e84:	7dbb      	ldrb	r3, [r7, #22]
 8004e86:	4413      	add	r3, r2
 8004e88:	75bb      	strb	r3, [r7, #22]
		lIdx++;
 8004e8a:	7dfb      	ldrb	r3, [r7, #23]
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	75fb      	strb	r3, [r7, #23]
	while ( (lIdx < 7u) && (uartRxBuf[lIdx] != ',') )
 8004e90:	7dfb      	ldrb	r3, [r7, #23]
 8004e92:	2b06      	cmp	r3, #6
 8004e94:	d804      	bhi.n	8004ea0 <setOTPField+0x50>
 8004e96:	7dfb      	ldrb	r3, [r7, #23]
 8004e98:	4a28      	ldr	r2, [pc, #160]	; (8004f3c <setOTPField+0xec>)
 8004e9a:	5cd3      	ldrb	r3, [r2, r3]
 8004e9c:	2b2c      	cmp	r3, #44	; 0x2c
 8004e9e:	d1ea      	bne.n	8004e76 <setOTPField+0x26>
	}
	if ( lIdx <= 5u )
 8004ea0:	7dfb      	ldrb	r3, [r7, #23]
 8004ea2:	2b05      	cmp	r3, #5
 8004ea4:	d846      	bhi.n	8004f34 <setOTPField+0xe4>
	{//bit number was OK (max 2 digits)
		if ( lBitPosVal < 16u )
 8004ea6:	7dbb      	ldrb	r3, [r7, #22]
 8004ea8:	2b0f      	cmp	r3, #15
 8004eaa:	d840      	bhi.n	8004f2e <setOTPField+0xde>
		{//bit position value is valid
			//convert value from hex string to INT
			lOTPval = myAtoUi(&uartRxBuf[lIdx]);
 8004eac:	7dfb      	ldrb	r3, [r7, #23]
 8004eae:	4a23      	ldr	r2, [pc, #140]	; (8004f3c <setOTPField+0xec>)
 8004eb0:	4413      	add	r3, r2
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7ff feea 	bl	8004c8c <myAtoUi>
 8004eb8:	6138      	str	r0, [r7, #16]
			if ( 0u == fInvalidCommand )
 8004eba:	4b21      	ldr	r3, [pc, #132]	; (8004f40 <setOTPField+0xf0>)
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d138      	bne.n	8004f34 <setOTPField+0xe4>
			{//Conversion successful
				if ( OTPDataRanges[lBitPosVal] >= lOTPval )
 8004ec2:	7dbb      	ldrb	r3, [r7, #22]
 8004ec4:	4a1f      	ldr	r2, [pc, #124]	; (8004f44 <setOTPField+0xf4>)
 8004ec6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004eca:	461a      	mov	r2, r3
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d830      	bhi.n	8004f34 <setOTPField+0xe4>
				{//value is in range
					//update the otpData buffer used for writing
					lIdx = 0u;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	75fb      	strb	r3, [r7, #23]
					while (0u != lOTPval)
 8004ed6:	e010      	b.n	8004efa <setOTPField+0xaa>
					{
						lIdx++;
 8004ed8:	7dfb      	ldrb	r3, [r7, #23]
 8004eda:	3301      	adds	r3, #1
 8004edc:	75fb      	strb	r3, [r7, #23]
						lOTPvalBits[lIdx-1] = lOTPval % 2;
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	b2da      	uxtb	r2, r3
 8004ee2:	7dfb      	ldrb	r3, [r7, #23]
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	f002 0201 	and.w	r2, r2, #1
 8004eea:	b2d2      	uxtb	r2, r2
 8004eec:	3318      	adds	r3, #24
 8004eee:	443b      	add	r3, r7
 8004ef0:	f803 2c18 	strb.w	r2, [r3, #-24]
						lOTPval >>= 1;
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	085b      	lsrs	r3, r3, #1
 8004ef8:	613b      	str	r3, [r7, #16]
					while (0u != lOTPval)
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1eb      	bne.n	8004ed8 <setOTPField+0x88>
					}
					while (lIdx--)
 8004f00:	e00f      	b.n	8004f22 <setOTPField+0xd2>
					{
						otpData[write][dat][4+2*lBitPosVal+lIdx] = lOTPvalBits[lIdx-1];
 8004f02:	7dfb      	ldrb	r3, [r7, #23]
 8004f04:	1e5a      	subs	r2, r3, #1
 8004f06:	7dbb      	ldrb	r3, [r7, #22]
 8004f08:	3302      	adds	r3, #2
 8004f0a:	0059      	lsls	r1, r3, #1
 8004f0c:	7dfb      	ldrb	r3, [r7, #23]
 8004f0e:	440b      	add	r3, r1
 8004f10:	3218      	adds	r2, #24
 8004f12:	443a      	add	r2, r7
 8004f14:	f812 1c18 	ldrb.w	r1, [r2, #-24]
 8004f18:	4a0b      	ldr	r2, [pc, #44]	; (8004f48 <setOTPField+0xf8>)
 8004f1a:	4413      	add	r3, r2
 8004f1c:	460a      	mov	r2, r1
 8004f1e:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
					while (lIdx--)
 8004f22:	7dfb      	ldrb	r3, [r7, #23]
 8004f24:	1e5a      	subs	r2, r3, #1
 8004f26:	75fa      	strb	r2, [r7, #23]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1ea      	bne.n	8004f02 <setOTPField+0xb2>
		else
		{
			fInvalidCommand = 1u;
		}
	}
}
 8004f2c:	e002      	b.n	8004f34 <setOTPField+0xe4>
			fInvalidCommand = 1u;
 8004f2e:	4b04      	ldr	r3, [pc, #16]	; (8004f40 <setOTPField+0xf0>)
 8004f30:	2201      	movs	r2, #1
 8004f32:	701a      	strb	r2, [r3, #0]
}
 8004f34:	bf00      	nop
 8004f36:	3718      	adds	r7, #24
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	200007dc 	.word	0x200007dc
 8004f40:	20000bf9 	.word	0x20000bf9
 8004f44:	200001b0 	.word	0x200001b0
 8004f48:	20000090 	.word	0x20000090

08004f4c <programOTPData>:

static void programOTPData( void)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	af00      	add	r7, sp, #0
	setConditionsFor(eProgOTP);
 8004f50:	2000      	movs	r0, #0
 8004f52:	f7ff fed7 	bl	8004d04 <setConditionsFor>
	ssiMode = write;
 8004f56:	4b0f      	ldr	r3, [pc, #60]	; (8004f94 <programOTPData+0x48>)
 8004f58:	2201      	movs	r2, #1
 8004f5a:	701a      	strb	r2, [r3, #0]

	cOtpClk = &otpData[write][clk][0];
 8004f5c:	4b0e      	ldr	r3, [pc, #56]	; (8004f98 <programOTPData+0x4c>)
 8004f5e:	4a0f      	ldr	r2, [pc, #60]	; (8004f9c <programOTPData+0x50>)
 8004f60:	601a      	str	r2, [r3, #0]
	cOtpData = &otpData[write][dat][0];
 8004f62:	4b0f      	ldr	r3, [pc, #60]	; (8004fa0 <programOTPData+0x54>)
 8004f64:	4a0f      	ldr	r2, [pc, #60]	; (8004fa4 <programOTPData+0x58>)
 8004f66:	601a      	str	r2, [r3, #0]
	ssiClkEdgesNb = NB_OF_CLK_EDGES;
 8004f68:	4b0f      	ldr	r3, [pc, #60]	; (8004fa8 <programOTPData+0x5c>)
 8004f6a:	2248      	movs	r2, #72	; 0x48
 8004f6c:	701a      	strb	r2, [r3, #0]

	fWaitSSITransfer  = 1u;
 8004f6e:	4b0f      	ldr	r3, [pc, #60]	; (8004fac <programOTPData+0x60>)
 8004f70:	2201      	movs	r2, #1
 8004f72:	701a      	strb	r2, [r3, #0]
	cntWaitOTPWriteStatusFlags = 1000u;
 8004f74:	4b0e      	ldr	r3, [pc, #56]	; (8004fb0 <programOTPData+0x64>)
 8004f76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f7a:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, ssiNCS_Pin, GPIO_PIN_RESET);
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	2120      	movs	r1, #32
 8004f80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f84:	f7fc fa7e 	bl	8001484 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim1);
 8004f88:	480a      	ldr	r0, [pc, #40]	; (8004fb4 <programOTPData+0x68>)
 8004f8a:	f7fd ff97 	bl	8002ebc <HAL_TIM_Base_Start_IT>
}
 8004f8e:	bf00      	nop
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	20000beb 	.word	0x20000beb
 8004f98:	20000bec 	.word	0x20000bec
 8004f9c:	20000120 	.word	0x20000120
 8004fa0:	20000bf0 	.word	0x20000bf0
 8004fa4:	20000168 	.word	0x20000168
 8004fa8:	20000bf4 	.word	0x20000bf4
 8004fac:	20000bf7 	.word	0x20000bf7
 8004fb0:	20000c00 	.word	0x20000c00
 8004fb4:	2000065c 	.word	0x2000065c

08004fb8 <prepareMenu>:

static uint16_t prepareMenu( void ) {
 8004fb8:	b490      	push	{r4, r7}
 8004fba:	b088      	sub	sp, #32
 8004fbc:	af00      	add	r7, sp, #0
	uint16_t lIdx = 0u;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	83fb      	strh	r3, [r7, #30]
	uint16_t lIdxuMenu = 0u;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	83bb      	strh	r3, [r7, #28]
	uint8_t lMenuItem = 0u;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	76fb      	strb	r3, [r7, #27]
	uint8_t encValDescr[] = "Encoder value: ";
 8004fca:	4b92      	ldr	r3, [pc, #584]	; (8005214 <prepareMenu+0x25c>)
 8004fcc:	f107 0408 	add.w	r4, r7, #8
 8004fd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004fd2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t encValTextRev[] = "65535";
 8004fd6:	4a90      	ldr	r2, [pc, #576]	; (8005218 <prepareMenu+0x260>)
 8004fd8:	463b      	mov	r3, r7
 8004fda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004fde:	6018      	str	r0, [r3, #0]
 8004fe0:	3304      	adds	r3, #4
 8004fe2:	8019      	strh	r1, [r3, #0]
	uint16_t lencVal = encVal;
 8004fe4:	4b8d      	ldr	r3, [pc, #564]	; (800521c <prepareMenu+0x264>)
 8004fe6:	881b      	ldrh	r3, [r3, #0]
 8004fe8:	833b      	strh	r3, [r7, #24]

	//copy encoder value
	for (/*lIdx already initialized above*/;lIdxuMenu<(sizeof(encValDescr)-1u); lIdxuMenu++)
 8004fea:	e00a      	b.n	8005002 <prepareMenu+0x4a>
	{
		uartMenu[lIdxuMenu] = encValDescr[lIdxuMenu];
 8004fec:	8bba      	ldrh	r2, [r7, #28]
 8004fee:	8bbb      	ldrh	r3, [r7, #28]
 8004ff0:	3220      	adds	r2, #32
 8004ff2:	443a      	add	r2, r7
 8004ff4:	f812 1c18 	ldrb.w	r1, [r2, #-24]
 8004ff8:	4a89      	ldr	r2, [pc, #548]	; (8005220 <prepareMenu+0x268>)
 8004ffa:	54d1      	strb	r1, [r2, r3]
	for (/*lIdx already initialized above*/;lIdxuMenu<(sizeof(encValDescr)-1u); lIdxuMenu++)
 8004ffc:	8bbb      	ldrh	r3, [r7, #28]
 8004ffe:	3301      	adds	r3, #1
 8005000:	83bb      	strh	r3, [r7, #28]
 8005002:	8bbb      	ldrh	r3, [r7, #28]
 8005004:	2b0e      	cmp	r3, #14
 8005006:	d9f1      	bls.n	8004fec <prepareMenu+0x34>
	}
	//get digits
	encValTextRev[0] = encVal % 10u;
 8005008:	4b84      	ldr	r3, [pc, #528]	; (800521c <prepareMenu+0x264>)
 800500a:	881a      	ldrh	r2, [r3, #0]
 800500c:	4b85      	ldr	r3, [pc, #532]	; (8005224 <prepareMenu+0x26c>)
 800500e:	fba3 1302 	umull	r1, r3, r3, r2
 8005012:	08d9      	lsrs	r1, r3, #3
 8005014:	460b      	mov	r3, r1
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	440b      	add	r3, r1
 800501a:	005b      	lsls	r3, r3, #1
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	b29b      	uxth	r3, r3
 8005020:	b2db      	uxtb	r3, r3
 8005022:	703b      	strb	r3, [r7, #0]
	lIdx = 1u;
 8005024:	2301      	movs	r3, #1
 8005026:	83fb      	strh	r3, [r7, #30]
	while (lencVal != 0u)
 8005028:	e017      	b.n	800505a <prepareMenu+0xa2>
	{
		encValTextRev[lIdx++] = (lencVal / 10u) % 10u ;
 800502a:	8b3b      	ldrh	r3, [r7, #24]
 800502c:	4a7d      	ldr	r2, [pc, #500]	; (8005224 <prepareMenu+0x26c>)
 800502e:	fba2 2303 	umull	r2, r3, r2, r3
 8005032:	08db      	lsrs	r3, r3, #3
 8005034:	b29a      	uxth	r2, r3
 8005036:	4b7b      	ldr	r3, [pc, #492]	; (8005224 <prepareMenu+0x26c>)
 8005038:	fba3 1302 	umull	r1, r3, r3, r2
 800503c:	08d9      	lsrs	r1, r3, #3
 800503e:	460b      	mov	r3, r1
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	440b      	add	r3, r1
 8005044:	005b      	lsls	r3, r3, #1
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	b29a      	uxth	r2, r3
 800504a:	8bfb      	ldrh	r3, [r7, #30]
 800504c:	1c59      	adds	r1, r3, #1
 800504e:	83f9      	strh	r1, [r7, #30]
 8005050:	b2d2      	uxtb	r2, r2
 8005052:	3320      	adds	r3, #32
 8005054:	443b      	add	r3, r7
 8005056:	f803 2c20 	strb.w	r2, [r3, #-32]
	while (lencVal != 0u)
 800505a:	8b3b      	ldrh	r3, [r7, #24]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1e4      	bne.n	800502a <prepareMenu+0x72>
	}
	//put encoder value digits in the buffer (in correct order from most significant digit to less significant one)
	while ( lIdx > 0u )
 8005060:	e00e      	b.n	8005080 <prepareMenu+0xc8>
	{
		uartMenu[lIdxuMenu++] = encValTextRev[lIdx--];
 8005062:	8bfb      	ldrh	r3, [r7, #30]
 8005064:	1e5a      	subs	r2, r3, #1
 8005066:	83fa      	strh	r2, [r7, #30]
 8005068:	4619      	mov	r1, r3
 800506a:	8bbb      	ldrh	r3, [r7, #28]
 800506c:	1c5a      	adds	r2, r3, #1
 800506e:	83ba      	strh	r2, [r7, #28]
 8005070:	461a      	mov	r2, r3
 8005072:	f101 0320 	add.w	r3, r1, #32
 8005076:	443b      	add	r3, r7
 8005078:	f813 1c20 	ldrb.w	r1, [r3, #-32]
 800507c:	4b68      	ldr	r3, [pc, #416]	; (8005220 <prepareMenu+0x268>)
 800507e:	5499      	strb	r1, [r3, r2]
	while ( lIdx > 0u )
 8005080:	8bfb      	ldrh	r3, [r7, #30]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1ed      	bne.n	8005062 <prepareMenu+0xaa>
	}
	uartMenu[lIdxuMenu++] = '\r';
 8005086:	8bbb      	ldrh	r3, [r7, #28]
 8005088:	1c5a      	adds	r2, r3, #1
 800508a:	83ba      	strh	r2, [r7, #28]
 800508c:	461a      	mov	r2, r3
 800508e:	4b64      	ldr	r3, [pc, #400]	; (8005220 <prepareMenu+0x268>)
 8005090:	210d      	movs	r1, #13
 8005092:	5499      	strb	r1, [r3, r2]
	uartMenu[lIdxuMenu++] = '\n';
 8005094:	8bbb      	ldrh	r3, [r7, #28]
 8005096:	1c5a      	adds	r2, r3, #1
 8005098:	83ba      	strh	r2, [r7, #28]
 800509a:	461a      	mov	r2, r3
 800509c:	4b60      	ldr	r3, [pc, #384]	; (8005220 <prepareMenu+0x268>)
 800509e:	210a      	movs	r1, #10
 80050a0:	5499      	strb	r1, [r3, r2]

	//update actual OTP data according to the received data from device via SSI interface
	for ( lIdx = 0u; lIdx < 32u; lIdx++)
 80050a2:	2300      	movs	r3, #0
 80050a4:	83fb      	strh	r3, [r7, #30]
 80050a6:	e00d      	b.n	80050c4 <prepareMenu+0x10c>
	{
		menuOTPDescrActualData[lIdx+85]= otpData[read][dat][4+lIdx*2];
 80050a8:	8bfb      	ldrh	r3, [r7, #30]
 80050aa:	3302      	adds	r3, #2
 80050ac:	005a      	lsls	r2, r3, #1
 80050ae:	8bfb      	ldrh	r3, [r7, #30]
 80050b0:	3355      	adds	r3, #85	; 0x55
 80050b2:	495d      	ldr	r1, [pc, #372]	; (8005228 <prepareMenu+0x270>)
 80050b4:	440a      	add	r2, r1
 80050b6:	f892 1048 	ldrb.w	r1, [r2, #72]	; 0x48
 80050ba:	4a5c      	ldr	r2, [pc, #368]	; (800522c <prepareMenu+0x274>)
 80050bc:	54d1      	strb	r1, [r2, r3]
	for ( lIdx = 0u; lIdx < 32u; lIdx++)
 80050be:	8bfb      	ldrh	r3, [r7, #30]
 80050c0:	3301      	adds	r3, #1
 80050c2:	83fb      	strh	r3, [r7, #30]
 80050c4:	8bfb      	ldrh	r3, [r7, #30]
 80050c6:	2b1f      	cmp	r3, #31
 80050c8:	d9ee      	bls.n	80050a8 <prepareMenu+0xf0>
	}
	//update desired OTP data according to the received data from device via SSI interface
	for ( lIdx = 0u; lIdx < 32u; lIdx++)
 80050ca:	2300      	movs	r3, #0
 80050cc:	83fb      	strh	r3, [r7, #30]
 80050ce:	e00d      	b.n	80050ec <prepareMenu+0x134>
	{
		menuOTPDescrDesiredData[lIdx+85]= otpData[write][dat][4+lIdx*2];
 80050d0:	8bfb      	ldrh	r3, [r7, #30]
 80050d2:	3302      	adds	r3, #2
 80050d4:	005a      	lsls	r2, r3, #1
 80050d6:	8bfb      	ldrh	r3, [r7, #30]
 80050d8:	3355      	adds	r3, #85	; 0x55
 80050da:	4953      	ldr	r1, [pc, #332]	; (8005228 <prepareMenu+0x270>)
 80050dc:	440a      	add	r2, r1
 80050de:	f892 10d8 	ldrb.w	r1, [r2, #216]	; 0xd8
 80050e2:	4a53      	ldr	r2, [pc, #332]	; (8005230 <prepareMenu+0x278>)
 80050e4:	54d1      	strb	r1, [r2, r3]
	for ( lIdx = 0u; lIdx < 32u; lIdx++)
 80050e6:	8bfb      	ldrh	r3, [r7, #30]
 80050e8:	3301      	adds	r3, #1
 80050ea:	83fb      	strh	r3, [r7, #30]
 80050ec:	8bfb      	ldrh	r3, [r7, #30]
 80050ee:	2b1f      	cmp	r3, #31
 80050f0:	d9ee      	bls.n	80050d0 <prepareMenu+0x118>
	}

	//copy OTP description
	for (/*lIdx already initialized above*/;lIdxuMenu<sizeof(menuOTPDescrHeader); lIdxuMenu++)
 80050f2:	e008      	b.n	8005106 <prepareMenu+0x14e>
	{
		uartMenu[lIdxuMenu] = menuOTPDescrHeader[lIdxuMenu];
 80050f4:	8bba      	ldrh	r2, [r7, #28]
 80050f6:	8bbb      	ldrh	r3, [r7, #28]
 80050f8:	494e      	ldr	r1, [pc, #312]	; (8005234 <prepareMenu+0x27c>)
 80050fa:	5c89      	ldrb	r1, [r1, r2]
 80050fc:	4a48      	ldr	r2, [pc, #288]	; (8005220 <prepareMenu+0x268>)
 80050fe:	54d1      	strb	r1, [r2, r3]
	for (/*lIdx already initialized above*/;lIdxuMenu<sizeof(menuOTPDescrHeader); lIdxuMenu++)
 8005100:	8bbb      	ldrh	r3, [r7, #28]
 8005102:	3301      	adds	r3, #1
 8005104:	83bb      	strh	r3, [r7, #28]
 8005106:	8bbb      	ldrh	r3, [r7, #28]
 8005108:	2b58      	cmp	r3, #88	; 0x58
 800510a:	d9f3      	bls.n	80050f4 <prepareMenu+0x13c>
	}
	for (/*lIdx already initialized above*/;lIdxuMenu<sizeof(menuOTPDescrActualData); lIdxuMenu++)
 800510c:	e008      	b.n	8005120 <prepareMenu+0x168>
	{
		uartMenu[lIdxuMenu] = menuOTPDescrActualData[lIdxuMenu];
 800510e:	8bba      	ldrh	r2, [r7, #28]
 8005110:	8bbb      	ldrh	r3, [r7, #28]
 8005112:	4946      	ldr	r1, [pc, #280]	; (800522c <prepareMenu+0x274>)
 8005114:	5c89      	ldrb	r1, [r1, r2]
 8005116:	4a42      	ldr	r2, [pc, #264]	; (8005220 <prepareMenu+0x268>)
 8005118:	54d1      	strb	r1, [r2, r3]
	for (/*lIdx already initialized above*/;lIdxuMenu<sizeof(menuOTPDescrActualData); lIdxuMenu++)
 800511a:	8bbb      	ldrh	r3, [r7, #28]
 800511c:	3301      	adds	r3, #1
 800511e:	83bb      	strh	r3, [r7, #28]
 8005120:	8bbb      	ldrh	r3, [r7, #28]
 8005122:	2b57      	cmp	r3, #87	; 0x57
 8005124:	d9f3      	bls.n	800510e <prepareMenu+0x156>
	}
	for (/*lIdx already initialized above*/;lIdxuMenu<sizeof(menuOTPDescrDesiredData); lIdxuMenu++)
 8005126:	e008      	b.n	800513a <prepareMenu+0x182>
	{
		uartMenu[lIdxuMenu] = menuOTPDescrDesiredData[lIdxuMenu];
 8005128:	8bba      	ldrh	r2, [r7, #28]
 800512a:	8bbb      	ldrh	r3, [r7, #28]
 800512c:	4940      	ldr	r1, [pc, #256]	; (8005230 <prepareMenu+0x278>)
 800512e:	5c89      	ldrb	r1, [r1, r2]
 8005130:	4a3b      	ldr	r2, [pc, #236]	; (8005220 <prepareMenu+0x268>)
 8005132:	54d1      	strb	r1, [r2, r3]
	for (/*lIdx already initialized above*/;lIdxuMenu<sizeof(menuOTPDescrDesiredData); lIdxuMenu++)
 8005134:	8bbb      	ldrh	r3, [r7, #28]
 8005136:	3301      	adds	r3, #1
 8005138:	83bb      	strh	r3, [r7, #28]
 800513a:	8bbb      	ldrh	r3, [r7, #28]
 800513c:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 8005140:	d9f2      	bls.n	8005128 <prepareMenu+0x170>
	}

	//copy Menu items
    for (/*lMenuItem initialized above*/;lMenuItem<  menuSize; lMenuItem++) {
 8005142:	e01d      	b.n	8005180 <prepareMenu+0x1c8>
    	for (lIdx = 0u; lIdx<sizeof(menu[lMenuItem].helpText); lIdx++)
 8005144:	2300      	movs	r3, #0
 8005146:	83fb      	strh	r3, [r7, #30]
 8005148:	e014      	b.n	8005174 <prepareMenu+0x1bc>
    	{
    		uartMenu[lIdxuMenu] = menu[lMenuItem].helpText[lIdx];
 800514a:	7efa      	ldrb	r2, [r7, #27]
 800514c:	493a      	ldr	r1, [pc, #232]	; (8005238 <prepareMenu+0x280>)
 800514e:	4613      	mov	r3, r2
 8005150:	005b      	lsls	r3, r3, #1
 8005152:	4413      	add	r3, r2
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	440b      	add	r3, r1
 8005158:	3304      	adds	r3, #4
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	8bfb      	ldrh	r3, [r7, #30]
 800515e:	441a      	add	r2, r3
 8005160:	8bbb      	ldrh	r3, [r7, #28]
 8005162:	7811      	ldrb	r1, [r2, #0]
 8005164:	4a2e      	ldr	r2, [pc, #184]	; (8005220 <prepareMenu+0x268>)
 8005166:	54d1      	strb	r1, [r2, r3]
    		lIdxuMenu++;
 8005168:	8bbb      	ldrh	r3, [r7, #28]
 800516a:	3301      	adds	r3, #1
 800516c:	83bb      	strh	r3, [r7, #28]
    	for (lIdx = 0u; lIdx<sizeof(menu[lMenuItem].helpText); lIdx++)
 800516e:	8bfb      	ldrh	r3, [r7, #30]
 8005170:	3301      	adds	r3, #1
 8005172:	83fb      	strh	r3, [r7, #30]
 8005174:	8bfb      	ldrh	r3, [r7, #30]
 8005176:	2b03      	cmp	r3, #3
 8005178:	d9e7      	bls.n	800514a <prepareMenu+0x192>
    for (/*lMenuItem initialized above*/;lMenuItem<  menuSize; lMenuItem++) {
 800517a:	7efb      	ldrb	r3, [r7, #27]
 800517c:	3301      	adds	r3, #1
 800517e:	76fb      	strb	r3, [r7, #27]
 8005180:	4b2e      	ldr	r3, [pc, #184]	; (800523c <prepareMenu+0x284>)
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	7efa      	ldrb	r2, [r7, #27]
 8005186:	429a      	cmp	r2, r3
 8005188:	d3dc      	bcc.n	8005144 <prepareMenu+0x18c>
    	}
    }
    if ( 0u != fInvalidCommand )
 800518a:	4b2d      	ldr	r3, [pc, #180]	; (8005240 <prepareMenu+0x288>)
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d015      	beq.n	80051be <prepareMenu+0x206>
    {//command NOK
    	fInvalidCommand = 0u;
 8005192:	4b2b      	ldr	r3, [pc, #172]	; (8005240 <prepareMenu+0x288>)
 8005194:	2200      	movs	r2, #0
 8005196:	701a      	strb	r2, [r3, #0]
    	for (lIdx=0u; lIdx<sizeof(mErrNOk); lIdx++)
 8005198:	2300      	movs	r3, #0
 800519a:	83fb      	strh	r3, [r7, #30]
 800519c:	e00b      	b.n	80051b6 <prepareMenu+0x1fe>
    	{
    		uartMenu[lIdxuMenu] = mErrNOk[lIdx];
 800519e:	8bfa      	ldrh	r2, [r7, #30]
 80051a0:	8bbb      	ldrh	r3, [r7, #28]
 80051a2:	4928      	ldr	r1, [pc, #160]	; (8005244 <prepareMenu+0x28c>)
 80051a4:	5c89      	ldrb	r1, [r1, r2]
 80051a6:	4a1e      	ldr	r2, [pc, #120]	; (8005220 <prepareMenu+0x268>)
 80051a8:	54d1      	strb	r1, [r2, r3]
    		lIdxuMenu++;
 80051aa:	8bbb      	ldrh	r3, [r7, #28]
 80051ac:	3301      	adds	r3, #1
 80051ae:	83bb      	strh	r3, [r7, #28]
    	for (lIdx=0u; lIdx<sizeof(mErrNOk); lIdx++)
 80051b0:	8bfb      	ldrh	r3, [r7, #30]
 80051b2:	3301      	adds	r3, #1
 80051b4:	83fb      	strh	r3, [r7, #30]
 80051b6:	8bfb      	ldrh	r3, [r7, #30]
 80051b8:	2b0f      	cmp	r3, #15
 80051ba:	d9f0      	bls.n	800519e <prepareMenu+0x1e6>
 80051bc:	e011      	b.n	80051e2 <prepareMenu+0x22a>
    	}
    }
    else
    {//command OK
    	for (lIdx=0u; lIdx<sizeof(mErrOk); lIdx++)
 80051be:	2300      	movs	r3, #0
 80051c0:	83fb      	strh	r3, [r7, #30]
 80051c2:	e00b      	b.n	80051dc <prepareMenu+0x224>
    	{
    		uartMenu[lIdxuMenu] = mErrOk[lIdx];
 80051c4:	8bfa      	ldrh	r2, [r7, #30]
 80051c6:	8bbb      	ldrh	r3, [r7, #28]
 80051c8:	491f      	ldr	r1, [pc, #124]	; (8005248 <prepareMenu+0x290>)
 80051ca:	5c89      	ldrb	r1, [r1, r2]
 80051cc:	4a14      	ldr	r2, [pc, #80]	; (8005220 <prepareMenu+0x268>)
 80051ce:	54d1      	strb	r1, [r2, r3]
    		lIdxuMenu++;
 80051d0:	8bbb      	ldrh	r3, [r7, #28]
 80051d2:	3301      	adds	r3, #1
 80051d4:	83bb      	strh	r3, [r7, #28]
    	for (lIdx=0u; lIdx<sizeof(mErrOk); lIdx++)
 80051d6:	8bfb      	ldrh	r3, [r7, #30]
 80051d8:	3301      	adds	r3, #1
 80051da:	83fb      	strh	r3, [r7, #30]
 80051dc:	8bfb      	ldrh	r3, [r7, #30]
 80051de:	2b1d      	cmp	r3, #29
 80051e0:	d9f0      	bls.n	80051c4 <prepareMenu+0x20c>
    	}
    }

	for (lIdx=0u; lIdx<sizeof(mPrompt); lIdx++)
 80051e2:	2300      	movs	r3, #0
 80051e4:	83fb      	strh	r3, [r7, #30]
 80051e6:	e00b      	b.n	8005200 <prepareMenu+0x248>
	{
		uartMenu[lIdxuMenu] = mPrompt[lIdx];
 80051e8:	8bfa      	ldrh	r2, [r7, #30]
 80051ea:	8bbb      	ldrh	r3, [r7, #28]
 80051ec:	4917      	ldr	r1, [pc, #92]	; (800524c <prepareMenu+0x294>)
 80051ee:	5c89      	ldrb	r1, [r1, r2]
 80051f0:	4a0b      	ldr	r2, [pc, #44]	; (8005220 <prepareMenu+0x268>)
 80051f2:	54d1      	strb	r1, [r2, r3]
		lIdxuMenu++;
 80051f4:	8bbb      	ldrh	r3, [r7, #28]
 80051f6:	3301      	adds	r3, #1
 80051f8:	83bb      	strh	r3, [r7, #28]
	for (lIdx=0u; lIdx<sizeof(mPrompt); lIdx++)
 80051fa:	8bfb      	ldrh	r3, [r7, #30]
 80051fc:	3301      	adds	r3, #1
 80051fe:	83fb      	strh	r3, [r7, #30]
 8005200:	8bfb      	ldrh	r3, [r7, #30]
 8005202:	2b04      	cmp	r3, #4
 8005204:	d9f0      	bls.n	80051e8 <prepareMenu+0x230>
	}

	return lIdxuMenu;
 8005206:	8bbb      	ldrh	r3, [r7, #28]

}
 8005208:	4618      	mov	r0, r3
 800520a:	3720      	adds	r7, #32
 800520c:	46bd      	mov	sp, r7
 800520e:	bc90      	pop	{r4, r7}
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	08005778 	.word	0x08005778
 8005218:	08005788 	.word	0x08005788
 800521c:	20000bfa 	.word	0x20000bfa
 8005220:	200007e8 	.word	0x200007e8
 8005224:	cccccccd 	.word	0xcccccccd
 8005228:	20000090 	.word	0x20000090
 800522c:	2000024c 	.word	0x2000024c
 8005230:	200002a4 	.word	0x200002a4
 8005234:	200001f0 	.word	0x200001f0
 8005238:	20000610 	.word	0x20000610
 800523c:	200007e6 	.word	0x200007e6
 8005240:	20000bf9 	.word	0x20000bf9
 8005244:	20000030 	.word	0x20000030
 8005248:	20000010 	.word	0x20000010
 800524c:	20000040 	.word	0x20000040

08005250 <processChoice>:

static void processChoice(uint8_t choice[]) {
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
	uint8_t lIdx = 0u;
 8005258:	2300      	movs	r3, #0
 800525a:	73fb      	strb	r3, [r7, #15]
	uint8_t lMenuItem = 0u;
 800525c:	2300      	movs	r3, #0
 800525e:	73bb      	strb	r3, [r7, #14]
	uint8_t lFound = 0u;
 8005260:	2300      	movs	r3, #0
 8005262:	737b      	strb	r3, [r7, #13]

	for (/*lMenuItem initialized above*/; lMenuItem<menuSize; lMenuItem++)
 8005264:	e02d      	b.n	80052c2 <processChoice+0x72>
	{
		lFound = 1u;
 8005266:	2301      	movs	r3, #1
 8005268:	737b      	strb	r3, [r7, #13]
		for (lIdx = 0u; lIdx<sizeof(menu[lMenuItem].optionName); lIdx++)
 800526a:	2300      	movs	r3, #0
 800526c:	73fb      	strb	r3, [r7, #15]
 800526e:	e015      	b.n	800529c <processChoice+0x4c>
		{
			if (choice[lIdx] != menu[lMenuItem].optionName[lIdx])
 8005270:	7bfb      	ldrb	r3, [r7, #15]
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	4413      	add	r3, r2
 8005276:	7819      	ldrb	r1, [r3, #0]
 8005278:	7bba      	ldrb	r2, [r7, #14]
 800527a:	4817      	ldr	r0, [pc, #92]	; (80052d8 <processChoice+0x88>)
 800527c:	4613      	mov	r3, r2
 800527e:	005b      	lsls	r3, r3, #1
 8005280:	4413      	add	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4403      	add	r3, r0
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	7bfb      	ldrb	r3, [r7, #15]
 800528a:	4413      	add	r3, r2
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	4299      	cmp	r1, r3
 8005290:	d001      	beq.n	8005296 <processChoice+0x46>
			{
				lFound = 0u;
 8005292:	2300      	movs	r3, #0
 8005294:	737b      	strb	r3, [r7, #13]
		for (lIdx = 0u; lIdx<sizeof(menu[lMenuItem].optionName); lIdx++)
 8005296:	7bfb      	ldrb	r3, [r7, #15]
 8005298:	3301      	adds	r3, #1
 800529a:	73fb      	strb	r3, [r7, #15]
 800529c:	7bfb      	ldrb	r3, [r7, #15]
 800529e:	2b03      	cmp	r3, #3
 80052a0:	d9e6      	bls.n	8005270 <processChoice+0x20>
			}
		}

		if ( 0u != lFound )
 80052a2:	7b7b      	ldrb	r3, [r7, #13]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d009      	beq.n	80052bc <processChoice+0x6c>
		{
			menu[lMenuItem].action();
 80052a8:	7bba      	ldrb	r2, [r7, #14]
 80052aa:	490b      	ldr	r1, [pc, #44]	; (80052d8 <processChoice+0x88>)
 80052ac:	4613      	mov	r3, r2
 80052ae:	005b      	lsls	r3, r3, #1
 80052b0:	4413      	add	r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	440b      	add	r3, r1
 80052b6:	3308      	adds	r3, #8
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4798      	blx	r3
	for (/*lMenuItem initialized above*/; lMenuItem<menuSize; lMenuItem++)
 80052bc:	7bbb      	ldrb	r3, [r7, #14]
 80052be:	3301      	adds	r3, #1
 80052c0:	73bb      	strb	r3, [r7, #14]
 80052c2:	4b06      	ldr	r3, [pc, #24]	; (80052dc <processChoice+0x8c>)
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	7bba      	ldrb	r2, [r7, #14]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d3cc      	bcc.n	8005266 <processChoice+0x16>
		}
	}
}
 80052cc:	bf00      	nop
 80052ce:	bf00      	nop
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	20000610 	.word	0x20000610
 80052dc:	200007e6 	.word	0x200007e6

080052e0 <processSSIRxData>:

static void processSSIRxData( void )
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
	uint8_t lIdx = 0u;
 80052e6:	2300      	movs	r3, #0
 80052e8:	71fb      	strb	r3, [r7, #7]
	uint8_t bitNb = 0u;
 80052ea:	2300      	movs	r3, #0
 80052ec:	71bb      	strb	r3, [r7, #6]
	uint16_t lencVal = 0u;
 80052ee:	2300      	movs	r3, #0
 80052f0:	80bb      	strh	r3, [r7, #4]

	for (lIdx=0u;lIdx<ssiClkEdgesNb;lIdx+=2u)
 80052f2:	2300      	movs	r3, #0
 80052f4:	71fb      	strb	r3, [r7, #7]
 80052f6:	e014      	b.n	8005322 <processSSIRxData+0x42>
	{
		lencVal |= cOtpData[lIdx]<<bitNb; //cOtpData has only 0's and 1's
 80052f8:	4b11      	ldr	r3, [pc, #68]	; (8005340 <processSSIRxData+0x60>)
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	79fb      	ldrb	r3, [r7, #7]
 80052fe:	4413      	add	r3, r2
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	461a      	mov	r2, r3
 8005304:	79bb      	ldrb	r3, [r7, #6]
 8005306:	fa02 f303 	lsl.w	r3, r2, r3
 800530a:	b21a      	sxth	r2, r3
 800530c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005310:	4313      	orrs	r3, r2
 8005312:	b21b      	sxth	r3, r3
 8005314:	80bb      	strh	r3, [r7, #4]
		bitNb++;
 8005316:	79bb      	ldrb	r3, [r7, #6]
 8005318:	3301      	adds	r3, #1
 800531a:	71bb      	strb	r3, [r7, #6]
	for (lIdx=0u;lIdx<ssiClkEdgesNb;lIdx+=2u)
 800531c:	79fb      	ldrb	r3, [r7, #7]
 800531e:	3302      	adds	r3, #2
 8005320:	71fb      	strb	r3, [r7, #7]
 8005322:	4b08      	ldr	r3, [pc, #32]	; (8005344 <processSSIRxData+0x64>)
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	79fa      	ldrb	r2, [r7, #7]
 8005328:	429a      	cmp	r2, r3
 800532a:	d3e5      	bcc.n	80052f8 <processSSIRxData+0x18>
	}
	encVal = lencVal;
 800532c:	4a06      	ldr	r2, [pc, #24]	; (8005348 <processSSIRxData+0x68>)
 800532e:	88bb      	ldrh	r3, [r7, #4]
 8005330:	8013      	strh	r3, [r2, #0]
}
 8005332:	bf00      	nop
 8005334:	370c      	adds	r7, #12
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	20000bf0 	.word	0x20000bf0
 8005344:	20000bf4 	.word	0x20000bf4
 8005348:	20000bfa 	.word	0x20000bfa

0800534c <uInit>:



void uInit( void )
{
 800534c:	b480      	push	{r7}
 800534e:	af00      	add	r7, sp, #0
	menuSize = 4u;
 8005350:	4b12      	ldr	r3, [pc, #72]	; (800539c <uInit+0x50>)
 8005352:	2204      	movs	r2, #4
 8005354:	701a      	strb	r2, [r3, #0]
	uState = eInit;
 8005356:	4b12      	ldr	r3, [pc, #72]	; (80053a0 <uInit+0x54>)
 8005358:	2200      	movs	r2, #0
 800535a:	701a      	strb	r2, [r3, #0]

	fWaitSSITransfer = 0u;
 800535c:	4b11      	ldr	r3, [pc, #68]	; (80053a4 <uInit+0x58>)
 800535e:	2200      	movs	r2, #0
 8005360:	701a      	strb	r2, [r3, #0]
	fParseSSIRxData = 0u;
 8005362:	4b11      	ldr	r3, [pc, #68]	; (80053a8 <uInit+0x5c>)
 8005364:	2200      	movs	r2, #0
 8005366:	701a      	strb	r2, [r3, #0]

	ssiMode = read;
 8005368:	4b10      	ldr	r3, [pc, #64]	; (80053ac <uInit+0x60>)
 800536a:	2200      	movs	r2, #0
 800536c:	701a      	strb	r2, [r3, #0]
	ssiClkEdgesNb = 2u*32u;
 800536e:	4b10      	ldr	r3, [pc, #64]	; (80053b0 <uInit+0x64>)
 8005370:	2240      	movs	r2, #64	; 0x40
 8005372:	701a      	strb	r2, [r3, #0]
	fUARTRx = 0u;
 8005374:	4b0f      	ldr	r3, [pc, #60]	; (80053b4 <uInit+0x68>)
 8005376:	2200      	movs	r2, #0
 8005378:	701a      	strb	r2, [r3, #0]
	cntWaitOTPWriteStatusFlags = 0u;
 800537a:	4b0f      	ldr	r3, [pc, #60]	; (80053b8 <uInit+0x6c>)
 800537c:	2200      	movs	r2, #0
 800537e:	601a      	str	r2, [r3, #0]

	fInvalidCommand = 0u;
 8005380:	4b0e      	ldr	r3, [pc, #56]	; (80053bc <uInit+0x70>)
 8005382:	2200      	movs	r2, #0
 8005384:	701a      	strb	r2, [r3, #0]

	cOtpClk = &otpData[read][clk][0];
 8005386:	4b0e      	ldr	r3, [pc, #56]	; (80053c0 <uInit+0x74>)
 8005388:	4a0e      	ldr	r2, [pc, #56]	; (80053c4 <uInit+0x78>)
 800538a:	601a      	str	r2, [r3, #0]
	cOtpData = &otpData[read][dat][0];
 800538c:	4b0e      	ldr	r3, [pc, #56]	; (80053c8 <uInit+0x7c>)
 800538e:	4a0f      	ldr	r2, [pc, #60]	; (80053cc <uInit+0x80>)
 8005390:	601a      	str	r2, [r3, #0]
}
 8005392:	bf00      	nop
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr
 800539c:	200007e6 	.word	0x200007e6
 80053a0:	20000be8 	.word	0x20000be8
 80053a4:	20000bf7 	.word	0x20000bf7
 80053a8:	20000bf8 	.word	0x20000bf8
 80053ac:	20000beb 	.word	0x20000beb
 80053b0:	20000bf4 	.word	0x20000bf4
 80053b4:	20000bf5 	.word	0x20000bf5
 80053b8:	20000c00 	.word	0x20000c00
 80053bc:	20000bf9 	.word	0x20000bf9
 80053c0:	20000bec 	.word	0x20000bec
 80053c4:	20000090 	.word	0x20000090
 80053c8:	20000bf0 	.word	0x20000bf0
 80053cc:	200000d8 	.word	0x200000d8

080053d0 <uTask>:

void uTask( void ) {
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
	uint16_t uartDataSize = 0u;
 80053d6:	2300      	movs	r3, #0
 80053d8:	80fb      	strh	r3, [r7, #6]

	switch (uState)
 80053da:	4b32      	ldr	r3, [pc, #200]	; (80054a4 <uTask+0xd4>)
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	2b04      	cmp	r3, #4
 80053e0:	d852      	bhi.n	8005488 <uTask+0xb8>
 80053e2:	a201      	add	r2, pc, #4	; (adr r2, 80053e8 <uTask+0x18>)
 80053e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e8:	080053fd 	.word	0x080053fd
 80053ec:	0800540f 	.word	0x0800540f
 80053f0:	08005457 	.word	0x08005457
 80053f4:	0800543b 	.word	0x0800543b
 80053f8:	08005473 	.word	0x08005473
	{
	case eInit:
		HAL_UART_Receive_DMA(&huart3, uartRxBuf, sizeof(uartRxBuf));
 80053fc:	220a      	movs	r2, #10
 80053fe:	492a      	ldr	r1, [pc, #168]	; (80054a8 <uTask+0xd8>)
 8005400:	482a      	ldr	r0, [pc, #168]	; (80054ac <uTask+0xdc>)
 8005402:	f7fe faa5 	bl	8003950 <HAL_UART_Receive_DMA>
		uState=eWaitRx;
 8005406:	4b27      	ldr	r3, [pc, #156]	; (80054a4 <uTask+0xd4>)
 8005408:	2201      	movs	r2, #1
 800540a:	701a      	strb	r2, [r3, #0]

		break;
 800540c:	e045      	b.n	800549a <uTask+0xca>
	case eWaitRx:
		if ( 0u != fUARTRx )
 800540e:	4b28      	ldr	r3, [pc, #160]	; (80054b0 <uTask+0xe0>)
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d03c      	beq.n	8005490 <uTask+0xc0>
		{
			fUARTRx = 0u;
 8005416:	4b26      	ldr	r3, [pc, #152]	; (80054b0 <uTask+0xe0>)
 8005418:	2200      	movs	r2, #0
 800541a:	701a      	strb	r2, [r3, #0]
			processChoice(uartRxBuf);
 800541c:	4822      	ldr	r0, [pc, #136]	; (80054a8 <uTask+0xd8>)
 800541e:	f7ff ff17 	bl	8005250 <processChoice>
			if ( 0u == fWaitSSITransfer )
 8005422:	4b24      	ldr	r3, [pc, #144]	; (80054b4 <uTask+0xe4>)
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d103      	bne.n	8005432 <uTask+0x62>
			{//command does not start SSI transfer
				uState=eWaitChoiceActions;
 800542a:	4b1e      	ldr	r3, [pc, #120]	; (80054a4 <uTask+0xd4>)
 800542c:	2202      	movs	r2, #2
 800542e:	701a      	strb	r2, [r3, #0]
			else
			{//SSI transfer started
				uState = eWaitSSITransfer;
			}
		}
		break;
 8005430:	e02e      	b.n	8005490 <uTask+0xc0>
				uState = eWaitSSITransfer;
 8005432:	4b1c      	ldr	r3, [pc, #112]	; (80054a4 <uTask+0xd4>)
 8005434:	2203      	movs	r2, #3
 8005436:	701a      	strb	r2, [r3, #0]
		break;
 8005438:	e02a      	b.n	8005490 <uTask+0xc0>
	case eWaitSSITransfer:
		if ( 0u == fWaitSSITransfer )
 800543a:	4b1e      	ldr	r3, [pc, #120]	; (80054b4 <uTask+0xe4>)
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d128      	bne.n	8005494 <uTask+0xc4>
		{
			if ( 0u != fParseSSIRxData )
 8005442:	4b1d      	ldr	r3, [pc, #116]	; (80054b8 <uTask+0xe8>)
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d001      	beq.n	800544e <uTask+0x7e>
			{
				processSSIRxData();
 800544a:	f7ff ff49 	bl	80052e0 <processSSIRxData>
			}
			uState=eWaitChoiceActions;
 800544e:	4b15      	ldr	r3, [pc, #84]	; (80054a4 <uTask+0xd4>)
 8005450:	2202      	movs	r2, #2
 8005452:	701a      	strb	r2, [r3, #0]
		}//else: wait some more
		break;
 8005454:	e01e      	b.n	8005494 <uTask+0xc4>
	case eWaitChoiceActions:

		uartDataSize = prepareMenu();
 8005456:	f7ff fdaf 	bl	8004fb8 <prepareMenu>
 800545a:	4603      	mov	r3, r0
 800545c:	80fb      	strh	r3, [r7, #6]
		HAL_UART_Transmit_DMA(&huart3, uartMenu, uartDataSize);
 800545e:	88fb      	ldrh	r3, [r7, #6]
 8005460:	461a      	mov	r2, r3
 8005462:	4916      	ldr	r1, [pc, #88]	; (80054bc <uTask+0xec>)
 8005464:	4811      	ldr	r0, [pc, #68]	; (80054ac <uTask+0xdc>)
 8005466:	f7fe f9f7 	bl	8003858 <HAL_UART_Transmit_DMA>

		uState=eWaitTxEnd;
 800546a:	4b0e      	ldr	r3, [pc, #56]	; (80054a4 <uTask+0xd4>)
 800546c:	2204      	movs	r2, #4
 800546e:	701a      	strb	r2, [r3, #0]
		break;
 8005470:	e013      	b.n	800549a <uTask+0xca>
	case eWaitTxEnd:
		if ( 0u != fUARTTx )
 8005472:	4b13      	ldr	r3, [pc, #76]	; (80054c0 <uTask+0xf0>)
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00e      	beq.n	8005498 <uTask+0xc8>
		{
			fUARTTx = 0u;
 800547a:	4b11      	ldr	r3, [pc, #68]	; (80054c0 <uTask+0xf0>)
 800547c:	2200      	movs	r2, #0
 800547e:	701a      	strb	r2, [r3, #0]
			uState=eInit;
 8005480:	4b08      	ldr	r3, [pc, #32]	; (80054a4 <uTask+0xd4>)
 8005482:	2200      	movs	r2, #0
 8005484:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005486:	e007      	b.n	8005498 <uTask+0xc8>
	default:
		uState = eInit;
 8005488:	4b06      	ldr	r3, [pc, #24]	; (80054a4 <uTask+0xd4>)
 800548a:	2200      	movs	r2, #0
 800548c:	701a      	strb	r2, [r3, #0]
		break;
 800548e:	e004      	b.n	800549a <uTask+0xca>
		break;
 8005490:	bf00      	nop
 8005492:	e002      	b.n	800549a <uTask+0xca>
		break;
 8005494:	bf00      	nop
 8005496:	e000      	b.n	800549a <uTask+0xca>
		break;
 8005498:	bf00      	nop
	}

}
 800549a:	bf00      	nop
 800549c:	3708      	adds	r7, #8
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	20000be8 	.word	0x20000be8
 80054a8:	200007dc 	.word	0x200007dc
 80054ac:	200006a8 	.word	0x200006a8
 80054b0:	20000bf5 	.word	0x20000bf5
 80054b4:	20000bf7 	.word	0x20000bf7
 80054b8:	20000bf8 	.word	0x20000bf8
 80054bc:	200007e8 	.word	0x200007e8
 80054c0:	20000bf6 	.word	0x20000bf6

080054c4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054c4:	b590      	push	{r4, r7, lr}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, ssiClk_Pin, cOtpClk[tim1Tick]);
 80054cc:	4b36      	ldr	r3, [pc, #216]	; (80055a8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	4b36      	ldr	r3, [pc, #216]	; (80055ac <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4413      	add	r3, r2
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	461a      	mov	r2, r3
 80054da:	2140      	movs	r1, #64	; 0x40
 80054dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054e0:	f7fb ffd0 	bl	8001484 <HAL_GPIO_WritePin>
	if (write == ssiMode)
 80054e4:	4b32      	ldr	r3, [pc, #200]	; (80055b0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d10c      	bne.n	8005506 <HAL_TIM_PeriodElapsedCallback+0x42>
	{
		HAL_GPIO_WritePin(GPIOA, ssiDO_Pin, cOtpData[tim1Tick]);
 80054ec:	4b31      	ldr	r3, [pc, #196]	; (80055b4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	4b2e      	ldr	r3, [pc, #184]	; (80055ac <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4413      	add	r3, r2
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	461a      	mov	r2, r3
 80054fa:	2180      	movs	r1, #128	; 0x80
 80054fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005500:	f7fb ffc0 	bl	8001484 <HAL_GPIO_WritePin>
 8005504:	e00b      	b.n	800551e <HAL_TIM_PeriodElapsedCallback+0x5a>
	}
	else
	{
		cOtpData[tim1Tick] = HAL_GPIO_ReadPin(GPIOA, ssiDO_Pin); //read on every edge but later use only the data sampled on falling edge
 8005506:	4b2b      	ldr	r3, [pc, #172]	; (80055b4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	4b28      	ldr	r3, [pc, #160]	; (80055ac <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	18d4      	adds	r4, r2, r3
 8005510:	2180      	movs	r1, #128	; 0x80
 8005512:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005516:	f7fb ff9d 	bl	8001454 <HAL_GPIO_ReadPin>
 800551a:	4603      	mov	r3, r0
 800551c:	7023      	strb	r3, [r4, #0]
	}
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin); //led shows the TX status
 800551e:	2101      	movs	r1, #1
 8005520:	4825      	ldr	r0, [pc, #148]	; (80055b8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8005522:	f7fb ffc7 	bl	80014b4 <HAL_GPIO_TogglePin>

	if (tim1Tick< ssiClkEdgesNb)
 8005526:	4b25      	ldr	r3, [pc, #148]	; (80055bc <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	461a      	mov	r2, r3
 800552c:	4b1f      	ldr	r3, [pc, #124]	; (80055ac <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	429a      	cmp	r2, r3
 8005532:	d905      	bls.n	8005540 <HAL_TIM_PeriodElapsedCallback+0x7c>
	{
		tim1Tick++;
 8005534:	4b1d      	ldr	r3, [pc, #116]	; (80055ac <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	3301      	adds	r3, #1
 800553a:	4a1c      	ldr	r2, [pc, #112]	; (80055ac <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800553c:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOA, ssiNCS_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET); //led shows the TX status finished
			fWaitSSITransfer = 0u;
		}
	}
}
 800553e:	e02e      	b.n	800559e <HAL_TIM_PeriodElapsedCallback+0xda>
		if ( ( write == ssiMode ) && (cntWaitOTPWriteStatusFlags > 0u ) )
 8005540:	4b1b      	ldr	r3, [pc, #108]	; (80055b0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d115      	bne.n	8005574 <HAL_TIM_PeriodElapsedCallback+0xb0>
 8005548:	4b1d      	ldr	r3, [pc, #116]	; (80055c0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d011      	beq.n	8005574 <HAL_TIM_PeriodElapsedCallback+0xb0>
			if ( ( 0u == fLedMagHiToggled ) && ( 0u == fLedMagLoToggled ) )
 8005550:	4b1c      	ldr	r3, [pc, #112]	; (80055c4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d109      	bne.n	800556c <HAL_TIM_PeriodElapsedCallback+0xa8>
 8005558:	4b1b      	ldr	r3, [pc, #108]	; (80055c8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d105      	bne.n	800556c <HAL_TIM_PeriodElapsedCallback+0xa8>
				cntWaitOTPWriteStatusFlags--;
 8005560:	4b17      	ldr	r3, [pc, #92]	; (80055c0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	3b01      	subs	r3, #1
 8005566:	4a16      	ldr	r2, [pc, #88]	; (80055c0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8005568:	6013      	str	r3, [r2, #0]
			if ( ( 0u == fLedMagHiToggled ) && ( 0u == fLedMagLoToggled ) )
 800556a:	e018      	b.n	800559e <HAL_TIM_PeriodElapsedCallback+0xda>
				cntWaitOTPWriteStatusFlags = 0u;
 800556c:	4b14      	ldr	r3, [pc, #80]	; (80055c0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800556e:	2200      	movs	r2, #0
 8005570:	601a      	str	r2, [r3, #0]
			if ( ( 0u == fLedMagHiToggled ) && ( 0u == fLedMagLoToggled ) )
 8005572:	e014      	b.n	800559e <HAL_TIM_PeriodElapsedCallback+0xda>
			tim1Tick=0u;
 8005574:	4b0d      	ldr	r3, [pc, #52]	; (80055ac <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8005576:	2200      	movs	r2, #0
 8005578:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim1);
 800557a:	4814      	ldr	r0, [pc, #80]	; (80055cc <HAL_TIM_PeriodElapsedCallback+0x108>)
 800557c:	f7fd fd0e 	bl	8002f9c <HAL_TIM_Base_Stop_IT>
			HAL_GPIO_WritePin(GPIOA, ssiNCS_Pin, GPIO_PIN_SET);
 8005580:	2201      	movs	r2, #1
 8005582:	2120      	movs	r1, #32
 8005584:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005588:	f7fb ff7c 	bl	8001484 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET); //led shows the TX status finished
 800558c:	2200      	movs	r2, #0
 800558e:	2101      	movs	r1, #1
 8005590:	4809      	ldr	r0, [pc, #36]	; (80055b8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8005592:	f7fb ff77 	bl	8001484 <HAL_GPIO_WritePin>
			fWaitSSITransfer = 0u;
 8005596:	4b0e      	ldr	r3, [pc, #56]	; (80055d0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8005598:	2200      	movs	r2, #0
 800559a:	701a      	strb	r2, [r3, #0]
}
 800559c:	e7ff      	b.n	800559e <HAL_TIM_PeriodElapsedCallback+0xda>
 800559e:	bf00      	nop
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd90      	pop	{r4, r7, pc}
 80055a6:	bf00      	nop
 80055a8:	20000bec 	.word	0x20000bec
 80055ac:	20000bfc 	.word	0x20000bfc
 80055b0:	20000beb 	.word	0x20000beb
 80055b4:	20000bf0 	.word	0x20000bf0
 80055b8:	48000400 	.word	0x48000400
 80055bc:	20000bf4 	.word	0x20000bf4
 80055c0:	20000c00 	.word	0x20000c00
 80055c4:	20000be9 	.word	0x20000be9
 80055c8:	20000bea 	.word	0x20000bea
 80055cc:	2000065c 	.word	0x2000065c
 80055d0:	20000bf7 	.word	0x20000bf7

080055d4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
	if ( USART3 == huart->Instance)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a05      	ldr	r2, [pc, #20]	; (80055f8 <HAL_UART_RxCpltCallback+0x24>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d102      	bne.n	80055ec <HAL_UART_RxCpltCallback+0x18>
	{
		fUARTRx = 1u;
 80055e6:	4b05      	ldr	r3, [pc, #20]	; (80055fc <HAL_UART_RxCpltCallback+0x28>)
 80055e8:	2201      	movs	r2, #1
 80055ea:	701a      	strb	r2, [r3, #0]
	}
}
 80055ec:	bf00      	nop
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr
 80055f8:	40004800 	.word	0x40004800
 80055fc:	20000bf5 	.word	0x20000bf5

08005600 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
	if ( USART3 == huart->Instance)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a05      	ldr	r2, [pc, #20]	; (8005624 <HAL_UART_TxCpltCallback+0x24>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d102      	bne.n	8005618 <HAL_UART_TxCpltCallback+0x18>
	{
		fUARTTx = 1u;
 8005612:	4b05      	ldr	r3, [pc, #20]	; (8005628 <HAL_UART_TxCpltCallback+0x28>)
 8005614:	2201      	movs	r2, #1
 8005616:	701a      	strb	r2, [r3, #0]
	}
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr
 8005624:	40004800 	.word	0x40004800
 8005628:	20000bf6 	.word	0x20000bf6

0800562c <__libc_init_array>:
 800562c:	b570      	push	{r4, r5, r6, lr}
 800562e:	4d0d      	ldr	r5, [pc, #52]	; (8005664 <__libc_init_array+0x38>)
 8005630:	4c0d      	ldr	r4, [pc, #52]	; (8005668 <__libc_init_array+0x3c>)
 8005632:	1b64      	subs	r4, r4, r5
 8005634:	10a4      	asrs	r4, r4, #2
 8005636:	2600      	movs	r6, #0
 8005638:	42a6      	cmp	r6, r4
 800563a:	d109      	bne.n	8005650 <__libc_init_array+0x24>
 800563c:	4d0b      	ldr	r5, [pc, #44]	; (800566c <__libc_init_array+0x40>)
 800563e:	4c0c      	ldr	r4, [pc, #48]	; (8005670 <__libc_init_array+0x44>)
 8005640:	f000 f820 	bl	8005684 <_init>
 8005644:	1b64      	subs	r4, r4, r5
 8005646:	10a4      	asrs	r4, r4, #2
 8005648:	2600      	movs	r6, #0
 800564a:	42a6      	cmp	r6, r4
 800564c:	d105      	bne.n	800565a <__libc_init_array+0x2e>
 800564e:	bd70      	pop	{r4, r5, r6, pc}
 8005650:	f855 3b04 	ldr.w	r3, [r5], #4
 8005654:	4798      	blx	r3
 8005656:	3601      	adds	r6, #1
 8005658:	e7ee      	b.n	8005638 <__libc_init_array+0xc>
 800565a:	f855 3b04 	ldr.w	r3, [r5], #4
 800565e:	4798      	blx	r3
 8005660:	3601      	adds	r6, #1
 8005662:	e7f2      	b.n	800564a <__libc_init_array+0x1e>
 8005664:	080057c8 	.word	0x080057c8
 8005668:	080057c8 	.word	0x080057c8
 800566c:	080057c8 	.word	0x080057c8
 8005670:	080057cc 	.word	0x080057cc

08005674 <memset>:
 8005674:	4402      	add	r2, r0
 8005676:	4603      	mov	r3, r0
 8005678:	4293      	cmp	r3, r2
 800567a:	d100      	bne.n	800567e <memset+0xa>
 800567c:	4770      	bx	lr
 800567e:	f803 1b01 	strb.w	r1, [r3], #1
 8005682:	e7f9      	b.n	8005678 <memset+0x4>

08005684 <_init>:
 8005684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005686:	bf00      	nop
 8005688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800568a:	bc08      	pop	{r3}
 800568c:	469e      	mov	lr, r3
 800568e:	4770      	bx	lr

08005690 <_fini>:
 8005690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005692:	bf00      	nop
 8005694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005696:	bc08      	pop	{r3}
 8005698:	469e      	mov	lr, r3
 800569a:	4770      	bx	lr
