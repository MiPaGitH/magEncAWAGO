
writeAEAT6600OTPRegToEnableABIMode_nucleoF303Ze.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e1c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003fb0  08003fb0  00013fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fe0  08003fe0  000201c4  2**0
                  CONTENTS
  4 .ARM          00000000  08003fe0  08003fe0  000201c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003fe0  08003fe0  000201c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fe0  08003fe0  00013fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fe4  08003fe4  00013fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c4  20000000  08003fe8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201c4  2**0
                  CONTENTS
 10 .bss          00000100  200001c4  200001c4  000201c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002c4  200002c4  000201c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c365  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019f9  00000000  00000000  0002c559  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b98  00000000  00000000  0002df58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ad0  00000000  00000000  0002eaf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fa0a  00000000  00000000  0002f5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dbed  00000000  00000000  0004efca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3c4d  00000000  00000000  0005cbb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00120804  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000030b0  00000000  00000000  00120854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200001c4 	.word	0x200001c4
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003f98 	.word	0x08003f98

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200001c8 	.word	0x200001c8
 80001d0:	08003f98 	.word	0x08003f98

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
//	GPIO_InitTypeDef GPIO_InitStruct = {0};
	cOtpClk = &otpData[0][0][0];
 80001da:	4b5e      	ldr	r3, [pc, #376]	; (8000354 <main+0x180>)
 80001dc:	4a5e      	ldr	r2, [pc, #376]	; (8000358 <main+0x184>)
 80001de:	601a      	str	r2, [r3, #0]
	cOtpData = &otpData[0][1][0];
 80001e0:	4b5e      	ldr	r3, [pc, #376]	; (800035c <main+0x188>)
 80001e2:	4a5f      	ldr	r2, [pc, #380]	; (8000360 <main+0x18c>)
 80001e4:	601a      	str	r2, [r3, #0]

//	uint8_t fSetPin2InputMode = 0u;
	oldTick = 0u;
 80001e6:	4b5f      	ldr	r3, [pc, #380]	; (8000364 <main+0x190>)
 80001e8:	2200      	movs	r2, #0
 80001ea:	601a      	str	r2, [r3, #0]
	oldBtn = 10000u;
 80001ec:	4b5e      	ldr	r3, [pc, #376]	; (8000368 <main+0x194>)
 80001ee:	f242 7210 	movw	r2, #10000	; 0x2710
 80001f2:	601a      	str	r2, [r3, #0]
	csPinState = GPIO_PIN_SET;
 80001f4:	4b5d      	ldr	r3, [pc, #372]	; (800036c <main+0x198>)
 80001f6:	2201      	movs	r2, #1
 80001f8:	701a      	strb	r2, [r3, #0]
	dataPinState = GPIO_PIN_SET;
 80001fa:	4b5d      	ldr	r3, [pc, #372]	; (8000370 <main+0x19c>)
 80001fc:	2201      	movs	r2, #1
 80001fe:	701a      	strb	r2, [r3, #0]
	clkPinState = GPIO_PIN_SET;
 8000200:	4b5c      	ldr	r3, [pc, #368]	; (8000374 <main+0x1a0>)
 8000202:	2201      	movs	r2, #1
 8000204:	701a      	strb	r2, [r3, #0]
	cntClkRisingEdge = 0u;
 8000206:	4b5c      	ldr	r3, [pc, #368]	; (8000378 <main+0x1a4>)
 8000208:	2200      	movs	r2, #0
 800020a:	601a      	str	r2, [r3, #0]
	btnPressed = 0u;
 800020c:	4b5b      	ldr	r3, [pc, #364]	; (800037c <main+0x1a8>)
 800020e:	2200      	movs	r2, #0
 8000210:	701a      	strb	r2, [r3, #0]
	doInputMode = 0u;
 8000212:	4b5b      	ldr	r3, [pc, #364]	; (8000380 <main+0x1ac>)
 8000214:	2200      	movs	r2, #0
 8000216:	701a      	strb	r2, [r3, #0]
	evTim1Tick = 0u;
 8000218:	4b5a      	ldr	r3, [pc, #360]	; (8000384 <main+0x1b0>)
 800021a:	2200      	movs	r2, #0
 800021c:	701a      	strb	r2, [r3, #0]

	pState = 0u;
 800021e:	4b5a      	ldr	r3, [pc, #360]	; (8000388 <main+0x1b4>)
 8000220:	2200      	movs	r2, #0
 8000222:	701a      	strb	r2, [r3, #0]
	oldpState = 0u;
 8000224:	4b59      	ldr	r3, [pc, #356]	; (800038c <main+0x1b8>)
 8000226:	2200      	movs	r2, #0
 8000228:	701a      	strb	r2, [r3, #0]
	globState = firstRead;
 800022a:	4b59      	ldr	r3, [pc, #356]	; (8000390 <main+0x1bc>)
 800022c:	2200      	movs	r2, #0
 800022e:	701a      	strb	r2, [r3, #0]

	cPStateBuf = 0u;
 8000230:	4b58      	ldr	r3, [pc, #352]	; (8000394 <main+0x1c0>)
 8000232:	2200      	movs	r2, #0
 8000234:	701a      	strb	r2, [r3, #0]

	mData[0]=0u;
 8000236:	4b58      	ldr	r3, [pc, #352]	; (8000398 <main+0x1c4>)
 8000238:	2200      	movs	r2, #0
 800023a:	701a      	strb	r2, [r3, #0]
	mData[1]=0u;
 800023c:	4b56      	ldr	r3, [pc, #344]	; (8000398 <main+0x1c4>)
 800023e:	2200      	movs	r2, #0
 8000240:	705a      	strb	r2, [r3, #1]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000242:	f000 fc57 	bl	8000af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000246:	f000 f8b7 	bl	80003b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800024a:	f000 f9a5 	bl	8000598 <MX_GPIO_Init>
  MX_TIM1_Init();
 800024e:	f000 f951 	bl	80004f4 <MX_TIM1_Init>
  MX_SPI2_Init();
 8000252:	f000 f911 	bl	8000478 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, ssiNCS_Pin|ssiClk_Pin|ssiDO_Pin, GPIO_PIN_SET);
 8000256:	2201      	movs	r2, #1
 8000258:	21e0      	movs	r1, #224	; 0xe0
 800025a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800025e:	f000 ff63 	bl	8001128 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, ssiNCS_Pin, GPIO_PIN_RESET);
 8000262:	2200      	movs	r2, #0
 8000264:	2120      	movs	r1, #32
 8000266:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800026a:	f000 ff5d 	bl	8001128 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint8_t nBtn = GPIO_PIN_RESET;
 800026e:	2300      	movs	r3, #0
 8000270:	71fb      	strb	r3, [r7, #7]
	  nBtn = HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin);
 8000272:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000276:	4849      	ldr	r0, [pc, #292]	; (800039c <main+0x1c8>)
 8000278:	f000 ff3e 	bl	80010f8 <HAL_GPIO_ReadPin>
 800027c:	4603      	mov	r3, r0
 800027e:	71fb      	strb	r3, [r7, #7]
	  mSysTick = HAL_GetTick();
 8000280:	f000 fc92 	bl	8000ba8 <HAL_GetTick>
 8000284:	4603      	mov	r3, r0
 8000286:	4a46      	ldr	r2, [pc, #280]	; (80003a0 <main+0x1cc>)
 8000288:	6013      	str	r3, [r2, #0]
	  if ( (oldTick!=mSysTick) && (0u == (mSysTick%25)) )
 800028a:	4b36      	ldr	r3, [pc, #216]	; (8000364 <main+0x190>)
 800028c:	681a      	ldr	r2, [r3, #0]
 800028e:	4b44      	ldr	r3, [pc, #272]	; (80003a0 <main+0x1cc>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	429a      	cmp	r2, r3
 8000294:	d024      	beq.n	80002e0 <main+0x10c>
 8000296:	4b42      	ldr	r3, [pc, #264]	; (80003a0 <main+0x1cc>)
 8000298:	6819      	ldr	r1, [r3, #0]
 800029a:	4b42      	ldr	r3, [pc, #264]	; (80003a4 <main+0x1d0>)
 800029c:	fba3 2301 	umull	r2, r3, r3, r1
 80002a0:	08da      	lsrs	r2, r3, #3
 80002a2:	4613      	mov	r3, r2
 80002a4:	009b      	lsls	r3, r3, #2
 80002a6:	4413      	add	r3, r2
 80002a8:	009a      	lsls	r2, r3, #2
 80002aa:	4413      	add	r3, r2
 80002ac:	1aca      	subs	r2, r1, r3
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d116      	bne.n	80002e0 <main+0x10c>
	  {
		  mData16 = ((((uint16_t)mData[1]&0x3F)<<8) + mData[0])>>4;
 80002b2:	4b39      	ldr	r3, [pc, #228]	; (8000398 <main+0x1c4>)
 80002b4:	785b      	ldrb	r3, [r3, #1]
 80002b6:	021b      	lsls	r3, r3, #8
 80002b8:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80002bc:	4a36      	ldr	r2, [pc, #216]	; (8000398 <main+0x1c4>)
 80002be:	7812      	ldrb	r2, [r2, #0]
 80002c0:	4413      	add	r3, r2
 80002c2:	111b      	asrs	r3, r3, #4
 80002c4:	b29a      	uxth	r2, r3
 80002c6:	4b38      	ldr	r3, [pc, #224]	; (80003a8 <main+0x1d4>)
 80002c8:	801a      	strh	r2, [r3, #0]
		  //HAL_GPIO_WritePin(GPIOA, ssiNCS_Pin, GPIO_PIN_SET);
		  oldTick = mSysTick;
 80002ca:	4b35      	ldr	r3, [pc, #212]	; (80003a0 <main+0x1cc>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	4a25      	ldr	r2, [pc, #148]	; (8000364 <main+0x190>)
 80002d0:	6013      	str	r3, [r2, #0]
		  //start data transfer
		  HAL_SPI_Receive(&hspi2, &mData[0], 1u, 1000u);
 80002d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002d6:	2201      	movs	r2, #1
 80002d8:	492f      	ldr	r1, [pc, #188]	; (8000398 <main+0x1c4>)
 80002da:	4834      	ldr	r0, [pc, #208]	; (80003ac <main+0x1d8>)
 80002dc:	f002 fc43 	bl	8002b66 <HAL_SPI_Receive>
	  }


	  if ( ( GPIO_PIN_RESET == oldBtn) && (GPIO_PIN_SET== nBtn ) )
 80002e0:	4b21      	ldr	r3, [pc, #132]	; (8000368 <main+0x194>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d127      	bne.n	8000338 <main+0x164>
 80002e8:	79fb      	ldrb	r3, [r7, #7]
 80002ea:	2b01      	cmp	r3, #1
 80002ec:	d124      	bne.n	8000338 <main+0x164>
	  {
		  oldBtn = 100000u;
 80002ee:	4b1e      	ldr	r3, [pc, #120]	; (8000368 <main+0x194>)
 80002f0:	4a2f      	ldr	r2, [pc, #188]	; (80003b0 <main+0x1dc>)
 80002f2:	601a      	str	r2, [r3, #0]
		  if ( globState < maxState )
 80002f4:	4b26      	ldr	r3, [pc, #152]	; (8000390 <main+0x1bc>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	2b02      	cmp	r3, #2
 80002fa:	d81d      	bhi.n	8000338 <main+0x164>
		  {
			  cOtpClk = &otpData[globState][0][0];
 80002fc:	4b24      	ldr	r3, [pc, #144]	; (8000390 <main+0x1bc>)
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	461a      	mov	r2, r3
 8000302:	2392      	movs	r3, #146	; 0x92
 8000304:	fb02 f303 	mul.w	r3, r2, r3
 8000308:	4a13      	ldr	r2, [pc, #76]	; (8000358 <main+0x184>)
 800030a:	4413      	add	r3, r2
 800030c:	4a11      	ldr	r2, [pc, #68]	; (8000354 <main+0x180>)
 800030e:	6013      	str	r3, [r2, #0]
			  cOtpData = &otpData[globState][1][0];
 8000310:	4b1f      	ldr	r3, [pc, #124]	; (8000390 <main+0x1bc>)
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	461a      	mov	r2, r3
 8000316:	2392      	movs	r3, #146	; 0x92
 8000318:	fb02 f303 	mul.w	r3, r2, r3
 800031c:	3349      	adds	r3, #73	; 0x49
 800031e:	4a0e      	ldr	r2, [pc, #56]	; (8000358 <main+0x184>)
 8000320:	4413      	add	r3, r2
 8000322:	4a0e      	ldr	r2, [pc, #56]	; (800035c <main+0x188>)
 8000324:	6013      	str	r3, [r2, #0]

			  globState++;
 8000326:	4b1a      	ldr	r3, [pc, #104]	; (8000390 <main+0x1bc>)
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	3301      	adds	r3, #1
 800032c:	b2da      	uxtb	r2, r3
 800032e:	4b18      	ldr	r3, [pc, #96]	; (8000390 <main+0x1bc>)
 8000330:	701a      	strb	r2, [r3, #0]
			  HAL_TIM_Base_Start_IT(&htim1);
 8000332:	4820      	ldr	r0, [pc, #128]	; (80003b4 <main+0x1e0>)
 8000334:	f003 f984 	bl	8003640 <HAL_TIM_Base_Start_IT>
		  }

	  }
	  if ( GPIO_PIN_RESET == nBtn ) //deBounce
 8000338:	79fb      	ldrb	r3, [r7, #7]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d197      	bne.n	800026e <main+0x9a>
	  {
		  if ( oldBtn>0u) oldBtn--;
 800033e:	4b0a      	ldr	r3, [pc, #40]	; (8000368 <main+0x194>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d093      	beq.n	800026e <main+0x9a>
 8000346:	4b08      	ldr	r3, [pc, #32]	; (8000368 <main+0x194>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	3b01      	subs	r3, #1
 800034c:	4a06      	ldr	r2, [pc, #24]	; (8000368 <main+0x194>)
 800034e:	6013      	str	r3, [r2, #0]
  {
 8000350:	e78d      	b.n	800026e <main+0x9a>
 8000352:	bf00      	nop
 8000354:	200002b4 	.word	0x200002b4
 8000358:	20000000 	.word	0x20000000
 800035c:	200002b8 	.word	0x200002b8
 8000360:	20000049 	.word	0x20000049
 8000364:	200002a0 	.word	0x200002a0
 8000368:	200002a4 	.word	0x200002a4
 800036c:	200002a8 	.word	0x200002a8
 8000370:	200002a9 	.word	0x200002a9
 8000374:	200002aa 	.word	0x200002aa
 8000378:	20000290 	.word	0x20000290
 800037c:	200002bc 	.word	0x200002bc
 8000380:	200002ae 	.word	0x200002ae
 8000384:	200002af 	.word	0x200002af
 8000388:	200002ab 	.word	0x200002ab
 800038c:	200002ac 	.word	0x200002ac
 8000390:	200002ad 	.word	0x200002ad
 8000394:	200002b0 	.word	0x200002b0
 8000398:	20000294 	.word	0x20000294
 800039c:	48000800 	.word	0x48000800
 80003a0:	2000029c 	.word	0x2000029c
 80003a4:	51eb851f 	.word	0x51eb851f
 80003a8:	20000296 	.word	0x20000296
 80003ac:	200001e0 	.word	0x200001e0
 80003b0:	000186a0 	.word	0x000186a0
 80003b4:	20000244 	.word	0x20000244

080003b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b0a6      	sub	sp, #152	; 0x98
 80003bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003be:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80003c2:	2228      	movs	r2, #40	; 0x28
 80003c4:	2100      	movs	r1, #0
 80003c6:	4618      	mov	r0, r3
 80003c8:	f003 fdde 	bl	8003f88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003cc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003d0:	2200      	movs	r2, #0
 80003d2:	601a      	str	r2, [r3, #0]
 80003d4:	605a      	str	r2, [r3, #4]
 80003d6:	609a      	str	r2, [r3, #8]
 80003d8:	60da      	str	r2, [r3, #12]
 80003da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003dc:	1d3b      	adds	r3, r7, #4
 80003de:	2258      	movs	r2, #88	; 0x58
 80003e0:	2100      	movs	r1, #0
 80003e2:	4618      	mov	r0, r3
 80003e4:	f003 fdd0 	bl	8003f88 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003e8:	2302      	movs	r3, #2
 80003ea:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ec:	2301      	movs	r3, #1
 80003ee:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003f0:	2310      	movs	r3, #16
 80003f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003f6:	2302      	movs	r3, #2
 80003f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000400:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000404:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000408:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800040c:	2300      	movs	r3, #0
 800040e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000412:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000416:	4618      	mov	r0, r3
 8000418:	f000 feb8 	bl	800118c <HAL_RCC_OscConfig>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000422:	f000 fa05 	bl	8000830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000426:	230f      	movs	r3, #15
 8000428:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800042a:	2302      	movs	r3, #2
 800042c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800042e:	2300      	movs	r3, #0
 8000430:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000432:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000436:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000438:	2300      	movs	r3, #0
 800043a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800043c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000440:	2102      	movs	r1, #2
 8000442:	4618      	mov	r0, r3
 8000444:	f001 fef6 	bl	8002234 <HAL_RCC_ClockConfig>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800044e:	f000 f9ef 	bl	8000830 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000452:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000456:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000458:	2300      	movs	r3, #0
 800045a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800045c:	1d3b      	adds	r3, r7, #4
 800045e:	4618      	mov	r0, r3
 8000460:	f002 f8b8 	bl	80025d4 <HAL_RCCEx_PeriphCLKConfig>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800046a:	f000 f9e1 	bl	8000830 <Error_Handler>
  }
}
 800046e:	bf00      	nop
 8000470:	3798      	adds	r7, #152	; 0x98
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
	...

08000478 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800047c:	4b1b      	ldr	r3, [pc, #108]	; (80004ec <MX_SPI2_Init+0x74>)
 800047e:	4a1c      	ldr	r2, [pc, #112]	; (80004f0 <MX_SPI2_Init+0x78>)
 8000480:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000482:	4b1a      	ldr	r3, [pc, #104]	; (80004ec <MX_SPI2_Init+0x74>)
 8000484:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000488:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800048a:	4b18      	ldr	r3, [pc, #96]	; (80004ec <MX_SPI2_Init+0x74>)
 800048c:	2200      	movs	r2, #0
 800048e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000490:	4b16      	ldr	r3, [pc, #88]	; (80004ec <MX_SPI2_Init+0x74>)
 8000492:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8000496:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000498:	4b14      	ldr	r3, [pc, #80]	; (80004ec <MX_SPI2_Init+0x74>)
 800049a:	2200      	movs	r2, #0
 800049c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800049e:	4b13      	ldr	r3, [pc, #76]	; (80004ec <MX_SPI2_Init+0x74>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80004a4:	4b11      	ldr	r3, [pc, #68]	; (80004ec <MX_SPI2_Init+0x74>)
 80004a6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80004aa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80004ac:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <MX_SPI2_Init+0x74>)
 80004ae:	2238      	movs	r2, #56	; 0x38
 80004b0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004b2:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <MX_SPI2_Init+0x74>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80004b8:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <MX_SPI2_Init+0x74>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004be:	4b0b      	ldr	r3, [pc, #44]	; (80004ec <MX_SPI2_Init+0x74>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80004c4:	4b09      	ldr	r3, [pc, #36]	; (80004ec <MX_SPI2_Init+0x74>)
 80004c6:	2207      	movs	r2, #7
 80004c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004ca:	4b08      	ldr	r3, [pc, #32]	; (80004ec <MX_SPI2_Init+0x74>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80004d0:	4b06      	ldr	r3, [pc, #24]	; (80004ec <MX_SPI2_Init+0x74>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80004d6:	4805      	ldr	r0, [pc, #20]	; (80004ec <MX_SPI2_Init+0x74>)
 80004d8:	f002 fa9a 	bl	8002a10 <HAL_SPI_Init>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80004e2:	f000 f9a5 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	200001e0 	.word	0x200001e0
 80004f0:	40003800 	.word	0x40003800

080004f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b088      	sub	sp, #32
 80004f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004fa:	f107 0310 	add.w	r3, r7, #16
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000508:	1d3b      	adds	r3, r7, #4
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000512:	4b1f      	ldr	r3, [pc, #124]	; (8000590 <MX_TIM1_Init+0x9c>)
 8000514:	4a1f      	ldr	r2, [pc, #124]	; (8000594 <MX_TIM1_Init+0xa0>)
 8000516:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000518:	4b1d      	ldr	r3, [pc, #116]	; (8000590 <MX_TIM1_Init+0x9c>)
 800051a:	2247      	movs	r2, #71	; 0x47
 800051c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800051e:	4b1c      	ldr	r3, [pc, #112]	; (8000590 <MX_TIM1_Init+0x9c>)
 8000520:	2200      	movs	r2, #0
 8000522:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5;
 8000524:	4b1a      	ldr	r3, [pc, #104]	; (8000590 <MX_TIM1_Init+0x9c>)
 8000526:	2205      	movs	r2, #5
 8000528:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800052a:	4b19      	ldr	r3, [pc, #100]	; (8000590 <MX_TIM1_Init+0x9c>)
 800052c:	2200      	movs	r2, #0
 800052e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000530:	4b17      	ldr	r3, [pc, #92]	; (8000590 <MX_TIM1_Init+0x9c>)
 8000532:	2200      	movs	r2, #0
 8000534:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000536:	4b16      	ldr	r3, [pc, #88]	; (8000590 <MX_TIM1_Init+0x9c>)
 8000538:	2280      	movs	r2, #128	; 0x80
 800053a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800053c:	4814      	ldr	r0, [pc, #80]	; (8000590 <MX_TIM1_Init+0x9c>)
 800053e:	f003 f827 	bl	8003590 <HAL_TIM_Base_Init>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000548:	f000 f972 	bl	8000830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800054c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000550:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000552:	f107 0310 	add.w	r3, r7, #16
 8000556:	4619      	mov	r1, r3
 8000558:	480d      	ldr	r0, [pc, #52]	; (8000590 <MX_TIM1_Init+0x9c>)
 800055a:	f003 fa12 	bl	8003982 <HAL_TIM_ConfigClockSource>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000564:	f000 f964 	bl	8000830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000568:	2300      	movs	r3, #0
 800056a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800056c:	2300      	movs	r3, #0
 800056e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000570:	2300      	movs	r3, #0
 8000572:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	4619      	mov	r1, r3
 8000578:	4805      	ldr	r0, [pc, #20]	; (8000590 <MX_TIM1_Init+0x9c>)
 800057a:	f003 fc37 	bl	8003dec <HAL_TIMEx_MasterConfigSynchronization>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000584:	f000 f954 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000588:	bf00      	nop
 800058a:	3720      	adds	r7, #32
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20000244 	.word	0x20000244
 8000594:	40012c00 	.word	0x40012c00

08000598 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08c      	sub	sp, #48	; 0x30
 800059c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059e:	f107 031c 	add.w	r3, r7, #28
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	60da      	str	r2, [r3, #12]
 80005ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ae:	4b77      	ldr	r3, [pc, #476]	; (800078c <MX_GPIO_Init+0x1f4>)
 80005b0:	695b      	ldr	r3, [r3, #20]
 80005b2:	4a76      	ldr	r2, [pc, #472]	; (800078c <MX_GPIO_Init+0x1f4>)
 80005b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005b8:	6153      	str	r3, [r2, #20]
 80005ba:	4b74      	ldr	r3, [pc, #464]	; (800078c <MX_GPIO_Init+0x1f4>)
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80005c2:	61bb      	str	r3, [r7, #24]
 80005c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005c6:	4b71      	ldr	r3, [pc, #452]	; (800078c <MX_GPIO_Init+0x1f4>)
 80005c8:	695b      	ldr	r3, [r3, #20]
 80005ca:	4a70      	ldr	r2, [pc, #448]	; (800078c <MX_GPIO_Init+0x1f4>)
 80005cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005d0:	6153      	str	r3, [r2, #20]
 80005d2:	4b6e      	ldr	r3, [pc, #440]	; (800078c <MX_GPIO_Init+0x1f4>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	4b6b      	ldr	r3, [pc, #428]	; (800078c <MX_GPIO_Init+0x1f4>)
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	4a6a      	ldr	r2, [pc, #424]	; (800078c <MX_GPIO_Init+0x1f4>)
 80005e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e8:	6153      	str	r3, [r2, #20]
 80005ea:	4b68      	ldr	r3, [pc, #416]	; (800078c <MX_GPIO_Init+0x1f4>)
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005f2:	613b      	str	r3, [r7, #16]
 80005f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	4b65      	ldr	r3, [pc, #404]	; (800078c <MX_GPIO_Init+0x1f4>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	4a64      	ldr	r2, [pc, #400]	; (800078c <MX_GPIO_Init+0x1f4>)
 80005fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000600:	6153      	str	r3, [r2, #20]
 8000602:	4b62      	ldr	r3, [pc, #392]	; (800078c <MX_GPIO_Init+0x1f4>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800060e:	4b5f      	ldr	r3, [pc, #380]	; (800078c <MX_GPIO_Init+0x1f4>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	4a5e      	ldr	r2, [pc, #376]	; (800078c <MX_GPIO_Init+0x1f4>)
 8000614:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000618:	6153      	str	r3, [r2, #20]
 800061a:	4b5c      	ldr	r3, [pc, #368]	; (800078c <MX_GPIO_Init+0x1f4>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000626:	4b59      	ldr	r3, [pc, #356]	; (800078c <MX_GPIO_Init+0x1f4>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	4a58      	ldr	r2, [pc, #352]	; (800078c <MX_GPIO_Init+0x1f4>)
 800062c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000630:	6153      	str	r3, [r2, #20]
 8000632:	4b56      	ldr	r3, [pc, #344]	; (800078c <MX_GPIO_Init+0x1f4>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ssiNCS_Pin|ssiClk_Pin|ssiDO_Pin, GPIO_PIN_RESET);
 800063e:	2200      	movs	r2, #0
 8000640:	21e0      	movs	r1, #224	; 0xe0
 8000642:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000646:	f000 fd6f 	bl	8001128 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|testPin_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800064a:	2200      	movs	r2, #0
 800064c:	f245 0181 	movw	r1, #20609	; 0x5081
 8000650:	484f      	ldr	r0, [pc, #316]	; (8000790 <MX_GPIO_Init+0x1f8>)
 8000652:	f000 fd69 	bl	8001128 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	2140      	movs	r1, #64	; 0x40
 800065a:	484e      	ldr	r0, [pc, #312]	; (8000794 <MX_GPIO_Init+0x1fc>)
 800065c:	f000 fd64 	bl	8001128 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000660:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000666:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800066a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	2300      	movs	r3, #0
 800066e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000670:	f107 031c 	add.w	r3, r7, #28
 8000674:	4619      	mov	r1, r3
 8000676:	4848      	ldr	r0, [pc, #288]	; (8000798 <MX_GPIO_Init+0x200>)
 8000678:	f000 fbb4 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ssiNCS_Pin */
  GPIO_InitStruct.Pin = ssiNCS_Pin;
 800067c:	2320      	movs	r3, #32
 800067e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000680:	2301      	movs	r3, #1
 8000682:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000688:	2301      	movs	r3, #1
 800068a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ssiNCS_GPIO_Port, &GPIO_InitStruct);
 800068c:	f107 031c 	add.w	r3, r7, #28
 8000690:	4619      	mov	r1, r3
 8000692:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000696:	f000 fba5 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ssiClk_Pin */
  GPIO_InitStruct.Pin = ssiClk_Pin;
 800069a:	2340      	movs	r3, #64	; 0x40
 800069c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069e:	2301      	movs	r3, #1
 80006a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006a6:	2303      	movs	r3, #3
 80006a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ssiClk_GPIO_Port, &GPIO_InitStruct);
 80006aa:	f107 031c 	add.w	r3, r7, #28
 80006ae:	4619      	mov	r1, r3
 80006b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b4:	f000 fb96 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ssiDO_Pin */
  GPIO_InitStruct.Pin = ssiDO_Pin;
 80006b8:	2380      	movs	r3, #128	; 0x80
 80006ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80006bc:	2311      	movs	r3, #17
 80006be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006c0:	2301      	movs	r3, #1
 80006c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006c4:	2303      	movs	r3, #3
 80006c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ssiDO_GPIO_Port, &GPIO_InitStruct);
 80006c8:	f107 031c 	add.w	r3, r7, #28
 80006cc:	4619      	mov	r1, r3
 80006ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d2:	f000 fb87 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80006d6:	f244 0301 	movw	r3, #16385	; 0x4001
 80006da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006dc:	2301      	movs	r3, #1
 80006de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e4:	2300      	movs	r3, #0
 80006e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e8:	f107 031c 	add.w	r3, r7, #28
 80006ec:	4619      	mov	r1, r3
 80006ee:	4828      	ldr	r0, [pc, #160]	; (8000790 <MX_GPIO_Init+0x1f8>)
 80006f0:	f000 fb78 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : testPin_Pin */
  GPIO_InitStruct.Pin = testPin_Pin;
 80006f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fa:	2301      	movs	r3, #1
 80006fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000702:	2303      	movs	r3, #3
 8000704:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(testPin_GPIO_Port, &GPIO_InitStruct);
 8000706:	f107 031c 	add.w	r3, r7, #28
 800070a:	4619      	mov	r1, r3
 800070c:	4820      	ldr	r0, [pc, #128]	; (8000790 <MX_GPIO_Init+0x1f8>)
 800070e:	f000 fb69 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000712:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000718:	2302      	movs	r3, #2
 800071a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000720:	2303      	movs	r3, #3
 8000722:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000724:	2307      	movs	r3, #7
 8000726:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000728:	f107 031c 	add.w	r3, r7, #28
 800072c:	4619      	mov	r1, r3
 800072e:	481b      	ldr	r0, [pc, #108]	; (800079c <MX_GPIO_Init+0x204>)
 8000730:	f000 fb58 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000734:	2340      	movs	r3, #64	; 0x40
 8000736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000738:	2301      	movs	r3, #1
 800073a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000740:	2300      	movs	r3, #0
 8000742:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000744:	f107 031c 	add.w	r3, r7, #28
 8000748:	4619      	mov	r1, r3
 800074a:	4812      	ldr	r0, [pc, #72]	; (8000794 <MX_GPIO_Init+0x1fc>)
 800074c:	f000 fb4a 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000750:	2380      	movs	r3, #128	; 0x80
 8000752:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000754:	2300      	movs	r3, #0
 8000756:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800075c:	f107 031c 	add.w	r3, r7, #28
 8000760:	4619      	mov	r1, r3
 8000762:	480c      	ldr	r0, [pc, #48]	; (8000794 <MX_GPIO_Init+0x1fc>)
 8000764:	f000 fb3e 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000768:	2380      	movs	r3, #128	; 0x80
 800076a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076c:	2301      	movs	r3, #1
 800076e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000774:	2301      	movs	r3, #1
 8000776:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000778:	f107 031c 	add.w	r3, r7, #28
 800077c:	4619      	mov	r1, r3
 800077e:	4804      	ldr	r0, [pc, #16]	; (8000790 <MX_GPIO_Init+0x1f8>)
 8000780:	f000 fb30 	bl	8000de4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000784:	bf00      	nop
 8000786:	3730      	adds	r7, #48	; 0x30
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40021000 	.word	0x40021000
 8000790:	48000400 	.word	0x48000400
 8000794:	48001800 	.word	0x48001800
 8000798:	48000800 	.word	0x48000800
 800079c:	48000c00 	.word	0x48000c00

080007a0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(testPin_GPIO_Port, testPin_Pin);
 80007a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ac:	481a      	ldr	r0, [pc, #104]	; (8000818 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80007ae:	f000 fcd3 	bl	8001158 <HAL_GPIO_TogglePin>
//	if ( pState != 0u )
//	{
	  HAL_GPIO_WritePin(GPIOA, ssiClk_Pin, cOtpClk[tim1Tick]);
 80007b2:	4b1a      	ldr	r3, [pc, #104]	; (800081c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	4b1a      	ldr	r3, [pc, #104]	; (8000820 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4413      	add	r3, r2
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	461a      	mov	r2, r3
 80007c0:	2140      	movs	r1, #64	; 0x40
 80007c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c6:	f000 fcaf 	bl	8001128 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, ssiDO_Pin, cOtpData[tim1Tick]);
 80007ca:	4b16      	ldr	r3, [pc, #88]	; (8000824 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	4b14      	ldr	r3, [pc, #80]	; (8000820 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4413      	add	r3, r2
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	461a      	mov	r2, r3
 80007d8:	2180      	movs	r1, #128	; 0x80
 80007da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007de:	f000 fca3 	bl	8001128 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, dataPinState);
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	461a      	mov	r2, r3
 80007e8:	2101      	movs	r1, #1
 80007ea:	480b      	ldr	r0, [pc, #44]	; (8000818 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80007ec:	f000 fc9c 	bl	8001128 <HAL_GPIO_WritePin>
//	}

	if (tim1Tick< NB_OF_CLK_EDGES)
 80007f0:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2b46      	cmp	r3, #70	; 0x46
 80007f6:	d805      	bhi.n	8000804 <HAL_TIM_PeriodElapsedCallback+0x64>
	{
		tim1Tick++;
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	3301      	adds	r3, #1
 80007fe:	4a08      	ldr	r2, [pc, #32]	; (8000820 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000800:	6013      	str	r3, [r2, #0]
		tim1Tick=0u;
		HAL_TIM_Base_Stop_IT(&htim1);
//		HAL_GPIO_WritePin(GPIOA, ssiNCS_Pin, GPIO_PIN_SET);
	}
//	evTim1Tick = 1u;
}
 8000802:	e005      	b.n	8000810 <HAL_TIM_PeriodElapsedCallback+0x70>
		tim1Tick=0u;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim1);
 800080a:	4808      	ldr	r0, [pc, #32]	; (800082c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800080c:	f002 ff88 	bl	8003720 <HAL_TIM_Base_Stop_IT>
}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	48000400 	.word	0x48000400
 800081c:	200002b4 	.word	0x200002b4
 8000820:	20000298 	.word	0x20000298
 8000824:	200002b8 	.word	0x200002b8
 8000828:	200002a9 	.word	0x200002a9
 800082c:	20000244 	.word	0x20000244

08000830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000838:	e7fe      	b.n	8000838 <Error_Handler+0x8>
	...

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <HAL_MspInit+0x44>)
 8000844:	699b      	ldr	r3, [r3, #24]
 8000846:	4a0e      	ldr	r2, [pc, #56]	; (8000880 <HAL_MspInit+0x44>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6193      	str	r3, [r2, #24]
 800084e:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <HAL_MspInit+0x44>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <HAL_MspInit+0x44>)
 800085c:	69db      	ldr	r3, [r3, #28]
 800085e:	4a08      	ldr	r2, [pc, #32]	; (8000880 <HAL_MspInit+0x44>)
 8000860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000864:	61d3      	str	r3, [r2, #28]
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <HAL_MspInit+0x44>)
 8000868:	69db      	ldr	r3, [r3, #28]
 800086a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	40021000 	.word	0x40021000

08000884 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08c      	sub	sp, #48	; 0x30
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088c:	f107 031c 	add.w	r3, r7, #28
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a44      	ldr	r2, [pc, #272]	; (80009b4 <HAL_SPI_MspInit+0x130>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	f040 8081 	bne.w	80009aa <HAL_SPI_MspInit+0x126>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80008a8:	4b43      	ldr	r3, [pc, #268]	; (80009b8 <HAL_SPI_MspInit+0x134>)
 80008aa:	69db      	ldr	r3, [r3, #28]
 80008ac:	4a42      	ldr	r2, [pc, #264]	; (80009b8 <HAL_SPI_MspInit+0x134>)
 80008ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b2:	61d3      	str	r3, [r2, #28]
 80008b4:	4b40      	ldr	r3, [pc, #256]	; (80009b8 <HAL_SPI_MspInit+0x134>)
 80008b6:	69db      	ldr	r3, [r3, #28]
 80008b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008bc:	61bb      	str	r3, [r7, #24]
 80008be:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80008c0:	4b3d      	ldr	r3, [pc, #244]	; (80009b8 <HAL_SPI_MspInit+0x134>)
 80008c2:	695b      	ldr	r3, [r3, #20]
 80008c4:	4a3c      	ldr	r2, [pc, #240]	; (80009b8 <HAL_SPI_MspInit+0x134>)
 80008c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008ca:	6153      	str	r3, [r2, #20]
 80008cc:	4b3a      	ldr	r3, [pc, #232]	; (80009b8 <HAL_SPI_MspInit+0x134>)
 80008ce:	695b      	ldr	r3, [r3, #20]
 80008d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008d4:	617b      	str	r3, [r7, #20]
 80008d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d8:	4b37      	ldr	r3, [pc, #220]	; (80009b8 <HAL_SPI_MspInit+0x134>)
 80008da:	695b      	ldr	r3, [r3, #20]
 80008dc:	4a36      	ldr	r2, [pc, #216]	; (80009b8 <HAL_SPI_MspInit+0x134>)
 80008de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008e2:	6153      	str	r3, [r2, #20]
 80008e4:	4b34      	ldr	r3, [pc, #208]	; (80009b8 <HAL_SPI_MspInit+0x134>)
 80008e6:	695b      	ldr	r3, [r3, #20]
 80008e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008ec:	613b      	str	r3, [r7, #16]
 80008ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008f0:	4b31      	ldr	r3, [pc, #196]	; (80009b8 <HAL_SPI_MspInit+0x134>)
 80008f2:	695b      	ldr	r3, [r3, #20]
 80008f4:	4a30      	ldr	r2, [pc, #192]	; (80009b8 <HAL_SPI_MspInit+0x134>)
 80008f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80008fa:	6153      	str	r3, [r2, #20]
 80008fc:	4b2e      	ldr	r3, [pc, #184]	; (80009b8 <HAL_SPI_MspInit+0x134>)
 80008fe:	695b      	ldr	r3, [r3, #20]
 8000900:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000908:	4b2b      	ldr	r3, [pc, #172]	; (80009b8 <HAL_SPI_MspInit+0x134>)
 800090a:	695b      	ldr	r3, [r3, #20]
 800090c:	4a2a      	ldr	r2, [pc, #168]	; (80009b8 <HAL_SPI_MspInit+0x134>)
 800090e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000912:	6153      	str	r3, [r2, #20]
 8000914:	4b28      	ldr	r3, [pc, #160]	; (80009b8 <HAL_SPI_MspInit+0x134>)
 8000916:	695b      	ldr	r3, [r3, #20]
 8000918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	68bb      	ldr	r3, [r7, #8]
    PF9     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    PD15     ------> SPI2_NSS
    PA10     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000920:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000924:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800092e:	2303      	movs	r3, #3
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000932:	2305      	movs	r3, #5
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	481f      	ldr	r0, [pc, #124]	; (80009bc <HAL_SPI_MspInit+0x138>)
 800093e:	f000 fa51 	bl	8000de4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000942:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000948:	2302      	movs	r3, #2
 800094a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000950:	2303      	movs	r3, #3
 8000952:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000954:	2305      	movs	r3, #5
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4619      	mov	r1, r3
 800095e:	4818      	ldr	r0, [pc, #96]	; (80009c0 <HAL_SPI_MspInit+0x13c>)
 8000960:	f000 fa40 	bl	8000de4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000964:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000972:	2303      	movs	r3, #3
 8000974:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8000976:	2306      	movs	r3, #6
 8000978:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	4810      	ldr	r0, [pc, #64]	; (80009c4 <HAL_SPI_MspInit+0x140>)
 8000982:	f000 fa2f 	bl	8000de4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000986:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800098a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098c:	2302      	movs	r3, #2
 800098e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000994:	2303      	movs	r3, #3
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000998:	2305      	movs	r3, #5
 800099a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	4619      	mov	r1, r3
 80009a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a6:	f000 fa1d 	bl	8000de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80009aa:	bf00      	nop
 80009ac:	3730      	adds	r7, #48	; 0x30
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40003800 	.word	0x40003800
 80009b8:	40021000 	.word	0x40021000
 80009bc:	48001400 	.word	0x48001400
 80009c0:	48000400 	.word	0x48000400
 80009c4:	48000c00 	.word	0x48000c00

080009c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a0d      	ldr	r2, [pc, #52]	; (8000a0c <HAL_TIM_Base_MspInit+0x44>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d113      	bne.n	8000a02 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009da:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <HAL_TIM_Base_MspInit+0x48>)
 80009dc:	699b      	ldr	r3, [r3, #24]
 80009de:	4a0c      	ldr	r2, [pc, #48]	; (8000a10 <HAL_TIM_Base_MspInit+0x48>)
 80009e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009e4:	6193      	str	r3, [r2, #24]
 80009e6:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <HAL_TIM_Base_MspInit+0x48>)
 80009e8:	699b      	ldr	r3, [r3, #24]
 80009ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2100      	movs	r1, #0
 80009f6:	2019      	movs	r0, #25
 80009f8:	f000 f9bd 	bl	8000d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80009fc:	2019      	movs	r0, #25
 80009fe:	f000 f9d6 	bl	8000dae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a02:	bf00      	nop
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40012c00 	.word	0x40012c00
 8000a10:	40021000 	.word	0x40021000

08000a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <NMI_Handler+0x4>

08000a1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <HardFault_Handler+0x4>

08000a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <MemManage_Handler+0x4>

08000a26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <BusFault_Handler+0x4>

08000a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <UsageFault_Handler+0x4>

08000a32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr

08000a4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a60:	f000 f88e 	bl	8000b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a6c:	4802      	ldr	r0, [pc, #8]	; (8000a78 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000a6e:	f002 fe86 	bl	800377e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000244 	.word	0x20000244

08000a7c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <SystemInit+0x20>)
 8000a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a86:	4a05      	ldr	r2, [pc, #20]	; (8000a9c <SystemInit+0x20>)
 8000a88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000aa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ad8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000aa4:	f7ff ffea 	bl	8000a7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aa8:	480c      	ldr	r0, [pc, #48]	; (8000adc <LoopForever+0x6>)
  ldr r1, =_edata
 8000aaa:	490d      	ldr	r1, [pc, #52]	; (8000ae0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000aac:	4a0d      	ldr	r2, [pc, #52]	; (8000ae4 <LoopForever+0xe>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab0:	e002      	b.n	8000ab8 <LoopCopyDataInit>

08000ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ab6:	3304      	adds	r3, #4

08000ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000abc:	d3f9      	bcc.n	8000ab2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000abe:	4a0a      	ldr	r2, [pc, #40]	; (8000ae8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ac0:	4c0a      	ldr	r4, [pc, #40]	; (8000aec <LoopForever+0x16>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac4:	e001      	b.n	8000aca <LoopFillZerobss>

08000ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac8:	3204      	adds	r2, #4

08000aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000acc:	d3fb      	bcc.n	8000ac6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ace:	f003 fa37 	bl	8003f40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ad2:	f7ff fb7f 	bl	80001d4 <main>

08000ad6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ad6:	e7fe      	b.n	8000ad6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ad8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae0:	200001c4 	.word	0x200001c4
  ldr r2, =_sidata
 8000ae4:	08003fe8 	.word	0x08003fe8
  ldr r2, =_sbss
 8000ae8:	200001c4 	.word	0x200001c4
  ldr r4, =_ebss
 8000aec:	200002c4 	.word	0x200002c4

08000af0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000af0:	e7fe      	b.n	8000af0 <ADC1_2_IRQHandler>
	...

08000af4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <HAL_Init+0x28>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a07      	ldr	r2, [pc, #28]	; (8000b1c <HAL_Init+0x28>)
 8000afe:	f043 0310 	orr.w	r3, r3, #16
 8000b02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b04:	2003      	movs	r0, #3
 8000b06:	f000 f92b 	bl	8000d60 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	f000 f808 	bl	8000b20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b10:	f7ff fe94 	bl	800083c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40022000 	.word	0x40022000

08000b20 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <HAL_InitTick+0x54>)
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_InitTick+0x58>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	4619      	mov	r1, r3
 8000b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 f943 	bl	8000dca <HAL_SYSTICK_Config>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e00e      	b.n	8000b6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2b0f      	cmp	r3, #15
 8000b52:	d80a      	bhi.n	8000b6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b54:	2200      	movs	r2, #0
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5c:	f000 f90b 	bl	8000d76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b60:	4a06      	ldr	r2, [pc, #24]	; (8000b7c <HAL_InitTick+0x5c>)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b66:	2300      	movs	r3, #0
 8000b68:	e000      	b.n	8000b6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	200001b8 	.word	0x200001b8
 8000b78:	200001c0 	.word	0x200001c0
 8000b7c:	200001bc 	.word	0x200001bc

08000b80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <HAL_IncTick+0x20>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_IncTick+0x24>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4413      	add	r3, r2
 8000b90:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <HAL_IncTick+0x24>)
 8000b92:	6013      	str	r3, [r2, #0]
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	200001c0 	.word	0x200001c0
 8000ba4:	200002c0 	.word	0x200002c0

08000ba8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  return uwTick;  
 8000bac:	4b03      	ldr	r3, [pc, #12]	; (8000bbc <HAL_GetTick+0x14>)
 8000bae:	681b      	ldr	r3, [r3, #0]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	200002c0 	.word	0x200002c0

08000bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	f003 0307 	and.w	r3, r3, #7
 8000bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bd6:	68ba      	ldr	r2, [r7, #8]
 8000bd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bdc:	4013      	ands	r3, r2
 8000bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bf2:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	60d3      	str	r3, [r2, #12]
}
 8000bf8:	bf00      	nop
 8000bfa:	3714      	adds	r7, #20
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c0c:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <__NVIC_GetPriorityGrouping+0x18>)
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	0a1b      	lsrs	r3, r3, #8
 8000c12:	f003 0307 	and.w	r3, r3, #7
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	db0b      	blt.n	8000c4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	f003 021f 	and.w	r2, r3, #31
 8000c3c:	4907      	ldr	r1, [pc, #28]	; (8000c5c <__NVIC_EnableIRQ+0x38>)
 8000c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c42:	095b      	lsrs	r3, r3, #5
 8000c44:	2001      	movs	r0, #1
 8000c46:	fa00 f202 	lsl.w	r2, r0, r2
 8000c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c4e:	bf00      	nop
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	e000e100 	.word	0xe000e100

08000c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	6039      	str	r1, [r7, #0]
 8000c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	db0a      	blt.n	8000c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	490c      	ldr	r1, [pc, #48]	; (8000cac <__NVIC_SetPriority+0x4c>)
 8000c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7e:	0112      	lsls	r2, r2, #4
 8000c80:	b2d2      	uxtb	r2, r2
 8000c82:	440b      	add	r3, r1
 8000c84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c88:	e00a      	b.n	8000ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	b2da      	uxtb	r2, r3
 8000c8e:	4908      	ldr	r1, [pc, #32]	; (8000cb0 <__NVIC_SetPriority+0x50>)
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	f003 030f 	and.w	r3, r3, #15
 8000c96:	3b04      	subs	r3, #4
 8000c98:	0112      	lsls	r2, r2, #4
 8000c9a:	b2d2      	uxtb	r2, r2
 8000c9c:	440b      	add	r3, r1
 8000c9e:	761a      	strb	r2, [r3, #24]
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000e100 	.word	0xe000e100
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b089      	sub	sp, #36	; 0x24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	f1c3 0307 	rsb	r3, r3, #7
 8000cce:	2b04      	cmp	r3, #4
 8000cd0:	bf28      	it	cs
 8000cd2:	2304      	movcs	r3, #4
 8000cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3304      	adds	r3, #4
 8000cda:	2b06      	cmp	r3, #6
 8000cdc:	d902      	bls.n	8000ce4 <NVIC_EncodePriority+0x30>
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	3b03      	subs	r3, #3
 8000ce2:	e000      	b.n	8000ce6 <NVIC_EncodePriority+0x32>
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	43da      	mvns	r2, r3
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	401a      	ands	r2, r3
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	fa01 f303 	lsl.w	r3, r1, r3
 8000d06:	43d9      	mvns	r1, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d0c:	4313      	orrs	r3, r2
         );
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3724      	adds	r7, #36	; 0x24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
	...

08000d1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d2c:	d301      	bcc.n	8000d32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e00f      	b.n	8000d52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d32:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <SysTick_Config+0x40>)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d3a:	210f      	movs	r1, #15
 8000d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d40:	f7ff ff8e 	bl	8000c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d44:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <SysTick_Config+0x40>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d4a:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <SysTick_Config+0x40>)
 8000d4c:	2207      	movs	r2, #7
 8000d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	e000e010 	.word	0xe000e010

08000d60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f7ff ff29 	bl	8000bc0 <__NVIC_SetPriorityGrouping>
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b086      	sub	sp, #24
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	60b9      	str	r1, [r7, #8]
 8000d80:	607a      	str	r2, [r7, #4]
 8000d82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d88:	f7ff ff3e 	bl	8000c08 <__NVIC_GetPriorityGrouping>
 8000d8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	68b9      	ldr	r1, [r7, #8]
 8000d92:	6978      	ldr	r0, [r7, #20]
 8000d94:	f7ff ff8e 	bl	8000cb4 <NVIC_EncodePriority>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d9e:	4611      	mov	r1, r2
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ff5d 	bl	8000c60 <__NVIC_SetPriority>
}
 8000da6:	bf00      	nop
 8000da8:	3718      	adds	r7, #24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b082      	sub	sp, #8
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	4603      	mov	r3, r0
 8000db6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff ff31 	bl	8000c24 <__NVIC_EnableIRQ>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff ffa2 	bl	8000d1c <SysTick_Config>
 8000dd8:	4603      	mov	r3, r0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b087      	sub	sp, #28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000df2:	e160      	b.n	80010b6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	2101      	movs	r1, #1
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000e00:	4013      	ands	r3, r2
 8000e02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	f000 8152 	beq.w	80010b0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f003 0303 	and.w	r3, r3, #3
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d005      	beq.n	8000e24 <HAL_GPIO_Init+0x40>
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f003 0303 	and.w	r3, r3, #3
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d130      	bne.n	8000e86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	2203      	movs	r2, #3
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	68da      	ldr	r2, [r3, #12]
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43db      	mvns	r3, r3
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4013      	ands	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	091b      	lsrs	r3, r3, #4
 8000e70:	f003 0201 	and.w	r2, r3, #1
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f003 0303 	and.w	r3, r3, #3
 8000e8e:	2b03      	cmp	r3, #3
 8000e90:	d017      	beq.n	8000ec2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	68db      	ldr	r3, [r3, #12]
 8000e96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	2203      	movs	r2, #3
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	689a      	ldr	r2, [r3, #8]
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f003 0303 	and.w	r3, r3, #3
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	d123      	bne.n	8000f16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	08da      	lsrs	r2, r3, #3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	3208      	adds	r2, #8
 8000ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	220f      	movs	r2, #15
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43db      	mvns	r3, r3
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	691a      	ldr	r2, [r3, #16]
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	f003 0307 	and.w	r3, r3, #7
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	08da      	lsrs	r2, r3, #3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3208      	adds	r2, #8
 8000f10:	6939      	ldr	r1, [r7, #16]
 8000f12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	2203      	movs	r2, #3
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f003 0203 	and.w	r2, r3, #3
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	f000 80ac 	beq.w	80010b0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f58:	4b5e      	ldr	r3, [pc, #376]	; (80010d4 <HAL_GPIO_Init+0x2f0>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	4a5d      	ldr	r2, [pc, #372]	; (80010d4 <HAL_GPIO_Init+0x2f0>)
 8000f5e:	f043 0301 	orr.w	r3, r3, #1
 8000f62:	6193      	str	r3, [r2, #24]
 8000f64:	4b5b      	ldr	r3, [pc, #364]	; (80010d4 <HAL_GPIO_Init+0x2f0>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	f003 0301 	and.w	r3, r3, #1
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f70:	4a59      	ldr	r2, [pc, #356]	; (80010d8 <HAL_GPIO_Init+0x2f4>)
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	089b      	lsrs	r3, r3, #2
 8000f76:	3302      	adds	r3, #2
 8000f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	f003 0303 	and.w	r3, r3, #3
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	220f      	movs	r2, #15
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	4013      	ands	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f9a:	d025      	beq.n	8000fe8 <HAL_GPIO_Init+0x204>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a4f      	ldr	r2, [pc, #316]	; (80010dc <HAL_GPIO_Init+0x2f8>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d01f      	beq.n	8000fe4 <HAL_GPIO_Init+0x200>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4a4e      	ldr	r2, [pc, #312]	; (80010e0 <HAL_GPIO_Init+0x2fc>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d019      	beq.n	8000fe0 <HAL_GPIO_Init+0x1fc>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4a4d      	ldr	r2, [pc, #308]	; (80010e4 <HAL_GPIO_Init+0x300>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d013      	beq.n	8000fdc <HAL_GPIO_Init+0x1f8>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4a4c      	ldr	r2, [pc, #304]	; (80010e8 <HAL_GPIO_Init+0x304>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d00d      	beq.n	8000fd8 <HAL_GPIO_Init+0x1f4>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a4b      	ldr	r2, [pc, #300]	; (80010ec <HAL_GPIO_Init+0x308>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d007      	beq.n	8000fd4 <HAL_GPIO_Init+0x1f0>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a4a      	ldr	r2, [pc, #296]	; (80010f0 <HAL_GPIO_Init+0x30c>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d101      	bne.n	8000fd0 <HAL_GPIO_Init+0x1ec>
 8000fcc:	2306      	movs	r3, #6
 8000fce:	e00c      	b.n	8000fea <HAL_GPIO_Init+0x206>
 8000fd0:	2307      	movs	r3, #7
 8000fd2:	e00a      	b.n	8000fea <HAL_GPIO_Init+0x206>
 8000fd4:	2305      	movs	r3, #5
 8000fd6:	e008      	b.n	8000fea <HAL_GPIO_Init+0x206>
 8000fd8:	2304      	movs	r3, #4
 8000fda:	e006      	b.n	8000fea <HAL_GPIO_Init+0x206>
 8000fdc:	2303      	movs	r3, #3
 8000fde:	e004      	b.n	8000fea <HAL_GPIO_Init+0x206>
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	e002      	b.n	8000fea <HAL_GPIO_Init+0x206>
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e000      	b.n	8000fea <HAL_GPIO_Init+0x206>
 8000fe8:	2300      	movs	r3, #0
 8000fea:	697a      	ldr	r2, [r7, #20]
 8000fec:	f002 0203 	and.w	r2, r2, #3
 8000ff0:	0092      	lsls	r2, r2, #2
 8000ff2:	4093      	lsls	r3, r2
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ffa:	4937      	ldr	r1, [pc, #220]	; (80010d8 <HAL_GPIO_Init+0x2f4>)
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	089b      	lsrs	r3, r3, #2
 8001000:	3302      	adds	r3, #2
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001008:	4b3a      	ldr	r3, [pc, #232]	; (80010f4 <HAL_GPIO_Init+0x310>)
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	43db      	mvns	r3, r3
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d003      	beq.n	800102c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800102c:	4a31      	ldr	r2, [pc, #196]	; (80010f4 <HAL_GPIO_Init+0x310>)
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001032:	4b30      	ldr	r3, [pc, #192]	; (80010f4 <HAL_GPIO_Init+0x310>)
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	43db      	mvns	r3, r3
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	4013      	ands	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4313      	orrs	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001056:	4a27      	ldr	r2, [pc, #156]	; (80010f4 <HAL_GPIO_Init+0x310>)
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800105c:	4b25      	ldr	r3, [pc, #148]	; (80010f4 <HAL_GPIO_Init+0x310>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	43db      	mvns	r3, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d003      	beq.n	8001080 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	4313      	orrs	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001080:	4a1c      	ldr	r2, [pc, #112]	; (80010f4 <HAL_GPIO_Init+0x310>)
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001086:	4b1b      	ldr	r3, [pc, #108]	; (80010f4 <HAL_GPIO_Init+0x310>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	43db      	mvns	r3, r3
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	4013      	ands	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010aa:	4a12      	ldr	r2, [pc, #72]	; (80010f4 <HAL_GPIO_Init+0x310>)
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	3301      	adds	r3, #1
 80010b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	fa22 f303 	lsr.w	r3, r2, r3
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	f47f ae97 	bne.w	8000df4 <HAL_GPIO_Init+0x10>
  }
}
 80010c6:	bf00      	nop
 80010c8:	bf00      	nop
 80010ca:	371c      	adds	r7, #28
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	40021000 	.word	0x40021000
 80010d8:	40010000 	.word	0x40010000
 80010dc:	48000400 	.word	0x48000400
 80010e0:	48000800 	.word	0x48000800
 80010e4:	48000c00 	.word	0x48000c00
 80010e8:	48001000 	.word	0x48001000
 80010ec:	48001400 	.word	0x48001400
 80010f0:	48001800 	.word	0x48001800
 80010f4:	40010400 	.word	0x40010400

080010f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	460b      	mov	r3, r1
 8001102:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	691a      	ldr	r2, [r3, #16]
 8001108:	887b      	ldrh	r3, [r7, #2]
 800110a:	4013      	ands	r3, r2
 800110c:	2b00      	cmp	r3, #0
 800110e:	d002      	beq.n	8001116 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001110:	2301      	movs	r3, #1
 8001112:	73fb      	strb	r3, [r7, #15]
 8001114:	e001      	b.n	800111a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001116:	2300      	movs	r3, #0
 8001118:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800111a:	7bfb      	ldrb	r3, [r7, #15]
}
 800111c:	4618      	mov	r0, r3
 800111e:	3714      	adds	r7, #20
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	460b      	mov	r3, r1
 8001132:	807b      	strh	r3, [r7, #2]
 8001134:	4613      	mov	r3, r2
 8001136:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001138:	787b      	ldrb	r3, [r7, #1]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800113e:	887a      	ldrh	r2, [r7, #2]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001144:	e002      	b.n	800114c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001146:	887a      	ldrh	r2, [r7, #2]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	695b      	ldr	r3, [r3, #20]
 8001168:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800116a:	887a      	ldrh	r2, [r7, #2]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4013      	ands	r3, r2
 8001170:	041a      	lsls	r2, r3, #16
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	43d9      	mvns	r1, r3
 8001176:	887b      	ldrh	r3, [r7, #2]
 8001178:	400b      	ands	r3, r1
 800117a:	431a      	orrs	r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	619a      	str	r2, [r3, #24]
}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001192:	af00      	add	r7, sp, #0
 8001194:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001198:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800119c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800119e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d102      	bne.n	80011b2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	f001 b83a 	b.w	8002226 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	f000 816f 	beq.w	80014a6 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80011c8:	4bb5      	ldr	r3, [pc, #724]	; (80014a0 <HAL_RCC_OscConfig+0x314>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f003 030c 	and.w	r3, r3, #12
 80011d0:	2b04      	cmp	r3, #4
 80011d2:	d00c      	beq.n	80011ee <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011d4:	4bb2      	ldr	r3, [pc, #712]	; (80014a0 <HAL_RCC_OscConfig+0x314>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f003 030c 	and.w	r3, r3, #12
 80011dc:	2b08      	cmp	r3, #8
 80011de:	d15c      	bne.n	800129a <HAL_RCC_OscConfig+0x10e>
 80011e0:	4baf      	ldr	r3, [pc, #700]	; (80014a0 <HAL_RCC_OscConfig+0x314>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80011e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011ec:	d155      	bne.n	800129a <HAL_RCC_OscConfig+0x10e>
 80011ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011f2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80011fa:	fa93 f3a3 	rbit	r3, r3
 80011fe:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001202:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001206:	fab3 f383 	clz	r3, r3
 800120a:	b2db      	uxtb	r3, r3
 800120c:	095b      	lsrs	r3, r3, #5
 800120e:	b2db      	uxtb	r3, r3
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b01      	cmp	r3, #1
 8001218:	d102      	bne.n	8001220 <HAL_RCC_OscConfig+0x94>
 800121a:	4ba1      	ldr	r3, [pc, #644]	; (80014a0 <HAL_RCC_OscConfig+0x314>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	e015      	b.n	800124c <HAL_RCC_OscConfig+0xc0>
 8001220:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001224:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001228:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800122c:	fa93 f3a3 	rbit	r3, r3
 8001230:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001234:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001238:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800123c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001240:	fa93 f3a3 	rbit	r3, r3
 8001244:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001248:	4b95      	ldr	r3, [pc, #596]	; (80014a0 <HAL_RCC_OscConfig+0x314>)
 800124a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001250:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001254:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001258:	fa92 f2a2 	rbit	r2, r2
 800125c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001260:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001264:	fab2 f282 	clz	r2, r2
 8001268:	b2d2      	uxtb	r2, r2
 800126a:	f042 0220 	orr.w	r2, r2, #32
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	f002 021f 	and.w	r2, r2, #31
 8001274:	2101      	movs	r1, #1
 8001276:	fa01 f202 	lsl.w	r2, r1, r2
 800127a:	4013      	ands	r3, r2
 800127c:	2b00      	cmp	r3, #0
 800127e:	f000 8111 	beq.w	80014a4 <HAL_RCC_OscConfig+0x318>
 8001282:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001286:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	f040 8108 	bne.w	80014a4 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	f000 bfc6 	b.w	8002226 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800129a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800129e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012aa:	d106      	bne.n	80012ba <HAL_RCC_OscConfig+0x12e>
 80012ac:	4b7c      	ldr	r3, [pc, #496]	; (80014a0 <HAL_RCC_OscConfig+0x314>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a7b      	ldr	r2, [pc, #492]	; (80014a0 <HAL_RCC_OscConfig+0x314>)
 80012b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b6:	6013      	str	r3, [r2, #0]
 80012b8:	e036      	b.n	8001328 <HAL_RCC_OscConfig+0x19c>
 80012ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012be:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d10c      	bne.n	80012e4 <HAL_RCC_OscConfig+0x158>
 80012ca:	4b75      	ldr	r3, [pc, #468]	; (80014a0 <HAL_RCC_OscConfig+0x314>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a74      	ldr	r2, [pc, #464]	; (80014a0 <HAL_RCC_OscConfig+0x314>)
 80012d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012d4:	6013      	str	r3, [r2, #0]
 80012d6:	4b72      	ldr	r3, [pc, #456]	; (80014a0 <HAL_RCC_OscConfig+0x314>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a71      	ldr	r2, [pc, #452]	; (80014a0 <HAL_RCC_OscConfig+0x314>)
 80012dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012e0:	6013      	str	r3, [r2, #0]
 80012e2:	e021      	b.n	8001328 <HAL_RCC_OscConfig+0x19c>
 80012e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012f4:	d10c      	bne.n	8001310 <HAL_RCC_OscConfig+0x184>
 80012f6:	4b6a      	ldr	r3, [pc, #424]	; (80014a0 <HAL_RCC_OscConfig+0x314>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a69      	ldr	r2, [pc, #420]	; (80014a0 <HAL_RCC_OscConfig+0x314>)
 80012fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	4b67      	ldr	r3, [pc, #412]	; (80014a0 <HAL_RCC_OscConfig+0x314>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a66      	ldr	r2, [pc, #408]	; (80014a0 <HAL_RCC_OscConfig+0x314>)
 8001308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800130c:	6013      	str	r3, [r2, #0]
 800130e:	e00b      	b.n	8001328 <HAL_RCC_OscConfig+0x19c>
 8001310:	4b63      	ldr	r3, [pc, #396]	; (80014a0 <HAL_RCC_OscConfig+0x314>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a62      	ldr	r2, [pc, #392]	; (80014a0 <HAL_RCC_OscConfig+0x314>)
 8001316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800131a:	6013      	str	r3, [r2, #0]
 800131c:	4b60      	ldr	r3, [pc, #384]	; (80014a0 <HAL_RCC_OscConfig+0x314>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a5f      	ldr	r2, [pc, #380]	; (80014a0 <HAL_RCC_OscConfig+0x314>)
 8001322:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001326:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001328:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800132c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d059      	beq.n	80013ec <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001338:	f7ff fc36 	bl	8000ba8 <HAL_GetTick>
 800133c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001340:	e00a      	b.n	8001358 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001342:	f7ff fc31 	bl	8000ba8 <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b64      	cmp	r3, #100	; 0x64
 8001350:	d902      	bls.n	8001358 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	f000 bf67 	b.w	8002226 <HAL_RCC_OscConfig+0x109a>
 8001358:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800135c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001360:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001364:	fa93 f3a3 	rbit	r3, r3
 8001368:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800136c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001370:	fab3 f383 	clz	r3, r3
 8001374:	b2db      	uxtb	r3, r3
 8001376:	095b      	lsrs	r3, r3, #5
 8001378:	b2db      	uxtb	r3, r3
 800137a:	f043 0301 	orr.w	r3, r3, #1
 800137e:	b2db      	uxtb	r3, r3
 8001380:	2b01      	cmp	r3, #1
 8001382:	d102      	bne.n	800138a <HAL_RCC_OscConfig+0x1fe>
 8001384:	4b46      	ldr	r3, [pc, #280]	; (80014a0 <HAL_RCC_OscConfig+0x314>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	e015      	b.n	80013b6 <HAL_RCC_OscConfig+0x22a>
 800138a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800138e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001392:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001396:	fa93 f3a3 	rbit	r3, r3
 800139a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800139e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013a2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80013a6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80013aa:	fa93 f3a3 	rbit	r3, r3
 80013ae:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80013b2:	4b3b      	ldr	r3, [pc, #236]	; (80014a0 <HAL_RCC_OscConfig+0x314>)
 80013b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013ba:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80013be:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80013c2:	fa92 f2a2 	rbit	r2, r2
 80013c6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80013ca:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80013ce:	fab2 f282 	clz	r2, r2
 80013d2:	b2d2      	uxtb	r2, r2
 80013d4:	f042 0220 	orr.w	r2, r2, #32
 80013d8:	b2d2      	uxtb	r2, r2
 80013da:	f002 021f 	and.w	r2, r2, #31
 80013de:	2101      	movs	r1, #1
 80013e0:	fa01 f202 	lsl.w	r2, r1, r2
 80013e4:	4013      	ands	r3, r2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d0ab      	beq.n	8001342 <HAL_RCC_OscConfig+0x1b6>
 80013ea:	e05c      	b.n	80014a6 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ec:	f7ff fbdc 	bl	8000ba8 <HAL_GetTick>
 80013f0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013f4:	e00a      	b.n	800140c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013f6:	f7ff fbd7 	bl	8000ba8 <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b64      	cmp	r3, #100	; 0x64
 8001404:	d902      	bls.n	800140c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	f000 bf0d 	b.w	8002226 <HAL_RCC_OscConfig+0x109a>
 800140c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001410:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001414:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001418:	fa93 f3a3 	rbit	r3, r3
 800141c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001420:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001424:	fab3 f383 	clz	r3, r3
 8001428:	b2db      	uxtb	r3, r3
 800142a:	095b      	lsrs	r3, r3, #5
 800142c:	b2db      	uxtb	r3, r3
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	b2db      	uxtb	r3, r3
 8001434:	2b01      	cmp	r3, #1
 8001436:	d102      	bne.n	800143e <HAL_RCC_OscConfig+0x2b2>
 8001438:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <HAL_RCC_OscConfig+0x314>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	e015      	b.n	800146a <HAL_RCC_OscConfig+0x2de>
 800143e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001442:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001446:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800144a:	fa93 f3a3 	rbit	r3, r3
 800144e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001452:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001456:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800145a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800145e:	fa93 f3a3 	rbit	r3, r3
 8001462:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <HAL_RCC_OscConfig+0x314>)
 8001468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800146e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001472:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001476:	fa92 f2a2 	rbit	r2, r2
 800147a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800147e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001482:	fab2 f282 	clz	r2, r2
 8001486:	b2d2      	uxtb	r2, r2
 8001488:	f042 0220 	orr.w	r2, r2, #32
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	f002 021f 	and.w	r2, r2, #31
 8001492:	2101      	movs	r1, #1
 8001494:	fa01 f202 	lsl.w	r2, r1, r2
 8001498:	4013      	ands	r3, r2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1ab      	bne.n	80013f6 <HAL_RCC_OscConfig+0x26a>
 800149e:	e002      	b.n	80014a6 <HAL_RCC_OscConfig+0x31a>
 80014a0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014aa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f000 817f 	beq.w	80017ba <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80014bc:	4ba7      	ldr	r3, [pc, #668]	; (800175c <HAL_RCC_OscConfig+0x5d0>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 030c 	and.w	r3, r3, #12
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d00c      	beq.n	80014e2 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80014c8:	4ba4      	ldr	r3, [pc, #656]	; (800175c <HAL_RCC_OscConfig+0x5d0>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f003 030c 	and.w	r3, r3, #12
 80014d0:	2b08      	cmp	r3, #8
 80014d2:	d173      	bne.n	80015bc <HAL_RCC_OscConfig+0x430>
 80014d4:	4ba1      	ldr	r3, [pc, #644]	; (800175c <HAL_RCC_OscConfig+0x5d0>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80014dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014e0:	d16c      	bne.n	80015bc <HAL_RCC_OscConfig+0x430>
 80014e2:	2302      	movs	r3, #2
 80014e4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80014ec:	fa93 f3a3 	rbit	r3, r3
 80014f0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80014f4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014f8:	fab3 f383 	clz	r3, r3
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	095b      	lsrs	r3, r3, #5
 8001500:	b2db      	uxtb	r3, r3
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	b2db      	uxtb	r3, r3
 8001508:	2b01      	cmp	r3, #1
 800150a:	d102      	bne.n	8001512 <HAL_RCC_OscConfig+0x386>
 800150c:	4b93      	ldr	r3, [pc, #588]	; (800175c <HAL_RCC_OscConfig+0x5d0>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	e013      	b.n	800153a <HAL_RCC_OscConfig+0x3ae>
 8001512:	2302      	movs	r3, #2
 8001514:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001518:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800151c:	fa93 f3a3 	rbit	r3, r3
 8001520:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001524:	2302      	movs	r3, #2
 8001526:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800152a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800152e:	fa93 f3a3 	rbit	r3, r3
 8001532:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001536:	4b89      	ldr	r3, [pc, #548]	; (800175c <HAL_RCC_OscConfig+0x5d0>)
 8001538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153a:	2202      	movs	r2, #2
 800153c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001540:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001544:	fa92 f2a2 	rbit	r2, r2
 8001548:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800154c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001550:	fab2 f282 	clz	r2, r2
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	f042 0220 	orr.w	r2, r2, #32
 800155a:	b2d2      	uxtb	r2, r2
 800155c:	f002 021f 	and.w	r2, r2, #31
 8001560:	2101      	movs	r1, #1
 8001562:	fa01 f202 	lsl.w	r2, r1, r2
 8001566:	4013      	ands	r3, r2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d00a      	beq.n	8001582 <HAL_RCC_OscConfig+0x3f6>
 800156c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001570:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d002      	beq.n	8001582 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	f000 be52 	b.w	8002226 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001582:	4b76      	ldr	r3, [pc, #472]	; (800175c <HAL_RCC_OscConfig+0x5d0>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800158a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800158e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	21f8      	movs	r1, #248	; 0xf8
 8001598:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80015a0:	fa91 f1a1 	rbit	r1, r1
 80015a4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80015a8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80015ac:	fab1 f181 	clz	r1, r1
 80015b0:	b2c9      	uxtb	r1, r1
 80015b2:	408b      	lsls	r3, r1
 80015b4:	4969      	ldr	r1, [pc, #420]	; (800175c <HAL_RCC_OscConfig+0x5d0>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ba:	e0fe      	b.n	80017ba <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015c0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f000 8088 	beq.w	80016de <HAL_RCC_OscConfig+0x552>
 80015ce:	2301      	movs	r3, #1
 80015d0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80015d8:	fa93 f3a3 	rbit	r3, r3
 80015dc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80015e0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015e4:	fab3 f383 	clz	r3, r3
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015ee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	461a      	mov	r2, r3
 80015f6:	2301      	movs	r3, #1
 80015f8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fa:	f7ff fad5 	bl	8000ba8 <HAL_GetTick>
 80015fe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001602:	e00a      	b.n	800161a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001604:	f7ff fad0 	bl	8000ba8 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d902      	bls.n	800161a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	f000 be06 	b.w	8002226 <HAL_RCC_OscConfig+0x109a>
 800161a:	2302      	movs	r3, #2
 800161c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001620:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001624:	fa93 f3a3 	rbit	r3, r3
 8001628:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800162c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001630:	fab3 f383 	clz	r3, r3
 8001634:	b2db      	uxtb	r3, r3
 8001636:	095b      	lsrs	r3, r3, #5
 8001638:	b2db      	uxtb	r3, r3
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	b2db      	uxtb	r3, r3
 8001640:	2b01      	cmp	r3, #1
 8001642:	d102      	bne.n	800164a <HAL_RCC_OscConfig+0x4be>
 8001644:	4b45      	ldr	r3, [pc, #276]	; (800175c <HAL_RCC_OscConfig+0x5d0>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	e013      	b.n	8001672 <HAL_RCC_OscConfig+0x4e6>
 800164a:	2302      	movs	r3, #2
 800164c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001650:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001654:	fa93 f3a3 	rbit	r3, r3
 8001658:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800165c:	2302      	movs	r3, #2
 800165e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001662:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001666:	fa93 f3a3 	rbit	r3, r3
 800166a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800166e:	4b3b      	ldr	r3, [pc, #236]	; (800175c <HAL_RCC_OscConfig+0x5d0>)
 8001670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001672:	2202      	movs	r2, #2
 8001674:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001678:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800167c:	fa92 f2a2 	rbit	r2, r2
 8001680:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001684:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001688:	fab2 f282 	clz	r2, r2
 800168c:	b2d2      	uxtb	r2, r2
 800168e:	f042 0220 	orr.w	r2, r2, #32
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	f002 021f 	and.w	r2, r2, #31
 8001698:	2101      	movs	r1, #1
 800169a:	fa01 f202 	lsl.w	r2, r1, r2
 800169e:	4013      	ands	r3, r2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d0af      	beq.n	8001604 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a4:	4b2d      	ldr	r3, [pc, #180]	; (800175c <HAL_RCC_OscConfig+0x5d0>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016b0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	21f8      	movs	r1, #248	; 0xf8
 80016ba:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016be:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80016c2:	fa91 f1a1 	rbit	r1, r1
 80016c6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80016ca:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80016ce:	fab1 f181 	clz	r1, r1
 80016d2:	b2c9      	uxtb	r1, r1
 80016d4:	408b      	lsls	r3, r1
 80016d6:	4921      	ldr	r1, [pc, #132]	; (800175c <HAL_RCC_OscConfig+0x5d0>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	600b      	str	r3, [r1, #0]
 80016dc:	e06d      	b.n	80017ba <HAL_RCC_OscConfig+0x62e>
 80016de:	2301      	movs	r3, #1
 80016e0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80016e8:	fa93 f3a3 	rbit	r3, r3
 80016ec:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80016f0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016f4:	fab3 f383 	clz	r3, r3
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016fe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	461a      	mov	r2, r3
 8001706:	2300      	movs	r3, #0
 8001708:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170a:	f7ff fa4d 	bl	8000ba8 <HAL_GetTick>
 800170e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001712:	e00a      	b.n	800172a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001714:	f7ff fa48 	bl	8000ba8 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d902      	bls.n	800172a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	f000 bd7e 	b.w	8002226 <HAL_RCC_OscConfig+0x109a>
 800172a:	2302      	movs	r3, #2
 800172c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001730:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001734:	fa93 f3a3 	rbit	r3, r3
 8001738:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800173c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001740:	fab3 f383 	clz	r3, r3
 8001744:	b2db      	uxtb	r3, r3
 8001746:	095b      	lsrs	r3, r3, #5
 8001748:	b2db      	uxtb	r3, r3
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	b2db      	uxtb	r3, r3
 8001750:	2b01      	cmp	r3, #1
 8001752:	d105      	bne.n	8001760 <HAL_RCC_OscConfig+0x5d4>
 8001754:	4b01      	ldr	r3, [pc, #4]	; (800175c <HAL_RCC_OscConfig+0x5d0>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	e016      	b.n	8001788 <HAL_RCC_OscConfig+0x5fc>
 800175a:	bf00      	nop
 800175c:	40021000 	.word	0x40021000
 8001760:	2302      	movs	r3, #2
 8001762:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001766:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800176a:	fa93 f3a3 	rbit	r3, r3
 800176e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001772:	2302      	movs	r3, #2
 8001774:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001778:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800177c:	fa93 f3a3 	rbit	r3, r3
 8001780:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001784:	4bbf      	ldr	r3, [pc, #764]	; (8001a84 <HAL_RCC_OscConfig+0x8f8>)
 8001786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001788:	2202      	movs	r2, #2
 800178a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800178e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001792:	fa92 f2a2 	rbit	r2, r2
 8001796:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800179a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800179e:	fab2 f282 	clz	r2, r2
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	f042 0220 	orr.w	r2, r2, #32
 80017a8:	b2d2      	uxtb	r2, r2
 80017aa:	f002 021f 	and.w	r2, r2, #31
 80017ae:	2101      	movs	r1, #1
 80017b0:	fa01 f202 	lsl.w	r2, r1, r2
 80017b4:	4013      	ands	r3, r2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1ac      	bne.n	8001714 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017be:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0308 	and.w	r3, r3, #8
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f000 8113 	beq.w	80019f6 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017d4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	695b      	ldr	r3, [r3, #20]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d07c      	beq.n	80018da <HAL_RCC_OscConfig+0x74e>
 80017e0:	2301      	movs	r3, #1
 80017e2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80017ea:	fa93 f3a3 	rbit	r3, r3
 80017ee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80017f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017f6:	fab3 f383 	clz	r3, r3
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	461a      	mov	r2, r3
 80017fe:	4ba2      	ldr	r3, [pc, #648]	; (8001a88 <HAL_RCC_OscConfig+0x8fc>)
 8001800:	4413      	add	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	461a      	mov	r2, r3
 8001806:	2301      	movs	r3, #1
 8001808:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800180a:	f7ff f9cd 	bl	8000ba8 <HAL_GetTick>
 800180e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001812:	e00a      	b.n	800182a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001814:	f7ff f9c8 	bl	8000ba8 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d902      	bls.n	800182a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	f000 bcfe 	b.w	8002226 <HAL_RCC_OscConfig+0x109a>
 800182a:	2302      	movs	r3, #2
 800182c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001830:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001834:	fa93 f2a3 	rbit	r2, r3
 8001838:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800183c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001846:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800184a:	2202      	movs	r2, #2
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001852:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	fa93 f2a3 	rbit	r2, r3
 800185c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001860:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800186a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800186e:	2202      	movs	r2, #2
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001876:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	fa93 f2a3 	rbit	r2, r3
 8001880:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001884:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001888:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800188a:	4b7e      	ldr	r3, [pc, #504]	; (8001a84 <HAL_RCC_OscConfig+0x8f8>)
 800188c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800188e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001892:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001896:	2102      	movs	r1, #2
 8001898:	6019      	str	r1, [r3, #0]
 800189a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800189e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	fa93 f1a3 	rbit	r1, r3
 80018a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ac:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80018b0:	6019      	str	r1, [r3, #0]
  return result;
 80018b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018b6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	fab3 f383 	clz	r3, r3
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	f003 031f 	and.w	r3, r3, #31
 80018cc:	2101      	movs	r1, #1
 80018ce:	fa01 f303 	lsl.w	r3, r1, r3
 80018d2:	4013      	ands	r3, r2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d09d      	beq.n	8001814 <HAL_RCC_OscConfig+0x688>
 80018d8:	e08d      	b.n	80019f6 <HAL_RCC_OscConfig+0x86a>
 80018da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018de:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80018e2:	2201      	movs	r2, #1
 80018e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ea:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	fa93 f2a3 	rbit	r2, r3
 80018f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018f8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80018fc:	601a      	str	r2, [r3, #0]
  return result;
 80018fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001902:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001906:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001908:	fab3 f383 	clz	r3, r3
 800190c:	b2db      	uxtb	r3, r3
 800190e:	461a      	mov	r2, r3
 8001910:	4b5d      	ldr	r3, [pc, #372]	; (8001a88 <HAL_RCC_OscConfig+0x8fc>)
 8001912:	4413      	add	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	461a      	mov	r2, r3
 8001918:	2300      	movs	r3, #0
 800191a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800191c:	f7ff f944 	bl	8000ba8 <HAL_GetTick>
 8001920:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001924:	e00a      	b.n	800193c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001926:	f7ff f93f 	bl	8000ba8 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d902      	bls.n	800193c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	f000 bc75 	b.w	8002226 <HAL_RCC_OscConfig+0x109a>
 800193c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001940:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001944:	2202      	movs	r2, #2
 8001946:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001948:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800194c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	fa93 f2a3 	rbit	r2, r3
 8001956:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800195a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001964:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001968:	2202      	movs	r2, #2
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001970:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	fa93 f2a3 	rbit	r2, r3
 800197a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800197e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001988:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800198c:	2202      	movs	r2, #2
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001994:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	fa93 f2a3 	rbit	r2, r3
 800199e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019a2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80019a6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019a8:	4b36      	ldr	r3, [pc, #216]	; (8001a84 <HAL_RCC_OscConfig+0x8f8>)
 80019aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019b0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80019b4:	2102      	movs	r1, #2
 80019b6:	6019      	str	r1, [r3, #0]
 80019b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019bc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	fa93 f1a3 	rbit	r1, r3
 80019c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ca:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80019ce:	6019      	str	r1, [r3, #0]
  return result;
 80019d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019d4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	fab3 f383 	clz	r3, r3
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	f003 031f 	and.w	r3, r3, #31
 80019ea:	2101      	movs	r1, #1
 80019ec:	fa01 f303 	lsl.w	r3, r1, r3
 80019f0:	4013      	ands	r3, r2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d197      	bne.n	8001926 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019fa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0304 	and.w	r3, r3, #4
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f000 81a5 	beq.w	8001d56 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a12:	4b1c      	ldr	r3, [pc, #112]	; (8001a84 <HAL_RCC_OscConfig+0x8f8>)
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d116      	bne.n	8001a4c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a1e:	4b19      	ldr	r3, [pc, #100]	; (8001a84 <HAL_RCC_OscConfig+0x8f8>)
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	4a18      	ldr	r2, [pc, #96]	; (8001a84 <HAL_RCC_OscConfig+0x8f8>)
 8001a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a28:	61d3      	str	r3, [r2, #28]
 8001a2a:	4b16      	ldr	r3, [pc, #88]	; (8001a84 <HAL_RCC_OscConfig+0x8f8>)
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001a32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a44:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001a46:	2301      	movs	r3, #1
 8001a48:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <HAL_RCC_OscConfig+0x900>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d121      	bne.n	8001a9c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a58:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <HAL_RCC_OscConfig+0x900>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a0b      	ldr	r2, [pc, #44]	; (8001a8c <HAL_RCC_OscConfig+0x900>)
 8001a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a62:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a64:	f7ff f8a0 	bl	8000ba8 <HAL_GetTick>
 8001a68:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a6c:	e010      	b.n	8001a90 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a6e:	f7ff f89b 	bl	8000ba8 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b64      	cmp	r3, #100	; 0x64
 8001a7c:	d908      	bls.n	8001a90 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e3d1      	b.n	8002226 <HAL_RCC_OscConfig+0x109a>
 8001a82:	bf00      	nop
 8001a84:	40021000 	.word	0x40021000
 8001a88:	10908120 	.word	0x10908120
 8001a8c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a90:	4b8d      	ldr	r3, [pc, #564]	; (8001cc8 <HAL_RCC_OscConfig+0xb3c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0e8      	beq.n	8001a6e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aa0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d106      	bne.n	8001aba <HAL_RCC_OscConfig+0x92e>
 8001aac:	4b87      	ldr	r3, [pc, #540]	; (8001ccc <HAL_RCC_OscConfig+0xb40>)
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	4a86      	ldr	r2, [pc, #536]	; (8001ccc <HAL_RCC_OscConfig+0xb40>)
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	6213      	str	r3, [r2, #32]
 8001ab8:	e035      	b.n	8001b26 <HAL_RCC_OscConfig+0x99a>
 8001aba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001abe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10c      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x958>
 8001aca:	4b80      	ldr	r3, [pc, #512]	; (8001ccc <HAL_RCC_OscConfig+0xb40>)
 8001acc:	6a1b      	ldr	r3, [r3, #32]
 8001ace:	4a7f      	ldr	r2, [pc, #508]	; (8001ccc <HAL_RCC_OscConfig+0xb40>)
 8001ad0:	f023 0301 	bic.w	r3, r3, #1
 8001ad4:	6213      	str	r3, [r2, #32]
 8001ad6:	4b7d      	ldr	r3, [pc, #500]	; (8001ccc <HAL_RCC_OscConfig+0xb40>)
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
 8001ada:	4a7c      	ldr	r2, [pc, #496]	; (8001ccc <HAL_RCC_OscConfig+0xb40>)
 8001adc:	f023 0304 	bic.w	r3, r3, #4
 8001ae0:	6213      	str	r3, [r2, #32]
 8001ae2:	e020      	b.n	8001b26 <HAL_RCC_OscConfig+0x99a>
 8001ae4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ae8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	2b05      	cmp	r3, #5
 8001af2:	d10c      	bne.n	8001b0e <HAL_RCC_OscConfig+0x982>
 8001af4:	4b75      	ldr	r3, [pc, #468]	; (8001ccc <HAL_RCC_OscConfig+0xb40>)
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	4a74      	ldr	r2, [pc, #464]	; (8001ccc <HAL_RCC_OscConfig+0xb40>)
 8001afa:	f043 0304 	orr.w	r3, r3, #4
 8001afe:	6213      	str	r3, [r2, #32]
 8001b00:	4b72      	ldr	r3, [pc, #456]	; (8001ccc <HAL_RCC_OscConfig+0xb40>)
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	4a71      	ldr	r2, [pc, #452]	; (8001ccc <HAL_RCC_OscConfig+0xb40>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	6213      	str	r3, [r2, #32]
 8001b0c:	e00b      	b.n	8001b26 <HAL_RCC_OscConfig+0x99a>
 8001b0e:	4b6f      	ldr	r3, [pc, #444]	; (8001ccc <HAL_RCC_OscConfig+0xb40>)
 8001b10:	6a1b      	ldr	r3, [r3, #32]
 8001b12:	4a6e      	ldr	r2, [pc, #440]	; (8001ccc <HAL_RCC_OscConfig+0xb40>)
 8001b14:	f023 0301 	bic.w	r3, r3, #1
 8001b18:	6213      	str	r3, [r2, #32]
 8001b1a:	4b6c      	ldr	r3, [pc, #432]	; (8001ccc <HAL_RCC_OscConfig+0xb40>)
 8001b1c:	6a1b      	ldr	r3, [r3, #32]
 8001b1e:	4a6b      	ldr	r2, [pc, #428]	; (8001ccc <HAL_RCC_OscConfig+0xb40>)
 8001b20:	f023 0304 	bic.w	r3, r3, #4
 8001b24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b2a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f000 8081 	beq.w	8001c3a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b38:	f7ff f836 	bl	8000ba8 <HAL_GetTick>
 8001b3c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b40:	e00b      	b.n	8001b5a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b42:	f7ff f831 	bl	8000ba8 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e365      	b.n	8002226 <HAL_RCC_OscConfig+0x109a>
 8001b5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b5e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001b62:	2202      	movs	r2, #2
 8001b64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b6a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	fa93 f2a3 	rbit	r2, r3
 8001b74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b78:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b82:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001b86:	2202      	movs	r2, #2
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b8e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	fa93 f2a3 	rbit	r2, r3
 8001b98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b9c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001ba0:	601a      	str	r2, [r3, #0]
  return result;
 8001ba2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ba6:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001baa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bac:	fab3 f383 	clz	r3, r3
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	095b      	lsrs	r3, r3, #5
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	f043 0302 	orr.w	r3, r3, #2
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d102      	bne.n	8001bc6 <HAL_RCC_OscConfig+0xa3a>
 8001bc0:	4b42      	ldr	r3, [pc, #264]	; (8001ccc <HAL_RCC_OscConfig+0xb40>)
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	e013      	b.n	8001bee <HAL_RCC_OscConfig+0xa62>
 8001bc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bca:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001bce:	2202      	movs	r2, #2
 8001bd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bd6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	fa93 f2a3 	rbit	r2, r3
 8001be0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001be4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	4b38      	ldr	r3, [pc, #224]	; (8001ccc <HAL_RCC_OscConfig+0xb40>)
 8001bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bf2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001bf6:	2102      	movs	r1, #2
 8001bf8:	6011      	str	r1, [r2, #0]
 8001bfa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bfe:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001c02:	6812      	ldr	r2, [r2, #0]
 8001c04:	fa92 f1a2 	rbit	r1, r2
 8001c08:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c0c:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001c10:	6011      	str	r1, [r2, #0]
  return result;
 8001c12:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c16:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001c1a:	6812      	ldr	r2, [r2, #0]
 8001c1c:	fab2 f282 	clz	r2, r2
 8001c20:	b2d2      	uxtb	r2, r2
 8001c22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	f002 021f 	and.w	r2, r2, #31
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c32:	4013      	ands	r3, r2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d084      	beq.n	8001b42 <HAL_RCC_OscConfig+0x9b6>
 8001c38:	e083      	b.n	8001d42 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c3a:	f7fe ffb5 	bl	8000ba8 <HAL_GetTick>
 8001c3e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c42:	e00b      	b.n	8001c5c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c44:	f7fe ffb0 	bl	8000ba8 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e2e4      	b.n	8002226 <HAL_RCC_OscConfig+0x109a>
 8001c5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c60:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001c64:	2202      	movs	r2, #2
 8001c66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c6c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	fa93 f2a3 	rbit	r2, r3
 8001c76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c7a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c84:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001c88:	2202      	movs	r2, #2
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c90:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	fa93 f2a3 	rbit	r2, r3
 8001c9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c9e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001ca2:	601a      	str	r2, [r3, #0]
  return result;
 8001ca4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca8:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001cac:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cae:	fab3 f383 	clz	r3, r3
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	095b      	lsrs	r3, r3, #5
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	f043 0302 	orr.w	r3, r3, #2
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d106      	bne.n	8001cd0 <HAL_RCC_OscConfig+0xb44>
 8001cc2:	4b02      	ldr	r3, [pc, #8]	; (8001ccc <HAL_RCC_OscConfig+0xb40>)
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	e017      	b.n	8001cf8 <HAL_RCC_OscConfig+0xb6c>
 8001cc8:	40007000 	.word	0x40007000
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cd4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001cd8:	2202      	movs	r2, #2
 8001cda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ce0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	fa93 f2a3 	rbit	r2, r3
 8001cea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cee:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	4bb3      	ldr	r3, [pc, #716]	; (8001fc4 <HAL_RCC_OscConfig+0xe38>)
 8001cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cfc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001d00:	2102      	movs	r1, #2
 8001d02:	6011      	str	r1, [r2, #0]
 8001d04:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d08:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001d0c:	6812      	ldr	r2, [r2, #0]
 8001d0e:	fa92 f1a2 	rbit	r1, r2
 8001d12:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d16:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001d1a:	6011      	str	r1, [r2, #0]
  return result;
 8001d1c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d20:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001d24:	6812      	ldr	r2, [r2, #0]
 8001d26:	fab2 f282 	clz	r2, r2
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	f002 021f 	and.w	r2, r2, #31
 8001d36:	2101      	movs	r1, #1
 8001d38:	fa01 f202 	lsl.w	r2, r1, r2
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d180      	bne.n	8001c44 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d42:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d105      	bne.n	8001d56 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d4a:	4b9e      	ldr	r3, [pc, #632]	; (8001fc4 <HAL_RCC_OscConfig+0xe38>)
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	4a9d      	ldr	r2, [pc, #628]	; (8001fc4 <HAL_RCC_OscConfig+0xe38>)
 8001d50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d54:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d5a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 825e 	beq.w	8002224 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d68:	4b96      	ldr	r3, [pc, #600]	; (8001fc4 <HAL_RCC_OscConfig+0xe38>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 030c 	and.w	r3, r3, #12
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	f000 821f 	beq.w	80021b4 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d7a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	f040 8170 	bne.w	8002068 <HAL_RCC_OscConfig+0xedc>
 8001d88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d8c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001d90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d9a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	fa93 f2a3 	rbit	r2, r3
 8001da4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001da8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001dac:	601a      	str	r2, [r3, #0]
  return result;
 8001dae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001db2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001db6:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db8:	fab3 f383 	clz	r3, r3
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001dc2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	461a      	mov	r2, r3
 8001dca:	2300      	movs	r3, #0
 8001dcc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dce:	f7fe feeb 	bl	8000ba8 <HAL_GetTick>
 8001dd2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dd6:	e009      	b.n	8001dec <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dd8:	f7fe fee6 	bl	8000ba8 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e21c      	b.n	8002226 <HAL_RCC_OscConfig+0x109a>
 8001dec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001df0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001df4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001df8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dfe:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	fa93 f2a3 	rbit	r2, r3
 8001e08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e0c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001e10:	601a      	str	r2, [r3, #0]
  return result;
 8001e12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e16:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001e1a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e1c:	fab3 f383 	clz	r3, r3
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	095b      	lsrs	r3, r3, #5
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d102      	bne.n	8001e36 <HAL_RCC_OscConfig+0xcaa>
 8001e30:	4b64      	ldr	r3, [pc, #400]	; (8001fc4 <HAL_RCC_OscConfig+0xe38>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	e027      	b.n	8001e86 <HAL_RCC_OscConfig+0xcfa>
 8001e36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e3a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001e3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e48:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	fa93 f2a3 	rbit	r2, r3
 8001e52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e56:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e60:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001e64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e6e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	fa93 f2a3 	rbit	r2, r3
 8001e78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e7c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	4b50      	ldr	r3, [pc, #320]	; (8001fc4 <HAL_RCC_OscConfig+0xe38>)
 8001e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e86:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e8a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001e8e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e92:	6011      	str	r1, [r2, #0]
 8001e94:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e98:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001e9c:	6812      	ldr	r2, [r2, #0]
 8001e9e:	fa92 f1a2 	rbit	r1, r2
 8001ea2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ea6:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001eaa:	6011      	str	r1, [r2, #0]
  return result;
 8001eac:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001eb0:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001eb4:	6812      	ldr	r2, [r2, #0]
 8001eb6:	fab2 f282 	clz	r2, r2
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	f042 0220 	orr.w	r2, r2, #32
 8001ec0:	b2d2      	uxtb	r2, r2
 8001ec2:	f002 021f 	and.w	r2, r2, #31
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ecc:	4013      	ands	r3, r2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d182      	bne.n	8001dd8 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ed2:	4b3c      	ldr	r3, [pc, #240]	; (8001fc4 <HAL_RCC_OscConfig+0xe38>)
 8001ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed6:	f023 020f 	bic.w	r2, r3, #15
 8001eda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ede:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee6:	4937      	ldr	r1, [pc, #220]	; (8001fc4 <HAL_RCC_OscConfig+0xe38>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001eec:	4b35      	ldr	r3, [pc, #212]	; (8001fc4 <HAL_RCC_OscConfig+0xe38>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001ef4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ef8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6a19      	ldr	r1, [r3, #32]
 8001f00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f04:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	69db      	ldr	r3, [r3, #28]
 8001f0c:	430b      	orrs	r3, r1
 8001f0e:	492d      	ldr	r1, [pc, #180]	; (8001fc4 <HAL_RCC_OscConfig+0xe38>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	604b      	str	r3, [r1, #4]
 8001f14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f18:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001f1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f26:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	fa93 f2a3 	rbit	r2, r3
 8001f30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f34:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001f38:	601a      	str	r2, [r3, #0]
  return result;
 8001f3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f3e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001f42:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f44:	fab3 f383 	clz	r3, r3
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f4e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	461a      	mov	r2, r3
 8001f56:	2301      	movs	r3, #1
 8001f58:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5a:	f7fe fe25 	bl	8000ba8 <HAL_GetTick>
 8001f5e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f62:	e009      	b.n	8001f78 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f64:	f7fe fe20 	bl	8000ba8 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e156      	b.n	8002226 <HAL_RCC_OscConfig+0x109a>
 8001f78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f7c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001f80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f8a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	fa93 f2a3 	rbit	r2, r3
 8001f94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f98:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001f9c:	601a      	str	r2, [r3, #0]
  return result;
 8001f9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fa2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001fa6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fa8:	fab3 f383 	clz	r3, r3
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	095b      	lsrs	r3, r3, #5
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	f043 0301 	orr.w	r3, r3, #1
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d105      	bne.n	8001fc8 <HAL_RCC_OscConfig+0xe3c>
 8001fbc:	4b01      	ldr	r3, [pc, #4]	; (8001fc4 <HAL_RCC_OscConfig+0xe38>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	e02a      	b.n	8002018 <HAL_RCC_OscConfig+0xe8c>
 8001fc2:	bf00      	nop
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fcc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001fd0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fda:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	fa93 f2a3 	rbit	r2, r3
 8001fe4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fe8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ff2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001ff6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002000:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	fa93 f2a3 	rbit	r2, r3
 800200a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800200e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	4b86      	ldr	r3, [pc, #536]	; (8002230 <HAL_RCC_OscConfig+0x10a4>)
 8002016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002018:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800201c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002020:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002024:	6011      	str	r1, [r2, #0]
 8002026:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800202a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800202e:	6812      	ldr	r2, [r2, #0]
 8002030:	fa92 f1a2 	rbit	r1, r2
 8002034:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002038:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800203c:	6011      	str	r1, [r2, #0]
  return result;
 800203e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002042:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002046:	6812      	ldr	r2, [r2, #0]
 8002048:	fab2 f282 	clz	r2, r2
 800204c:	b2d2      	uxtb	r2, r2
 800204e:	f042 0220 	orr.w	r2, r2, #32
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	f002 021f 	and.w	r2, r2, #31
 8002058:	2101      	movs	r1, #1
 800205a:	fa01 f202 	lsl.w	r2, r1, r2
 800205e:	4013      	ands	r3, r2
 8002060:	2b00      	cmp	r3, #0
 8002062:	f43f af7f 	beq.w	8001f64 <HAL_RCC_OscConfig+0xdd8>
 8002066:	e0dd      	b.n	8002224 <HAL_RCC_OscConfig+0x1098>
 8002068:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800206c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002070:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002074:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002076:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800207a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	fa93 f2a3 	rbit	r2, r3
 8002084:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002088:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800208c:	601a      	str	r2, [r3, #0]
  return result;
 800208e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002092:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002096:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002098:	fab3 f383 	clz	r3, r3
 800209c:	b2db      	uxtb	r3, r3
 800209e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020a2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	461a      	mov	r2, r3
 80020aa:	2300      	movs	r3, #0
 80020ac:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ae:	f7fe fd7b 	bl	8000ba8 <HAL_GetTick>
 80020b2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b6:	e009      	b.n	80020cc <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b8:	f7fe fd76 	bl	8000ba8 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e0ac      	b.n	8002226 <HAL_RCC_OscConfig+0x109a>
 80020cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020d0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80020d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020de:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	fa93 f2a3 	rbit	r2, r3
 80020e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ec:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80020f0:	601a      	str	r2, [r3, #0]
  return result;
 80020f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020f6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80020fa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020fc:	fab3 f383 	clz	r3, r3
 8002100:	b2db      	uxtb	r3, r3
 8002102:	095b      	lsrs	r3, r3, #5
 8002104:	b2db      	uxtb	r3, r3
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b01      	cmp	r3, #1
 800210e:	d102      	bne.n	8002116 <HAL_RCC_OscConfig+0xf8a>
 8002110:	4b47      	ldr	r3, [pc, #284]	; (8002230 <HAL_RCC_OscConfig+0x10a4>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	e027      	b.n	8002166 <HAL_RCC_OscConfig+0xfda>
 8002116:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800211a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800211e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002122:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002124:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002128:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	fa93 f2a3 	rbit	r2, r3
 8002132:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002136:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002140:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002144:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800214e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	fa93 f2a3 	rbit	r2, r3
 8002158:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800215c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	4b33      	ldr	r3, [pc, #204]	; (8002230 <HAL_RCC_OscConfig+0x10a4>)
 8002164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002166:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800216a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800216e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002172:	6011      	str	r1, [r2, #0]
 8002174:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002178:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800217c:	6812      	ldr	r2, [r2, #0]
 800217e:	fa92 f1a2 	rbit	r1, r2
 8002182:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002186:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800218a:	6011      	str	r1, [r2, #0]
  return result;
 800218c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002190:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002194:	6812      	ldr	r2, [r2, #0]
 8002196:	fab2 f282 	clz	r2, r2
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	f042 0220 	orr.w	r2, r2, #32
 80021a0:	b2d2      	uxtb	r2, r2
 80021a2:	f002 021f 	and.w	r2, r2, #31
 80021a6:	2101      	movs	r1, #1
 80021a8:	fa01 f202 	lsl.w	r2, r1, r2
 80021ac:	4013      	ands	r3, r2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d182      	bne.n	80020b8 <HAL_RCC_OscConfig+0xf2c>
 80021b2:	e037      	b.n	8002224 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021b8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d101      	bne.n	80021c8 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e02e      	b.n	8002226 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021c8:	4b19      	ldr	r3, [pc, #100]	; (8002230 <HAL_RCC_OscConfig+0x10a4>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80021d0:	4b17      	ldr	r3, [pc, #92]	; (8002230 <HAL_RCC_OscConfig+0x10a4>)
 80021d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80021d8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80021dc:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80021e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	69db      	ldr	r3, [r3, #28]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d117      	bne.n	8002220 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80021f0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80021f4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002204:	429a      	cmp	r2, r3
 8002206:	d10b      	bne.n	8002220 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002208:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800220c:	f003 020f 	and.w	r2, r3, #15
 8002210:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002214:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800221c:	429a      	cmp	r2, r3
 800221e:	d001      	beq.n	8002224 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e000      	b.n	8002226 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40021000 	.word	0x40021000

08002234 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b09e      	sub	sp, #120	; 0x78
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800223e:	2300      	movs	r3, #0
 8002240:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d101      	bne.n	800224c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e162      	b.n	8002512 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800224c:	4b90      	ldr	r3, [pc, #576]	; (8002490 <HAL_RCC_ClockConfig+0x25c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	429a      	cmp	r2, r3
 8002258:	d910      	bls.n	800227c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225a:	4b8d      	ldr	r3, [pc, #564]	; (8002490 <HAL_RCC_ClockConfig+0x25c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f023 0207 	bic.w	r2, r3, #7
 8002262:	498b      	ldr	r1, [pc, #556]	; (8002490 <HAL_RCC_ClockConfig+0x25c>)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	4313      	orrs	r3, r2
 8002268:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800226a:	4b89      	ldr	r3, [pc, #548]	; (8002490 <HAL_RCC_ClockConfig+0x25c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	429a      	cmp	r2, r3
 8002276:	d001      	beq.n	800227c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e14a      	b.n	8002512 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d008      	beq.n	800229a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002288:	4b82      	ldr	r3, [pc, #520]	; (8002494 <HAL_RCC_ClockConfig+0x260>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	497f      	ldr	r1, [pc, #508]	; (8002494 <HAL_RCC_ClockConfig+0x260>)
 8002296:	4313      	orrs	r3, r2
 8002298:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 80dc 	beq.w	8002460 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d13c      	bne.n	800232a <HAL_RCC_ClockConfig+0xf6>
 80022b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022b4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022b8:	fa93 f3a3 	rbit	r3, r3
 80022bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80022be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c0:	fab3 f383 	clz	r3, r3
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	095b      	lsrs	r3, r3, #5
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	f043 0301 	orr.w	r3, r3, #1
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d102      	bne.n	80022da <HAL_RCC_ClockConfig+0xa6>
 80022d4:	4b6f      	ldr	r3, [pc, #444]	; (8002494 <HAL_RCC_ClockConfig+0x260>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	e00f      	b.n	80022fa <HAL_RCC_ClockConfig+0xc6>
 80022da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022e2:	fa93 f3a3 	rbit	r3, r3
 80022e6:	667b      	str	r3, [r7, #100]	; 0x64
 80022e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022ec:	663b      	str	r3, [r7, #96]	; 0x60
 80022ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022f0:	fa93 f3a3 	rbit	r3, r3
 80022f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022f6:	4b67      	ldr	r3, [pc, #412]	; (8002494 <HAL_RCC_ClockConfig+0x260>)
 80022f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022fe:	65ba      	str	r2, [r7, #88]	; 0x58
 8002300:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002302:	fa92 f2a2 	rbit	r2, r2
 8002306:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002308:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800230a:	fab2 f282 	clz	r2, r2
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	f042 0220 	orr.w	r2, r2, #32
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	f002 021f 	and.w	r2, r2, #31
 800231a:	2101      	movs	r1, #1
 800231c:	fa01 f202 	lsl.w	r2, r1, r2
 8002320:	4013      	ands	r3, r2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d17b      	bne.n	800241e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e0f3      	b.n	8002512 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b02      	cmp	r3, #2
 8002330:	d13c      	bne.n	80023ac <HAL_RCC_ClockConfig+0x178>
 8002332:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002336:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800233a:	fa93 f3a3 	rbit	r3, r3
 800233e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002342:	fab3 f383 	clz	r3, r3
 8002346:	b2db      	uxtb	r3, r3
 8002348:	095b      	lsrs	r3, r3, #5
 800234a:	b2db      	uxtb	r3, r3
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b01      	cmp	r3, #1
 8002354:	d102      	bne.n	800235c <HAL_RCC_ClockConfig+0x128>
 8002356:	4b4f      	ldr	r3, [pc, #316]	; (8002494 <HAL_RCC_ClockConfig+0x260>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	e00f      	b.n	800237c <HAL_RCC_ClockConfig+0x148>
 800235c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002360:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002362:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002364:	fa93 f3a3 	rbit	r3, r3
 8002368:	647b      	str	r3, [r7, #68]	; 0x44
 800236a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800236e:	643b      	str	r3, [r7, #64]	; 0x40
 8002370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002372:	fa93 f3a3 	rbit	r3, r3
 8002376:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002378:	4b46      	ldr	r3, [pc, #280]	; (8002494 <HAL_RCC_ClockConfig+0x260>)
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002380:	63ba      	str	r2, [r7, #56]	; 0x38
 8002382:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002384:	fa92 f2a2 	rbit	r2, r2
 8002388:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800238a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800238c:	fab2 f282 	clz	r2, r2
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	f042 0220 	orr.w	r2, r2, #32
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	f002 021f 	and.w	r2, r2, #31
 800239c:	2101      	movs	r1, #1
 800239e:	fa01 f202 	lsl.w	r2, r1, r2
 80023a2:	4013      	ands	r3, r2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d13a      	bne.n	800241e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e0b2      	b.n	8002512 <HAL_RCC_ClockConfig+0x2de>
 80023ac:	2302      	movs	r3, #2
 80023ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b2:	fa93 f3a3 	rbit	r3, r3
 80023b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80023b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ba:	fab3 f383 	clz	r3, r3
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	095b      	lsrs	r3, r3, #5
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d102      	bne.n	80023d4 <HAL_RCC_ClockConfig+0x1a0>
 80023ce:	4b31      	ldr	r3, [pc, #196]	; (8002494 <HAL_RCC_ClockConfig+0x260>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	e00d      	b.n	80023f0 <HAL_RCC_ClockConfig+0x1bc>
 80023d4:	2302      	movs	r3, #2
 80023d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023da:	fa93 f3a3 	rbit	r3, r3
 80023de:	627b      	str	r3, [r7, #36]	; 0x24
 80023e0:	2302      	movs	r3, #2
 80023e2:	623b      	str	r3, [r7, #32]
 80023e4:	6a3b      	ldr	r3, [r7, #32]
 80023e6:	fa93 f3a3 	rbit	r3, r3
 80023ea:	61fb      	str	r3, [r7, #28]
 80023ec:	4b29      	ldr	r3, [pc, #164]	; (8002494 <HAL_RCC_ClockConfig+0x260>)
 80023ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f0:	2202      	movs	r2, #2
 80023f2:	61ba      	str	r2, [r7, #24]
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	fa92 f2a2 	rbit	r2, r2
 80023fa:	617a      	str	r2, [r7, #20]
  return result;
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	fab2 f282 	clz	r2, r2
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	f042 0220 	orr.w	r2, r2, #32
 8002408:	b2d2      	uxtb	r2, r2
 800240a:	f002 021f 	and.w	r2, r2, #31
 800240e:	2101      	movs	r1, #1
 8002410:	fa01 f202 	lsl.w	r2, r1, r2
 8002414:	4013      	ands	r3, r2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e079      	b.n	8002512 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800241e:	4b1d      	ldr	r3, [pc, #116]	; (8002494 <HAL_RCC_ClockConfig+0x260>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f023 0203 	bic.w	r2, r3, #3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	491a      	ldr	r1, [pc, #104]	; (8002494 <HAL_RCC_ClockConfig+0x260>)
 800242c:	4313      	orrs	r3, r2
 800242e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002430:	f7fe fbba 	bl	8000ba8 <HAL_GetTick>
 8002434:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002436:	e00a      	b.n	800244e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002438:	f7fe fbb6 	bl	8000ba8 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	f241 3288 	movw	r2, #5000	; 0x1388
 8002446:	4293      	cmp	r3, r2
 8002448:	d901      	bls.n	800244e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e061      	b.n	8002512 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244e:	4b11      	ldr	r3, [pc, #68]	; (8002494 <HAL_RCC_ClockConfig+0x260>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f003 020c 	and.w	r2, r3, #12
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	429a      	cmp	r2, r3
 800245e:	d1eb      	bne.n	8002438 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002460:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <HAL_RCC_ClockConfig+0x25c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	d214      	bcs.n	8002498 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246e:	4b08      	ldr	r3, [pc, #32]	; (8002490 <HAL_RCC_ClockConfig+0x25c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f023 0207 	bic.w	r2, r3, #7
 8002476:	4906      	ldr	r1, [pc, #24]	; (8002490 <HAL_RCC_ClockConfig+0x25c>)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	4313      	orrs	r3, r2
 800247c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800247e:	4b04      	ldr	r3, [pc, #16]	; (8002490 <HAL_RCC_ClockConfig+0x25c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	429a      	cmp	r2, r3
 800248a:	d005      	beq.n	8002498 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e040      	b.n	8002512 <HAL_RCC_ClockConfig+0x2de>
 8002490:	40022000 	.word	0x40022000
 8002494:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d008      	beq.n	80024b6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024a4:	4b1d      	ldr	r3, [pc, #116]	; (800251c <HAL_RCC_ClockConfig+0x2e8>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	491a      	ldr	r1, [pc, #104]	; (800251c <HAL_RCC_ClockConfig+0x2e8>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0308 	and.w	r3, r3, #8
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d009      	beq.n	80024d6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024c2:	4b16      	ldr	r3, [pc, #88]	; (800251c <HAL_RCC_ClockConfig+0x2e8>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	4912      	ldr	r1, [pc, #72]	; (800251c <HAL_RCC_ClockConfig+0x2e8>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80024d6:	f000 f829 	bl	800252c <HAL_RCC_GetSysClockFreq>
 80024da:	4601      	mov	r1, r0
 80024dc:	4b0f      	ldr	r3, [pc, #60]	; (800251c <HAL_RCC_ClockConfig+0x2e8>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024e4:	22f0      	movs	r2, #240	; 0xf0
 80024e6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	fa92 f2a2 	rbit	r2, r2
 80024ee:	60fa      	str	r2, [r7, #12]
  return result;
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	fab2 f282 	clz	r2, r2
 80024f6:	b2d2      	uxtb	r2, r2
 80024f8:	40d3      	lsrs	r3, r2
 80024fa:	4a09      	ldr	r2, [pc, #36]	; (8002520 <HAL_RCC_ClockConfig+0x2ec>)
 80024fc:	5cd3      	ldrb	r3, [r2, r3]
 80024fe:	fa21 f303 	lsr.w	r3, r1, r3
 8002502:	4a08      	ldr	r2, [pc, #32]	; (8002524 <HAL_RCC_ClockConfig+0x2f0>)
 8002504:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002506:	4b08      	ldr	r3, [pc, #32]	; (8002528 <HAL_RCC_ClockConfig+0x2f4>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7fe fb08 	bl	8000b20 <HAL_InitTick>
  
  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3778      	adds	r7, #120	; 0x78
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40021000 	.word	0x40021000
 8002520:	08003fb0 	.word	0x08003fb0
 8002524:	200001b8 	.word	0x200001b8
 8002528:	200001bc 	.word	0x200001bc

0800252c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800252c:	b480      	push	{r7}
 800252e:	b087      	sub	sp, #28
 8002530:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	2300      	movs	r3, #0
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	2300      	movs	r3, #0
 800253c:	617b      	str	r3, [r7, #20]
 800253e:	2300      	movs	r3, #0
 8002540:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002542:	2300      	movs	r3, #0
 8002544:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002546:	4b1f      	ldr	r3, [pc, #124]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f003 030c 	and.w	r3, r3, #12
 8002552:	2b04      	cmp	r3, #4
 8002554:	d002      	beq.n	800255c <HAL_RCC_GetSysClockFreq+0x30>
 8002556:	2b08      	cmp	r3, #8
 8002558:	d003      	beq.n	8002562 <HAL_RCC_GetSysClockFreq+0x36>
 800255a:	e029      	b.n	80025b0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800255c:	4b1a      	ldr	r3, [pc, #104]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800255e:	613b      	str	r3, [r7, #16]
      break;
 8002560:	e029      	b.n	80025b6 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	0c9b      	lsrs	r3, r3, #18
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	4a18      	ldr	r2, [pc, #96]	; (80025cc <HAL_RCC_GetSysClockFreq+0xa0>)
 800256c:	5cd3      	ldrb	r3, [r2, r3]
 800256e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002570:	4b14      	ldr	r3, [pc, #80]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002574:	f003 030f 	and.w	r3, r3, #15
 8002578:	4a15      	ldr	r2, [pc, #84]	; (80025d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800257a:	5cd3      	ldrb	r3, [r2, r3]
 800257c:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d008      	beq.n	800259a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002588:	4a0f      	ldr	r2, [pc, #60]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	fb02 f303 	mul.w	r3, r2, r3
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	e007      	b.n	80025aa <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800259a:	4a0b      	ldr	r2, [pc, #44]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	fbb2 f2f3 	udiv	r2, r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	fb02 f303 	mul.w	r3, r2, r3
 80025a8:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	613b      	str	r3, [r7, #16]
      break;
 80025ae:	e002      	b.n	80025b6 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025b0:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 80025b2:	613b      	str	r3, [r7, #16]
      break;
 80025b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025b6:	693b      	ldr	r3, [r7, #16]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	371c      	adds	r7, #28
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	40021000 	.word	0x40021000
 80025c8:	007a1200 	.word	0x007a1200
 80025cc:	08003fc0 	.word	0x08003fc0
 80025d0:	08003fd0 	.word	0x08003fd0

080025d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b092      	sub	sp, #72	; 0x48
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025dc:	2300      	movs	r3, #0
 80025de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80025e0:	2300      	movs	r3, #0
 80025e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80025e4:	2300      	movs	r3, #0
 80025e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 80d4 	beq.w	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025f8:	4b4e      	ldr	r3, [pc, #312]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025fa:	69db      	ldr	r3, [r3, #28]
 80025fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10e      	bne.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002604:	4b4b      	ldr	r3, [pc, #300]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002606:	69db      	ldr	r3, [r3, #28]
 8002608:	4a4a      	ldr	r2, [pc, #296]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800260a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800260e:	61d3      	str	r3, [r2, #28]
 8002610:	4b48      	ldr	r3, [pc, #288]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002612:	69db      	ldr	r3, [r3, #28]
 8002614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800261c:	2301      	movs	r3, #1
 800261e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002622:	4b45      	ldr	r3, [pc, #276]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262a:	2b00      	cmp	r3, #0
 800262c:	d118      	bne.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800262e:	4b42      	ldr	r3, [pc, #264]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a41      	ldr	r2, [pc, #260]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002638:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800263a:	f7fe fab5 	bl	8000ba8 <HAL_GetTick>
 800263e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002640:	e008      	b.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002642:	f7fe fab1 	bl	8000ba8 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b64      	cmp	r3, #100	; 0x64
 800264e:	d901      	bls.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e1d6      	b.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002654:	4b38      	ldr	r3, [pc, #224]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0f0      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002660:	4b34      	ldr	r3, [pc, #208]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002668:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800266a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 8084 	beq.w	800277a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800267a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800267c:	429a      	cmp	r2, r3
 800267e:	d07c      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002680:	4b2c      	ldr	r3, [pc, #176]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002688:	63fb      	str	r3, [r7, #60]	; 0x3c
 800268a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800268e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002692:	fa93 f3a3 	rbit	r3, r3
 8002696:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800269a:	fab3 f383 	clz	r3, r3
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	461a      	mov	r2, r3
 80026a2:	4b26      	ldr	r3, [pc, #152]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80026a4:	4413      	add	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	461a      	mov	r2, r3
 80026aa:	2301      	movs	r3, #1
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b6:	fa93 f3a3 	rbit	r3, r3
 80026ba:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80026bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026be:	fab3 f383 	clz	r3, r3
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	461a      	mov	r2, r3
 80026c6:	4b1d      	ldr	r3, [pc, #116]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80026c8:	4413      	add	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	461a      	mov	r2, r3
 80026ce:	2300      	movs	r3, #0
 80026d0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80026d2:	4a18      	ldr	r2, [pc, #96]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026d6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80026d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d04b      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e2:	f7fe fa61 	bl	8000ba8 <HAL_GetTick>
 80026e6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e8:	e00a      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ea:	f7fe fa5d 	bl	8000ba8 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d901      	bls.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e180      	b.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002700:	2302      	movs	r3, #2
 8002702:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002706:	fa93 f3a3 	rbit	r3, r3
 800270a:	627b      	str	r3, [r7, #36]	; 0x24
 800270c:	2302      	movs	r3, #2
 800270e:	623b      	str	r3, [r7, #32]
 8002710:	6a3b      	ldr	r3, [r7, #32]
 8002712:	fa93 f3a3 	rbit	r3, r3
 8002716:	61fb      	str	r3, [r7, #28]
  return result;
 8002718:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800271a:	fab3 f383 	clz	r3, r3
 800271e:	b2db      	uxtb	r3, r3
 8002720:	095b      	lsrs	r3, r3, #5
 8002722:	b2db      	uxtb	r3, r3
 8002724:	f043 0302 	orr.w	r3, r3, #2
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d108      	bne.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800272e:	4b01      	ldr	r3, [pc, #4]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	e00d      	b.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002734:	40021000 	.word	0x40021000
 8002738:	40007000 	.word	0x40007000
 800273c:	10908100 	.word	0x10908100
 8002740:	2302      	movs	r3, #2
 8002742:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	fa93 f3a3 	rbit	r3, r3
 800274a:	617b      	str	r3, [r7, #20]
 800274c:	4b9a      	ldr	r3, [pc, #616]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	2202      	movs	r2, #2
 8002752:	613a      	str	r2, [r7, #16]
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	fa92 f2a2 	rbit	r2, r2
 800275a:	60fa      	str	r2, [r7, #12]
  return result;
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	fab2 f282 	clz	r2, r2
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	f002 021f 	and.w	r2, r2, #31
 800276e:	2101      	movs	r1, #1
 8002770:	fa01 f202 	lsl.w	r2, r1, r2
 8002774:	4013      	ands	r3, r2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d0b7      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800277a:	4b8f      	ldr	r3, [pc, #572]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	498c      	ldr	r1, [pc, #560]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002788:	4313      	orrs	r3, r2
 800278a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800278c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002790:	2b01      	cmp	r3, #1
 8002792:	d105      	bne.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002794:	4b88      	ldr	r3, [pc, #544]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002796:	69db      	ldr	r3, [r3, #28]
 8002798:	4a87      	ldr	r2, [pc, #540]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800279a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800279e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d008      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027ac:	4b82      	ldr	r3, [pc, #520]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b0:	f023 0203 	bic.w	r2, r3, #3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	497f      	ldr	r1, [pc, #508]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d008      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027ca:	4b7b      	ldr	r3, [pc, #492]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	4978      	ldr	r1, [pc, #480]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d008      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027e8:	4b73      	ldr	r3, [pc, #460]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	4970      	ldr	r1, [pc, #448]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0320 	and.w	r3, r3, #32
 8002802:	2b00      	cmp	r3, #0
 8002804:	d008      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002806:	4b6c      	ldr	r3, [pc, #432]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	f023 0210 	bic.w	r2, r3, #16
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	4969      	ldr	r1, [pc, #420]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002814:	4313      	orrs	r3, r2
 8002816:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d008      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002824:	4b64      	ldr	r3, [pc, #400]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002830:	4961      	ldr	r1, [pc, #388]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002832:	4313      	orrs	r3, r2
 8002834:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800283e:	2b00      	cmp	r3, #0
 8002840:	d008      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002842:	4b5d      	ldr	r3, [pc, #372]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	f023 0220 	bic.w	r2, r3, #32
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	495a      	ldr	r1, [pc, #360]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002850:	4313      	orrs	r3, r2
 8002852:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d008      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002860:	4b55      	ldr	r3, [pc, #340]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002864:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286c:	4952      	ldr	r1, [pc, #328]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800286e:	4313      	orrs	r3, r2
 8002870:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0308 	and.w	r3, r3, #8
 800287a:	2b00      	cmp	r3, #0
 800287c:	d008      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800287e:	4b4e      	ldr	r3, [pc, #312]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	494b      	ldr	r1, [pc, #300]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800288c:	4313      	orrs	r3, r2
 800288e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0310 	and.w	r3, r3, #16
 8002898:	2b00      	cmp	r3, #0
 800289a:	d008      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800289c:	4b46      	ldr	r3, [pc, #280]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800289e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	4943      	ldr	r1, [pc, #268]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d008      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028ba:	4b3f      	ldr	r3, [pc, #252]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	493c      	ldr	r1, [pc, #240]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d008      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80028d8:	4b37      	ldr	r3, [pc, #220]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028dc:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e4:	4934      	ldr	r1, [pc, #208]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d008      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80028f6:	4b30      	ldr	r3, [pc, #192]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fa:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002902:	492d      	ldr	r1, [pc, #180]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002904:	4313      	orrs	r3, r2
 8002906:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d008      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002914:	4b28      	ldr	r3, [pc, #160]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002918:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002920:	4925      	ldr	r1, [pc, #148]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002922:	4313      	orrs	r3, r2
 8002924:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d008      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002932:	4b21      	ldr	r3, [pc, #132]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	491e      	ldr	r1, [pc, #120]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002940:	4313      	orrs	r3, r2
 8002942:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d008      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002950:	4b19      	ldr	r3, [pc, #100]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002954:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295c:	4916      	ldr	r1, [pc, #88]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800295e:	4313      	orrs	r3, r2
 8002960:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d008      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800296e:	4b12      	ldr	r3, [pc, #72]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297a:	490f      	ldr	r1, [pc, #60]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800297c:	4313      	orrs	r3, r2
 800297e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d008      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800298c:	4b0a      	ldr	r3, [pc, #40]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800298e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002990:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002998:	4907      	ldr	r1, [pc, #28]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800299a:	4313      	orrs	r3, r2
 800299c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00c      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80029aa:	4b03      	ldr	r3, [pc, #12]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	e002      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80029b6:	bf00      	nop
 80029b8:	40021000 	.word	0x40021000
 80029bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029be:	4913      	ldr	r1, [pc, #76]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d008      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80029d0:	4b0e      	ldr	r3, [pc, #56]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029dc:	490b      	ldr	r1, [pc, #44]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d008      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80029ee:	4b07      	ldr	r3, [pc, #28]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029fa:	4904      	ldr	r1, [pc, #16]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3748      	adds	r7, #72	; 0x48
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40021000 	.word	0x40021000

08002a10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e09d      	b.n	8002b5e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d108      	bne.n	8002a3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a32:	d009      	beq.n	8002a48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	61da      	str	r2, [r3, #28]
 8002a3a:	e005      	b.n	8002a48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d106      	bne.n	8002a68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7fd ff0e 	bl	8000884 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a7e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a88:	d902      	bls.n	8002a90 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	e002      	b.n	8002a96 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002a90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a94:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002a9e:	d007      	beq.n	8002ab0 <HAL_SPI_Init+0xa0>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002aa8:	d002      	beq.n	8002ab0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	431a      	orrs	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af2:	ea42 0103 	orr.w	r1, r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	0c1b      	lsrs	r3, r3, #16
 8002b0c:	f003 0204 	and.w	r2, r3, #4
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	f003 0310 	and.w	r3, r3, #16
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b1e:	f003 0308 	and.w	r3, r3, #8
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002b2c:	ea42 0103 	orr.w	r1, r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	69da      	ldr	r2, [r3, #28]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b4c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b088      	sub	sp, #32
 8002b6a:	af02      	add	r7, sp, #8
 8002b6c:	60f8      	str	r0, [r7, #12]
 8002b6e:	60b9      	str	r1, [r7, #8]
 8002b70:	603b      	str	r3, [r7, #0]
 8002b72:	4613      	mov	r3, r2
 8002b74:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b76:	2300      	movs	r3, #0
 8002b78:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d002      	beq.n	8002b8c <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002b86:	2302      	movs	r3, #2
 8002b88:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b8a:	e11a      	b.n	8002dc2 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b94:	d112      	bne.n	8002bbc <HAL_SPI_Receive+0x56>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10e      	bne.n	8002bbc <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2204      	movs	r2, #4
 8002ba2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002ba6:	88fa      	ldrh	r2, [r7, #6]
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	4613      	mov	r3, r2
 8002bae:	68ba      	ldr	r2, [r7, #8]
 8002bb0:	68b9      	ldr	r1, [r7, #8]
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f000 f90e 	bl	8002dd4 <HAL_SPI_TransmitReceive>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	e107      	b.n	8002dcc <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d101      	bne.n	8002bca <HAL_SPI_Receive+0x64>
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	e100      	b.n	8002dcc <HAL_SPI_Receive+0x266>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bd2:	f7fd ffe9 	bl	8000ba8 <HAL_GetTick>
 8002bd6:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d002      	beq.n	8002be4 <HAL_SPI_Receive+0x7e>
 8002bde:	88fb      	ldrh	r3, [r7, #6]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d102      	bne.n	8002bea <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002be8:	e0eb      	b.n	8002dc2 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2204      	movs	r2, #4
 8002bee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	88fa      	ldrh	r2, [r7, #6]
 8002c02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	88fa      	ldrh	r2, [r7, #6]
 8002c0a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c34:	d908      	bls.n	8002c48 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	685a      	ldr	r2, [r3, #4]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c44:	605a      	str	r2, [r3, #4]
 8002c46:	e007      	b.n	8002c58 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c56:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c60:	d10f      	bne.n	8002c82 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c70:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c80:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c8c:	2b40      	cmp	r3, #64	; 0x40
 8002c8e:	d007      	beq.n	8002ca0 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c9e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ca8:	d86f      	bhi.n	8002d8a <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002caa:	e034      	b.n	8002d16 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d117      	bne.n	8002cea <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f103 020c 	add.w	r2, r3, #12
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	7812      	ldrb	r2, [r2, #0]
 8002cc8:	b2d2      	uxtb	r2, r2
 8002cca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	1c5a      	adds	r2, r3, #1
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002ce8:	e015      	b.n	8002d16 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cea:	f7fd ff5d 	bl	8000ba8 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d803      	bhi.n	8002d02 <HAL_SPI_Receive+0x19c>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d00:	d102      	bne.n	8002d08 <HAL_SPI_Receive+0x1a2>
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d106      	bne.n	8002d16 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002d14:	e055      	b.n	8002dc2 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1c4      	bne.n	8002cac <HAL_SPI_Receive+0x146>
 8002d22:	e038      	b.n	8002d96 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d115      	bne.n	8002d5e <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68da      	ldr	r2, [r3, #12]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3c:	b292      	uxth	r2, r2
 8002d3e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d44:	1c9a      	adds	r2, r3, #2
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	3b01      	subs	r3, #1
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002d5c:	e015      	b.n	8002d8a <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d5e:	f7fd ff23 	bl	8000ba8 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d803      	bhi.n	8002d76 <HAL_SPI_Receive+0x210>
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d74:	d102      	bne.n	8002d7c <HAL_SPI_Receive+0x216>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d106      	bne.n	8002d8a <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002d88:	e01b      	b.n	8002dc2 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1c6      	bne.n	8002d24 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	6839      	ldr	r1, [r7, #0]
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f000 fb5a 	bl	8003454 <SPI_EndRxTransaction>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d002      	beq.n	8002dac <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2220      	movs	r2, #32
 8002daa:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d002      	beq.n	8002dba <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	75fb      	strb	r3, [r7, #23]
 8002db8:	e003      	b.n	8002dc2 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3718      	adds	r7, #24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b08a      	sub	sp, #40	; 0x28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
 8002de0:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002de2:	2301      	movs	r3, #1
 8002de4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002de6:	2300      	movs	r3, #0
 8002de8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d101      	bne.n	8002dfa <HAL_SPI_TransmitReceive+0x26>
 8002df6:	2302      	movs	r3, #2
 8002df8:	e20a      	b.n	8003210 <HAL_SPI_TransmitReceive+0x43c>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e02:	f7fd fed1 	bl	8000ba8 <HAL_GetTick>
 8002e06:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002e0e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002e16:	887b      	ldrh	r3, [r7, #2]
 8002e18:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002e1a:	887b      	ldrh	r3, [r7, #2]
 8002e1c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e1e:	7efb      	ldrb	r3, [r7, #27]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d00e      	beq.n	8002e42 <HAL_SPI_TransmitReceive+0x6e>
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e2a:	d106      	bne.n	8002e3a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d102      	bne.n	8002e3a <HAL_SPI_TransmitReceive+0x66>
 8002e34:	7efb      	ldrb	r3, [r7, #27]
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	d003      	beq.n	8002e42 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002e40:	e1e0      	b.n	8003204 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d005      	beq.n	8002e54 <HAL_SPI_TransmitReceive+0x80>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d002      	beq.n	8002e54 <HAL_SPI_TransmitReceive+0x80>
 8002e4e:	887b      	ldrh	r3, [r7, #2]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d103      	bne.n	8002e5c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002e5a:	e1d3      	b.n	8003204 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b04      	cmp	r3, #4
 8002e66:	d003      	beq.n	8002e70 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2205      	movs	r2, #5
 8002e6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	887a      	ldrh	r2, [r7, #2]
 8002e80:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	887a      	ldrh	r2, [r7, #2]
 8002e88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	887a      	ldrh	r2, [r7, #2]
 8002e96:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	887a      	ldrh	r2, [r7, #2]
 8002e9c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002eb2:	d802      	bhi.n	8002eba <HAL_SPI_TransmitReceive+0xe6>
 8002eb4:	8a3b      	ldrh	r3, [r7, #16]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d908      	bls.n	8002ecc <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ec8:	605a      	str	r2, [r3, #4]
 8002eca:	e007      	b.n	8002edc <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002eda:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee6:	2b40      	cmp	r3, #64	; 0x40
 8002ee8:	d007      	beq.n	8002efa <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ef8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f02:	f240 8081 	bls.w	8003008 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <HAL_SPI_TransmitReceive+0x140>
 8002f0e:	8a7b      	ldrh	r3, [r7, #18]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d16d      	bne.n	8002ff0 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f18:	881a      	ldrh	r2, [r3, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f24:	1c9a      	adds	r2, r3, #2
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	3b01      	subs	r3, #1
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f38:	e05a      	b.n	8002ff0 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d11b      	bne.n	8002f80 <HAL_SPI_TransmitReceive+0x1ac>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d016      	beq.n	8002f80 <HAL_SPI_TransmitReceive+0x1ac>
 8002f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d113      	bne.n	8002f80 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5c:	881a      	ldrh	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f68:	1c9a      	adds	r2, r3, #2
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	3b01      	subs	r3, #1
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d11c      	bne.n	8002fc8 <HAL_SPI_TransmitReceive+0x1f4>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d016      	beq.n	8002fc8 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68da      	ldr	r2, [r3, #12]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa4:	b292      	uxth	r2, r2
 8002fa6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fac:	1c9a      	adds	r2, r3, #2
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002fc8:	f7fd fdee 	bl	8000ba8 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d80b      	bhi.n	8002ff0 <HAL_SPI_TransmitReceive+0x21c>
 8002fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fde:	d007      	beq.n	8002ff0 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8002fee:	e109      	b.n	8003204 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d19f      	bne.n	8002f3a <HAL_SPI_TransmitReceive+0x166>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003000:	b29b      	uxth	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d199      	bne.n	8002f3a <HAL_SPI_TransmitReceive+0x166>
 8003006:	e0e3      	b.n	80031d0 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d003      	beq.n	8003018 <HAL_SPI_TransmitReceive+0x244>
 8003010:	8a7b      	ldrh	r3, [r7, #18]
 8003012:	2b01      	cmp	r3, #1
 8003014:	f040 80cf 	bne.w	80031b6 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800301c:	b29b      	uxth	r3, r3
 800301e:	2b01      	cmp	r3, #1
 8003020:	d912      	bls.n	8003048 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003026:	881a      	ldrh	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003032:	1c9a      	adds	r2, r3, #2
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800303c:	b29b      	uxth	r3, r3
 800303e:	3b02      	subs	r3, #2
 8003040:	b29a      	uxth	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003046:	e0b6      	b.n	80031b6 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	330c      	adds	r3, #12
 8003052:	7812      	ldrb	r2, [r2, #0]
 8003054:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305a:	1c5a      	adds	r2, r3, #1
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003064:	b29b      	uxth	r3, r3
 8003066:	3b01      	subs	r3, #1
 8003068:	b29a      	uxth	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800306e:	e0a2      	b.n	80031b6 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b02      	cmp	r3, #2
 800307c:	d134      	bne.n	80030e8 <HAL_SPI_TransmitReceive+0x314>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003082:	b29b      	uxth	r3, r3
 8003084:	2b00      	cmp	r3, #0
 8003086:	d02f      	beq.n	80030e8 <HAL_SPI_TransmitReceive+0x314>
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	2b01      	cmp	r3, #1
 800308c:	d12c      	bne.n	80030e8 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003092:	b29b      	uxth	r3, r3
 8003094:	2b01      	cmp	r3, #1
 8003096:	d912      	bls.n	80030be <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309c:	881a      	ldrh	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a8:	1c9a      	adds	r2, r3, #2
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	3b02      	subs	r3, #2
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80030bc:	e012      	b.n	80030e4 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	330c      	adds	r3, #12
 80030c8:	7812      	ldrb	r2, [r2, #0]
 80030ca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d0:	1c5a      	adds	r2, r3, #1
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030da:	b29b      	uxth	r3, r3
 80030dc:	3b01      	subs	r3, #1
 80030de:	b29a      	uxth	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80030e4:	2300      	movs	r3, #0
 80030e6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d148      	bne.n	8003188 <HAL_SPI_TransmitReceive+0x3b4>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d042      	beq.n	8003188 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003108:	b29b      	uxth	r3, r3
 800310a:	2b01      	cmp	r3, #1
 800310c:	d923      	bls.n	8003156 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68da      	ldr	r2, [r3, #12]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003118:	b292      	uxth	r2, r2
 800311a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003120:	1c9a      	adds	r2, r3, #2
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800312c:	b29b      	uxth	r3, r3
 800312e:	3b02      	subs	r3, #2
 8003130:	b29a      	uxth	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800313e:	b29b      	uxth	r3, r3
 8003140:	2b01      	cmp	r3, #1
 8003142:	d81f      	bhi.n	8003184 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003152:	605a      	str	r2, [r3, #4]
 8003154:	e016      	b.n	8003184 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f103 020c 	add.w	r2, r3, #12
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	7812      	ldrb	r2, [r2, #0]
 8003164:	b2d2      	uxtb	r2, r2
 8003166:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316c:	1c5a      	adds	r2, r3, #1
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003178:	b29b      	uxth	r3, r3
 800317a:	3b01      	subs	r3, #1
 800317c:	b29a      	uxth	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003184:	2301      	movs	r3, #1
 8003186:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003188:	f7fd fd0e 	bl	8000ba8 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003194:	429a      	cmp	r2, r3
 8003196:	d803      	bhi.n	80031a0 <HAL_SPI_TransmitReceive+0x3cc>
 8003198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319e:	d102      	bne.n	80031a6 <HAL_SPI_TransmitReceive+0x3d2>
 80031a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d107      	bne.n	80031b6 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80031b4:	e026      	b.n	8003204 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f47f af57 	bne.w	8003070 <HAL_SPI_TransmitReceive+0x29c>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f47f af50 	bne.w	8003070 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031d0:	69fa      	ldr	r2, [r7, #28]
 80031d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f000 f995 	bl	8003504 <SPI_EndRxTxTransaction>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d005      	beq.n	80031ec <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2220      	movs	r2, #32
 80031ea:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031fa:	e003      	b.n	8003204 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800320c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003210:	4618      	mov	r0, r3
 8003212:	3728      	adds	r7, #40	; 0x28
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b088      	sub	sp, #32
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	603b      	str	r3, [r7, #0]
 8003224:	4613      	mov	r3, r2
 8003226:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003228:	f7fd fcbe 	bl	8000ba8 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003230:	1a9b      	subs	r3, r3, r2
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	4413      	add	r3, r2
 8003236:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003238:	f7fd fcb6 	bl	8000ba8 <HAL_GetTick>
 800323c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800323e:	4b39      	ldr	r3, [pc, #228]	; (8003324 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	015b      	lsls	r3, r3, #5
 8003244:	0d1b      	lsrs	r3, r3, #20
 8003246:	69fa      	ldr	r2, [r7, #28]
 8003248:	fb02 f303 	mul.w	r3, r2, r3
 800324c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800324e:	e054      	b.n	80032fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003256:	d050      	beq.n	80032fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003258:	f7fd fca6 	bl	8000ba8 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	69fa      	ldr	r2, [r7, #28]
 8003264:	429a      	cmp	r2, r3
 8003266:	d902      	bls.n	800326e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d13d      	bne.n	80032ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800327c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003286:	d111      	bne.n	80032ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003290:	d004      	beq.n	800329c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800329a:	d107      	bne.n	80032ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032b4:	d10f      	bne.n	80032d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032c4:	601a      	str	r2, [r3, #0]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e017      	b.n	800331a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d101      	bne.n	80032f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80032f0:	2300      	movs	r3, #0
 80032f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	3b01      	subs	r3, #1
 80032f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	4013      	ands	r3, r2
 8003304:	68ba      	ldr	r2, [r7, #8]
 8003306:	429a      	cmp	r2, r3
 8003308:	bf0c      	ite	eq
 800330a:	2301      	moveq	r3, #1
 800330c:	2300      	movne	r3, #0
 800330e:	b2db      	uxtb	r3, r3
 8003310:	461a      	mov	r2, r3
 8003312:	79fb      	ldrb	r3, [r7, #7]
 8003314:	429a      	cmp	r2, r3
 8003316:	d19b      	bne.n	8003250 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3720      	adds	r7, #32
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	200001b8 	.word	0x200001b8

08003328 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b08a      	sub	sp, #40	; 0x28
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
 8003334:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003336:	2300      	movs	r3, #0
 8003338:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800333a:	f7fd fc35 	bl	8000ba8 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003342:	1a9b      	subs	r3, r3, r2
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	4413      	add	r3, r2
 8003348:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800334a:	f7fd fc2d 	bl	8000ba8 <HAL_GetTick>
 800334e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	330c      	adds	r3, #12
 8003356:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003358:	4b3d      	ldr	r3, [pc, #244]	; (8003450 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	4613      	mov	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	00da      	lsls	r2, r3, #3
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	0d1b      	lsrs	r3, r3, #20
 8003368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800336a:	fb02 f303 	mul.w	r3, r2, r3
 800336e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003370:	e060      	b.n	8003434 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003378:	d107      	bne.n	800338a <SPI_WaitFifoStateUntilTimeout+0x62>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d104      	bne.n	800338a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	b2db      	uxtb	r3, r3
 8003386:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003388:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003390:	d050      	beq.n	8003434 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003392:	f7fd fc09 	bl	8000ba8 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	6a3b      	ldr	r3, [r7, #32]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800339e:	429a      	cmp	r2, r3
 80033a0:	d902      	bls.n	80033a8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d13d      	bne.n	8003424 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80033b6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033c0:	d111      	bne.n	80033e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033ca:	d004      	beq.n	80033d6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033d4:	d107      	bne.n	80033e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033e4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033ee:	d10f      	bne.n	8003410 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033fe:	601a      	str	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800340e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e010      	b.n	8003446 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800342a:	2300      	movs	r3, #0
 800342c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	3b01      	subs	r3, #1
 8003432:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689a      	ldr	r2, [r3, #8]
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	4013      	ands	r3, r2
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	429a      	cmp	r2, r3
 8003442:	d196      	bne.n	8003372 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3728      	adds	r7, #40	; 0x28
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	200001b8 	.word	0x200001b8

08003454 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af02      	add	r7, sp, #8
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003468:	d111      	bne.n	800348e <SPI_EndRxTransaction+0x3a>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003472:	d004      	beq.n	800347e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800347c:	d107      	bne.n	800348e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800348c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	2200      	movs	r2, #0
 8003496:	2180      	movs	r1, #128	; 0x80
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f7ff febd 	bl	8003218 <SPI_WaitFlagStateUntilTimeout>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d007      	beq.n	80034b4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034a8:	f043 0220 	orr.w	r2, r3, #32
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e023      	b.n	80034fc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034bc:	d11d      	bne.n	80034fa <SPI_EndRxTransaction+0xa6>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034c6:	d004      	beq.n	80034d2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034d0:	d113      	bne.n	80034fa <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	9300      	str	r3, [sp, #0]
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	2200      	movs	r2, #0
 80034da:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f7ff ff22 	bl	8003328 <SPI_WaitFifoStateUntilTimeout>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d007      	beq.n	80034fa <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ee:	f043 0220 	orr.w	r2, r3, #32
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e000      	b.n	80034fc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af02      	add	r7, sp, #8
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	9300      	str	r3, [sp, #0]
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	2200      	movs	r2, #0
 8003518:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f7ff ff03 	bl	8003328 <SPI_WaitFifoStateUntilTimeout>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d007      	beq.n	8003538 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800352c:	f043 0220 	orr.w	r2, r3, #32
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e027      	b.n	8003588 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	9300      	str	r3, [sp, #0]
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	2200      	movs	r2, #0
 8003540:	2180      	movs	r1, #128	; 0x80
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f7ff fe68 	bl	8003218 <SPI_WaitFlagStateUntilTimeout>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d007      	beq.n	800355e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003552:	f043 0220 	orr.w	r2, r3, #32
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e014      	b.n	8003588 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	2200      	movs	r2, #0
 8003566:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f7ff fedc 	bl	8003328 <SPI_WaitFifoStateUntilTimeout>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d007      	beq.n	8003586 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800357a:	f043 0220 	orr.w	r2, r3, #32
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e000      	b.n	8003588 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e049      	b.n	8003636 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d106      	bne.n	80035bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7fd fa06 	bl	80009c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2202      	movs	r2, #2
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	3304      	adds	r3, #4
 80035cc:	4619      	mov	r1, r3
 80035ce:	4610      	mov	r0, r2
 80035d0:	f000 fac8 	bl	8003b64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
	...

08003640 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b01      	cmp	r3, #1
 8003652:	d001      	beq.n	8003658 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e04f      	b.n	80036f8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2202      	movs	r2, #2
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0201 	orr.w	r2, r2, #1
 800366e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a23      	ldr	r2, [pc, #140]	; (8003704 <HAL_TIM_Base_Start_IT+0xc4>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d01d      	beq.n	80036b6 <HAL_TIM_Base_Start_IT+0x76>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003682:	d018      	beq.n	80036b6 <HAL_TIM_Base_Start_IT+0x76>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a1f      	ldr	r2, [pc, #124]	; (8003708 <HAL_TIM_Base_Start_IT+0xc8>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d013      	beq.n	80036b6 <HAL_TIM_Base_Start_IT+0x76>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a1e      	ldr	r2, [pc, #120]	; (800370c <HAL_TIM_Base_Start_IT+0xcc>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d00e      	beq.n	80036b6 <HAL_TIM_Base_Start_IT+0x76>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a1c      	ldr	r2, [pc, #112]	; (8003710 <HAL_TIM_Base_Start_IT+0xd0>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d009      	beq.n	80036b6 <HAL_TIM_Base_Start_IT+0x76>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a1b      	ldr	r2, [pc, #108]	; (8003714 <HAL_TIM_Base_Start_IT+0xd4>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d004      	beq.n	80036b6 <HAL_TIM_Base_Start_IT+0x76>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a19      	ldr	r2, [pc, #100]	; (8003718 <HAL_TIM_Base_Start_IT+0xd8>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d115      	bne.n	80036e2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	4b17      	ldr	r3, [pc, #92]	; (800371c <HAL_TIM_Base_Start_IT+0xdc>)
 80036be:	4013      	ands	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2b06      	cmp	r3, #6
 80036c6:	d015      	beq.n	80036f4 <HAL_TIM_Base_Start_IT+0xb4>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ce:	d011      	beq.n	80036f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0201 	orr.w	r2, r2, #1
 80036de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036e0:	e008      	b.n	80036f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f042 0201 	orr.w	r2, r2, #1
 80036f0:	601a      	str	r2, [r3, #0]
 80036f2:	e000      	b.n	80036f6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	40012c00 	.word	0x40012c00
 8003708:	40000400 	.word	0x40000400
 800370c:	40000800 	.word	0x40000800
 8003710:	40013400 	.word	0x40013400
 8003714:	40014000 	.word	0x40014000
 8003718:	40015000 	.word	0x40015000
 800371c:	00010007 	.word	0x00010007

08003720 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68da      	ldr	r2, [r3, #12]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 0201 	bic.w	r2, r2, #1
 8003736:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6a1a      	ldr	r2, [r3, #32]
 800373e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003742:	4013      	ands	r3, r2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10f      	bne.n	8003768 <HAL_TIM_Base_Stop_IT+0x48>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6a1a      	ldr	r2, [r3, #32]
 800374e:	f240 4344 	movw	r3, #1092	; 0x444
 8003752:	4013      	ands	r3, r2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d107      	bne.n	8003768 <HAL_TIM_Base_Stop_IT+0x48>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 0201 	bic.w	r2, r2, #1
 8003766:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b084      	sub	sp, #16
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d020      	beq.n	80037e2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d01b      	beq.n	80037e2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f06f 0202 	mvn.w	r2, #2
 80037b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	f003 0303 	and.w	r3, r3, #3
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d003      	beq.n	80037d0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f9ad 	bl	8003b28 <HAL_TIM_IC_CaptureCallback>
 80037ce:	e005      	b.n	80037dc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 f99f 	bl	8003b14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f9b0 	bl	8003b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d020      	beq.n	800382e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f003 0304 	and.w	r3, r3, #4
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d01b      	beq.n	800382e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f06f 0204 	mvn.w	r2, #4
 80037fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2202      	movs	r2, #2
 8003804:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f987 	bl	8003b28 <HAL_TIM_IC_CaptureCallback>
 800381a:	e005      	b.n	8003828 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 f979 	bl	8003b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f98a 	bl	8003b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	f003 0308 	and.w	r3, r3, #8
 8003834:	2b00      	cmp	r3, #0
 8003836:	d020      	beq.n	800387a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f003 0308 	and.w	r3, r3, #8
 800383e:	2b00      	cmp	r3, #0
 8003840:	d01b      	beq.n	800387a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f06f 0208 	mvn.w	r2, #8
 800384a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2204      	movs	r2, #4
 8003850:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	f003 0303 	and.w	r3, r3, #3
 800385c:	2b00      	cmp	r3, #0
 800385e:	d003      	beq.n	8003868 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f961 	bl	8003b28 <HAL_TIM_IC_CaptureCallback>
 8003866:	e005      	b.n	8003874 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 f953 	bl	8003b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f964 	bl	8003b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	f003 0310 	and.w	r3, r3, #16
 8003880:	2b00      	cmp	r3, #0
 8003882:	d020      	beq.n	80038c6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f003 0310 	and.w	r3, r3, #16
 800388a:	2b00      	cmp	r3, #0
 800388c:	d01b      	beq.n	80038c6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f06f 0210 	mvn.w	r2, #16
 8003896:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2208      	movs	r2, #8
 800389c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	69db      	ldr	r3, [r3, #28]
 80038a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d003      	beq.n	80038b4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 f93b 	bl	8003b28 <HAL_TIM_IC_CaptureCallback>
 80038b2:	e005      	b.n	80038c0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f92d 	bl	8003b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f93e 	bl	8003b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00c      	beq.n	80038ea <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d007      	beq.n	80038ea <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f06f 0201 	mvn.w	r2, #1
 80038e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f7fc ff5b 	bl	80007a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00c      	beq.n	800390e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d007      	beq.n	800390e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003906:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 fb05 	bl	8003f18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00c      	beq.n	8003932 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800391e:	2b00      	cmp	r3, #0
 8003920:	d007      	beq.n	8003932 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800392a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 fafd 	bl	8003f2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00c      	beq.n	8003956 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003942:	2b00      	cmp	r3, #0
 8003944:	d007      	beq.n	8003956 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800394e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 f8fd 	bl	8003b50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	f003 0320 	and.w	r3, r3, #32
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00c      	beq.n	800397a <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f003 0320 	and.w	r3, r3, #32
 8003966:	2b00      	cmp	r3, #0
 8003968:	d007      	beq.n	800397a <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f06f 0220 	mvn.w	r2, #32
 8003972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 fac5 	bl	8003f04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800397a:	bf00      	nop
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b084      	sub	sp, #16
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
 800398a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800398c:	2300      	movs	r3, #0
 800398e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003996:	2b01      	cmp	r3, #1
 8003998:	d101      	bne.n	800399e <HAL_TIM_ConfigClockSource+0x1c>
 800399a:	2302      	movs	r3, #2
 800399c:	e0b6      	b.n	8003b0c <HAL_TIM_ConfigClockSource+0x18a>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2202      	movs	r2, #2
 80039aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039bc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80039c0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039c8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68ba      	ldr	r2, [r7, #8]
 80039d0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039da:	d03e      	beq.n	8003a5a <HAL_TIM_ConfigClockSource+0xd8>
 80039dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039e0:	f200 8087 	bhi.w	8003af2 <HAL_TIM_ConfigClockSource+0x170>
 80039e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039e8:	f000 8086 	beq.w	8003af8 <HAL_TIM_ConfigClockSource+0x176>
 80039ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039f0:	d87f      	bhi.n	8003af2 <HAL_TIM_ConfigClockSource+0x170>
 80039f2:	2b70      	cmp	r3, #112	; 0x70
 80039f4:	d01a      	beq.n	8003a2c <HAL_TIM_ConfigClockSource+0xaa>
 80039f6:	2b70      	cmp	r3, #112	; 0x70
 80039f8:	d87b      	bhi.n	8003af2 <HAL_TIM_ConfigClockSource+0x170>
 80039fa:	2b60      	cmp	r3, #96	; 0x60
 80039fc:	d050      	beq.n	8003aa0 <HAL_TIM_ConfigClockSource+0x11e>
 80039fe:	2b60      	cmp	r3, #96	; 0x60
 8003a00:	d877      	bhi.n	8003af2 <HAL_TIM_ConfigClockSource+0x170>
 8003a02:	2b50      	cmp	r3, #80	; 0x50
 8003a04:	d03c      	beq.n	8003a80 <HAL_TIM_ConfigClockSource+0xfe>
 8003a06:	2b50      	cmp	r3, #80	; 0x50
 8003a08:	d873      	bhi.n	8003af2 <HAL_TIM_ConfigClockSource+0x170>
 8003a0a:	2b40      	cmp	r3, #64	; 0x40
 8003a0c:	d058      	beq.n	8003ac0 <HAL_TIM_ConfigClockSource+0x13e>
 8003a0e:	2b40      	cmp	r3, #64	; 0x40
 8003a10:	d86f      	bhi.n	8003af2 <HAL_TIM_ConfigClockSource+0x170>
 8003a12:	2b30      	cmp	r3, #48	; 0x30
 8003a14:	d064      	beq.n	8003ae0 <HAL_TIM_ConfigClockSource+0x15e>
 8003a16:	2b30      	cmp	r3, #48	; 0x30
 8003a18:	d86b      	bhi.n	8003af2 <HAL_TIM_ConfigClockSource+0x170>
 8003a1a:	2b20      	cmp	r3, #32
 8003a1c:	d060      	beq.n	8003ae0 <HAL_TIM_ConfigClockSource+0x15e>
 8003a1e:	2b20      	cmp	r3, #32
 8003a20:	d867      	bhi.n	8003af2 <HAL_TIM_ConfigClockSource+0x170>
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d05c      	beq.n	8003ae0 <HAL_TIM_ConfigClockSource+0x15e>
 8003a26:	2b10      	cmp	r3, #16
 8003a28:	d05a      	beq.n	8003ae0 <HAL_TIM_ConfigClockSource+0x15e>
 8003a2a:	e062      	b.n	8003af2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6818      	ldr	r0, [r3, #0]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	6899      	ldr	r1, [r3, #8]
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f000 f9b6 	bl	8003dac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a4e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68ba      	ldr	r2, [r7, #8]
 8003a56:	609a      	str	r2, [r3, #8]
      break;
 8003a58:	e04f      	b.n	8003afa <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6818      	ldr	r0, [r3, #0]
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	6899      	ldr	r1, [r3, #8]
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	f000 f99f 	bl	8003dac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a7c:	609a      	str	r2, [r3, #8]
      break;
 8003a7e:	e03c      	b.n	8003afa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6818      	ldr	r0, [r3, #0]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	6859      	ldr	r1, [r3, #4]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	f000 f913 	bl	8003cb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2150      	movs	r1, #80	; 0x50
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 f96c 	bl	8003d76 <TIM_ITRx_SetConfig>
      break;
 8003a9e:	e02c      	b.n	8003afa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6818      	ldr	r0, [r3, #0]
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	6859      	ldr	r1, [r3, #4]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	461a      	mov	r2, r3
 8003aae:	f000 f932 	bl	8003d16 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2160      	movs	r1, #96	; 0x60
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f000 f95c 	bl	8003d76 <TIM_ITRx_SetConfig>
      break;
 8003abe:	e01c      	b.n	8003afa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6818      	ldr	r0, [r3, #0]
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	6859      	ldr	r1, [r3, #4]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	461a      	mov	r2, r3
 8003ace:	f000 f8f3 	bl	8003cb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2140      	movs	r1, #64	; 0x40
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f000 f94c 	bl	8003d76 <TIM_ITRx_SetConfig>
      break;
 8003ade:	e00c      	b.n	8003afa <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4619      	mov	r1, r3
 8003aea:	4610      	mov	r0, r2
 8003aec:	f000 f943 	bl	8003d76 <TIM_ITRx_SetConfig>
      break;
 8003af0:	e003      	b.n	8003afa <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	73fb      	strb	r3, [r7, #15]
      break;
 8003af6:	e000      	b.n	8003afa <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003af8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a48      	ldr	r2, [pc, #288]	; (8003c98 <TIM_Base_SetConfig+0x134>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d013      	beq.n	8003ba4 <TIM_Base_SetConfig+0x40>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b82:	d00f      	beq.n	8003ba4 <TIM_Base_SetConfig+0x40>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a45      	ldr	r2, [pc, #276]	; (8003c9c <TIM_Base_SetConfig+0x138>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d00b      	beq.n	8003ba4 <TIM_Base_SetConfig+0x40>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a44      	ldr	r2, [pc, #272]	; (8003ca0 <TIM_Base_SetConfig+0x13c>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d007      	beq.n	8003ba4 <TIM_Base_SetConfig+0x40>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a43      	ldr	r2, [pc, #268]	; (8003ca4 <TIM_Base_SetConfig+0x140>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d003      	beq.n	8003ba4 <TIM_Base_SetConfig+0x40>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a42      	ldr	r2, [pc, #264]	; (8003ca8 <TIM_Base_SetConfig+0x144>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d108      	bne.n	8003bb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003baa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a37      	ldr	r2, [pc, #220]	; (8003c98 <TIM_Base_SetConfig+0x134>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d01f      	beq.n	8003bfe <TIM_Base_SetConfig+0x9a>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc4:	d01b      	beq.n	8003bfe <TIM_Base_SetConfig+0x9a>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a34      	ldr	r2, [pc, #208]	; (8003c9c <TIM_Base_SetConfig+0x138>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d017      	beq.n	8003bfe <TIM_Base_SetConfig+0x9a>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a33      	ldr	r2, [pc, #204]	; (8003ca0 <TIM_Base_SetConfig+0x13c>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d013      	beq.n	8003bfe <TIM_Base_SetConfig+0x9a>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a32      	ldr	r2, [pc, #200]	; (8003ca4 <TIM_Base_SetConfig+0x140>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d00f      	beq.n	8003bfe <TIM_Base_SetConfig+0x9a>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a32      	ldr	r2, [pc, #200]	; (8003cac <TIM_Base_SetConfig+0x148>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d00b      	beq.n	8003bfe <TIM_Base_SetConfig+0x9a>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a31      	ldr	r2, [pc, #196]	; (8003cb0 <TIM_Base_SetConfig+0x14c>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d007      	beq.n	8003bfe <TIM_Base_SetConfig+0x9a>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a30      	ldr	r2, [pc, #192]	; (8003cb4 <TIM_Base_SetConfig+0x150>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d003      	beq.n	8003bfe <TIM_Base_SetConfig+0x9a>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a2b      	ldr	r2, [pc, #172]	; (8003ca8 <TIM_Base_SetConfig+0x144>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d108      	bne.n	8003c10 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a18      	ldr	r2, [pc, #96]	; (8003c98 <TIM_Base_SetConfig+0x134>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d013      	beq.n	8003c64 <TIM_Base_SetConfig+0x100>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a19      	ldr	r2, [pc, #100]	; (8003ca4 <TIM_Base_SetConfig+0x140>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d00f      	beq.n	8003c64 <TIM_Base_SetConfig+0x100>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a19      	ldr	r2, [pc, #100]	; (8003cac <TIM_Base_SetConfig+0x148>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d00b      	beq.n	8003c64 <TIM_Base_SetConfig+0x100>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a18      	ldr	r2, [pc, #96]	; (8003cb0 <TIM_Base_SetConfig+0x14c>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d007      	beq.n	8003c64 <TIM_Base_SetConfig+0x100>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a17      	ldr	r2, [pc, #92]	; (8003cb4 <TIM_Base_SetConfig+0x150>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d003      	beq.n	8003c64 <TIM_Base_SetConfig+0x100>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a12      	ldr	r2, [pc, #72]	; (8003ca8 <TIM_Base_SetConfig+0x144>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d103      	bne.n	8003c6c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	691a      	ldr	r2, [r3, #16]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d105      	bne.n	8003c8a <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	f023 0201 	bic.w	r2, r3, #1
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	611a      	str	r2, [r3, #16]
  }
}
 8003c8a:	bf00      	nop
 8003c8c:	3714      	adds	r7, #20
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	40012c00 	.word	0x40012c00
 8003c9c:	40000400 	.word	0x40000400
 8003ca0:	40000800 	.word	0x40000800
 8003ca4:	40013400 	.word	0x40013400
 8003ca8:	40015000 	.word	0x40015000
 8003cac:	40014000 	.word	0x40014000
 8003cb0:	40014400 	.word	0x40014400
 8003cb4:	40014800 	.word	0x40014800

08003cb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b087      	sub	sp, #28
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	f023 0201 	bic.w	r2, r3, #1
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ce2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	011b      	lsls	r3, r3, #4
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f023 030a 	bic.w	r3, r3, #10
 8003cf4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	621a      	str	r2, [r3, #32]
}
 8003d0a:	bf00      	nop
 8003d0c:	371c      	adds	r7, #28
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d16:	b480      	push	{r7}
 8003d18:	b087      	sub	sp, #28
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	60f8      	str	r0, [r7, #12]
 8003d1e:	60b9      	str	r1, [r7, #8]
 8003d20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	f023 0210 	bic.w	r2, r3, #16
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	031b      	lsls	r3, r3, #12
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d52:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	011b      	lsls	r3, r3, #4
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	621a      	str	r2, [r3, #32]
}
 8003d6a:	bf00      	nop
 8003d6c:	371c      	adds	r7, #28
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d76:	b480      	push	{r7}
 8003d78:	b085      	sub	sp, #20
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
 8003d7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	f043 0307 	orr.w	r3, r3, #7
 8003d98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	609a      	str	r2, [r3, #8]
}
 8003da0:	bf00      	nop
 8003da2:	3714      	adds	r7, #20
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b087      	sub	sp, #28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
 8003db8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	021a      	lsls	r2, r3, #8
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	609a      	str	r2, [r3, #8]
}
 8003de0:	bf00      	nop
 8003de2:	371c      	adds	r7, #28
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d101      	bne.n	8003e04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e00:	2302      	movs	r3, #2
 8003e02:	e06d      	b.n	8003ee0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a30      	ldr	r2, [pc, #192]	; (8003eec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d009      	beq.n	8003e42 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a2f      	ldr	r2, [pc, #188]	; (8003ef0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d004      	beq.n	8003e42 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a2d      	ldr	r2, [pc, #180]	; (8003ef4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d108      	bne.n	8003e54 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003e48:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a1e      	ldr	r2, [pc, #120]	; (8003eec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d01d      	beq.n	8003eb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e80:	d018      	beq.n	8003eb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a1c      	ldr	r2, [pc, #112]	; (8003ef8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d013      	beq.n	8003eb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a1a      	ldr	r2, [pc, #104]	; (8003efc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d00e      	beq.n	8003eb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a15      	ldr	r2, [pc, #84]	; (8003ef0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d009      	beq.n	8003eb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a16      	ldr	r2, [pc, #88]	; (8003f00 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d004      	beq.n	8003eb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a11      	ldr	r2, [pc, #68]	; (8003ef4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d10c      	bne.n	8003ece <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	68ba      	ldr	r2, [r7, #8]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3714      	adds	r7, #20
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	40012c00 	.word	0x40012c00
 8003ef0:	40013400 	.word	0x40013400
 8003ef4:	40015000 	.word	0x40015000
 8003ef8:	40000400 	.word	0x40000400
 8003efc:	40000800 	.word	0x40000800
 8003f00:	40014000 	.word	0x40014000

08003f04 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <__libc_init_array>:
 8003f40:	b570      	push	{r4, r5, r6, lr}
 8003f42:	4d0d      	ldr	r5, [pc, #52]	; (8003f78 <__libc_init_array+0x38>)
 8003f44:	4c0d      	ldr	r4, [pc, #52]	; (8003f7c <__libc_init_array+0x3c>)
 8003f46:	1b64      	subs	r4, r4, r5
 8003f48:	10a4      	asrs	r4, r4, #2
 8003f4a:	2600      	movs	r6, #0
 8003f4c:	42a6      	cmp	r6, r4
 8003f4e:	d109      	bne.n	8003f64 <__libc_init_array+0x24>
 8003f50:	4d0b      	ldr	r5, [pc, #44]	; (8003f80 <__libc_init_array+0x40>)
 8003f52:	4c0c      	ldr	r4, [pc, #48]	; (8003f84 <__libc_init_array+0x44>)
 8003f54:	f000 f820 	bl	8003f98 <_init>
 8003f58:	1b64      	subs	r4, r4, r5
 8003f5a:	10a4      	asrs	r4, r4, #2
 8003f5c:	2600      	movs	r6, #0
 8003f5e:	42a6      	cmp	r6, r4
 8003f60:	d105      	bne.n	8003f6e <__libc_init_array+0x2e>
 8003f62:	bd70      	pop	{r4, r5, r6, pc}
 8003f64:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f68:	4798      	blx	r3
 8003f6a:	3601      	adds	r6, #1
 8003f6c:	e7ee      	b.n	8003f4c <__libc_init_array+0xc>
 8003f6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f72:	4798      	blx	r3
 8003f74:	3601      	adds	r6, #1
 8003f76:	e7f2      	b.n	8003f5e <__libc_init_array+0x1e>
 8003f78:	08003fe0 	.word	0x08003fe0
 8003f7c:	08003fe0 	.word	0x08003fe0
 8003f80:	08003fe0 	.word	0x08003fe0
 8003f84:	08003fe4 	.word	0x08003fe4

08003f88 <memset>:
 8003f88:	4402      	add	r2, r0
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d100      	bne.n	8003f92 <memset+0xa>
 8003f90:	4770      	bx	lr
 8003f92:	f803 1b01 	strb.w	r1, [r3], #1
 8003f96:	e7f9      	b.n	8003f8c <memset+0x4>

08003f98 <_init>:
 8003f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f9a:	bf00      	nop
 8003f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f9e:	bc08      	pop	{r3}
 8003fa0:	469e      	mov	lr, r3
 8003fa2:	4770      	bx	lr

08003fa4 <_fini>:
 8003fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fa6:	bf00      	nop
 8003fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003faa:	bc08      	pop	{r3}
 8003fac:	469e      	mov	lr, r3
 8003fae:	4770      	bx	lr
